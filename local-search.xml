<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>小星学DSA丨关于图的一切</title>
    <link href="/2023/06/14/10-09-00/"/>
    <url>/2023/06/14/10-09-00/</url>
    
    <content type="html"><![CDATA[<p>这是小星学DSA系列的第五篇，我会记录我学习的过程与理解，希望能够帮到你。</p><p>本篇文章的完整思维导图如下。</p><p><img src="/images/posts/graph/graph.png" alt="图.png"></p><p>在之前的学习中，我们学习了所有的树，接下来我们将对树进行扩展，学习关于图的一切。</p><h1 id="图的基本概念"><a href="#图的基本概念" class="headerlink" title="图的基本概念"></a>图的基本概念</h1><h2 id="图的概念"><a href="#图的概念" class="headerlink" title="图的概念"></a>图的概念</h2><p>图是有限集V和E的有序对，即G&#x3D;(V,E)，其中V的元素称为顶点，E的元素称为边，每一条边连接两个不同的顶点，且用元组（i,j)来表示，其中i,j是边所连接的两个顶点。</p><h2 id="图的基本术语"><a href="#图的基本术语" class="headerlink" title="图的基本术语"></a>图的基本术语</h2><ul><li>相邻：如果有一条边连接两个顶点，则称这两个顶点相连</li><li>路径：从顶点A到顶点B的多条边</li><li>度数：与一个顶点v关联的边的条数称为该节点的度【(v,v)这样的边度数+2】</li><li>入度：以顶点为终点的边的条数</li><li>出度：以顶点为起点的边的条数</li></ul><h2 id="图的分类"><a href="#图的分类" class="headerlink" title="图的分类"></a>图的分类</h2><ul><li>有向图：边有方向的图，即E中的每个元素为有序二元组</li><li>无向图：边没有方向的图，E中的每个元素为无序二元组</li><li>带权图：若每条边被赋予了一个数作为权重，则称G为带权图</li></ul><h1 id="图的存储方式"><a href="#图的存储方式" class="headerlink" title="图的存储方式"></a>图的存储方式</h1><p>图一般使用邻接表或邻接矩阵的方式实现</p><h2 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h2><p>把每个节点x的邻居存在一个列表中，然后把x和这个列表关联起来</p><p><img src="/images/posts/graph/Untitled.png" alt="Untitled"></p><h3 id="邻接表的代码实现"><a href="#邻接表的代码实现" class="headerlink" title="邻接表的代码实现"></a>邻接表的代码实现</h3><p>使用C++实现邻接表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Graph</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> V; <span class="hljs-comment">// 顶点个数</span><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; adjList; <span class="hljs-comment">// 邻接表</span><br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 构造函数</span><br>    <span class="hljs-built_in">Graph</span>(<span class="hljs-type">int</span> V) &#123;<br>        <span class="hljs-keyword">this</span>-&gt;V = V;<br>        adjList.<span class="hljs-built_in">resize</span>(V);<br>    &#125;<br><br>    <span class="hljs-comment">// 添加边</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> v, <span class="hljs-type">int</span> w)</span> </span>&#123;<br>        adjList[v].<span class="hljs-built_in">push_back</span>(w);<br><span class="hljs-comment">// 若为有向图，则只添加单边</span><br>        adjList[w].<span class="hljs-built_in">push_back</span>(v);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h2><p>如果节点x和y相邻，则将矩阵的[x][y]的值设为True</p><p><img src="/images/posts/graph/Untitled%201.png" alt="Untitled"></p><h3 id="邻接矩阵的代码实现"><a href="#邻接矩阵的代码实现" class="headerlink" title="邻接矩阵的代码实现"></a>邻接矩阵的代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AdjacencyMatrix</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 构造函数，初始化邻接矩阵</span><br>    <span class="hljs-built_in">AdjacencyMatrix</span>(<span class="hljs-type">int</span> n, <span class="hljs-type">bool</span> is_directed = <span class="hljs-literal">false</span>) : <span class="hljs-built_in">num_nodes</span>(n), <span class="hljs-built_in">directed</span>(is_directed) &#123;<br>        matrix.<span class="hljs-built_in">resize</span>(num_nodes + <span class="hljs-number">1</span>, std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(num_nodes + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>));<br>    &#125;<br><br>    <span class="hljs-comment">// 添加边</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-type">int</span> node1, <span class="hljs-type">int</span> node2)</span> </span>&#123;<br>        matrix[node1][node2] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (!directed) &#123;<br><span class="hljs-comment">// 无向图双边添加权重</span><br>            matrix[node2][node1] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除边</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove_edge</span><span class="hljs-params">(<span class="hljs-type">int</span> node1, <span class="hljs-type">int</span> node2)</span> </span>&#123;<br>        matrix[node1][node2] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (!directed) &#123;<br>            matrix[node2][node1] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> num_nodes; <span class="hljs-comment">// 节点数量</span><br>    <span class="hljs-type">bool</span> directed; <span class="hljs-comment">// 是否为有向图</span><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; matrix; <span class="hljs-comment">// 存储邻接矩阵</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="带权图的实现"><a href="#带权图的实现" class="headerlink" title="带权图的实现"></a>带权图的实现</h2><h3 id="无向带权图"><a href="#无向带权图" class="headerlink" title="无向带权图"></a>无向带权图</h3><p>无向带权图使用邻接表存储顶点及其权重</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Graph</span> &#123;<br>    <span class="hljs-type">int</span> V; <span class="hljs-comment">// 图的顶点数</span><br>    vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; *adj; <span class="hljs-comment">// 邻接表，存储顶点及其权重</span><br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Graph</span>(<span class="hljs-type">int</span> V); <span class="hljs-comment">// 构造函数</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> v, <span class="hljs-type">int</span> w, <span class="hljs-type">int</span> weight)</span></span>; <span class="hljs-comment">// 向邻接表中添加边和权重</span><br>&#125;;<br><br>Graph::<span class="hljs-built_in">Graph</span>(<span class="hljs-type">int</span> V) &#123;<br>    <span class="hljs-keyword">this</span>-&gt;V = V;<br>    adj = <span class="hljs-keyword">new</span> vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;[V];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Graph::addEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> v, <span class="hljs-type">int</span> w, <span class="hljs-type">int</span> weight)</span> </span>&#123;<br>    adj[v].<span class="hljs-built_in">push_back</span>(&#123;w, weight&#125;);<br>    adj[w].<span class="hljs-built_in">push_back</span>(&#123;v, weight&#125;); <span class="hljs-comment">// 无向图，所以双向添加边和权重</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="有向带权图"><a href="#有向带权图" class="headerlink" title="有向带权图"></a>有向带权图</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Graph</span> &#123;<br>    <span class="hljs-type">int</span> V; <span class="hljs-comment">// 图的顶点数</span><br>    vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; *adj; <span class="hljs-comment">// 邻接表，存储顶点及其权重</span><br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Graph</span>(<span class="hljs-type">int</span> V); <span class="hljs-comment">// 构造函数</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> v, <span class="hljs-type">int</span> w, <span class="hljs-type">int</span> weight)</span></span>; <span class="hljs-comment">// 向邻接表中添加边和权重</span><br>&#125;;<br><br>Graph::<span class="hljs-built_in">Graph</span>(<span class="hljs-type">int</span> V) &#123;<br>    <span class="hljs-keyword">this</span>-&gt;V = V;<br>    adj = <span class="hljs-keyword">new</span> vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;[V];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Graph::addEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> v, <span class="hljs-type">int</span> w, <span class="hljs-type">int</span> weight)</span> </span>&#123;<br>    adj[v].<span class="hljs-built_in">push_back</span>(&#123;w, weight&#125;); <span class="hljs-comment">// 有向图，只添加一个方向的边和权重</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h1><h2 id="深度优先搜索DFS"><a href="#深度优先搜索DFS" class="headerlink" title="深度优先搜索DFS"></a>深度优先搜索DFS</h2><h3 id="辅助栈方法"><a href="#辅助栈方法" class="headerlink" title="辅助栈方法"></a>辅助栈方法</h3><p>使用辅助栈和数组实现深度优先，主要有以下几步：</p><ol><li>访问栈顶节点，并标记为已访问</li><li>对该节点的所有邻居节点，若未访问，则全部放入辅助栈中</li><li>由于始终访问栈顶结点，会沿某一条路径访问完所有的节点后再访问其他部分，故为深度优先</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Graph::DFS</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span> </span>&#123;<br>    <span class="hljs-comment">// 初始化所有顶点为未访问状态</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">visited</span><span class="hljs-params">(V, <span class="hljs-literal">false</span>)</span></span>;<br><br>    <span class="hljs-comment">// 使用stack实现DFS</span><br>    list&lt;<span class="hljs-type">int</span>&gt; stack;<br>    stack.<span class="hljs-built_in">push_back</span>(v);<br><br>    <span class="hljs-keyword">while</span> (!stack.<span class="hljs-built_in">empty</span>()) &#123;<br>        v = stack.<span class="hljs-built_in">back</span>();<br>        stack.<span class="hljs-built_in">pop_back</span>();<br><br>        <span class="hljs-keyword">if</span> (!visited[v]) &#123;<br>            visited[v] = <span class="hljs-literal">true</span>;<br>            cout &lt;&lt; v &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : adj[v]) &#123;<br>                <span class="hljs-keyword">if</span> (!visited[i]) &#123;<br>                    stack.<span class="hljs-built_in">push_back</span>(i);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="递归方法"><a href="#递归方法" class="headerlink" title="递归方法"></a>递归方法</h3><p>同样也可以使用递归的方法实现图的DFS遍历, 但在图结构或者树结构很深的时候递归调用会对系统栈造成压力。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs_recursive</span><span class="hljs-params">(<span class="hljs-type">char</span> current_node, <span class="hljs-type">const</span> unordered_map&lt;<span class="hljs-type">char</span>, vector&lt;<span class="hljs-type">char</span>&gt;&gt;&amp; graph, set&lt;<span class="hljs-type">char</span>&gt;&amp; visited)</span> </span>&#123;<br>    <span class="hljs-comment">// 1. 将当前节点标记为已访问</span><br>    visited.<span class="hljs-built_in">insert</span>(current_node);<br>    <br>    <span class="hljs-comment">// 2. 输出当前节点的信息</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;Visited &quot;</span> &lt;&lt; current_node &lt;&lt; endl;<br><br>    <span class="hljs-comment">// 3. 遍历与当前节点相邻的节点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-type">char</span>&amp; neighbor : graph.<span class="hljs-built_in">at</span>(current_node)) &#123;<br>        <span class="hljs-keyword">if</span> (visited.<span class="hljs-built_in">find</span>(neighbor) == visited.<span class="hljs-built_in">end</span>()) &#123;<br>            <span class="hljs-built_in">dfs_recursive</span>(neighbor, graph, visited);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="广度优先搜索BFS"><a href="#广度优先搜索BFS" class="headerlink" title="广度优先搜索BFS"></a>广度优先搜索BFS</h2><p>使用辅助队列和数组实现BFS:</p><ol><li>访问队头元素，并标记为已访问</li><li>对该节点的所有邻居节点，若未访问，则全放入辅助队列中</li><li>由于始终访问队头元素，会将一个节点的所有邻居节点访问完毕后再访问其他节点，故为广度优先搜索</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Graph::BFS</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span> </span>&#123;<br>    <span class="hljs-comment">// 初始化所有顶点为未访问状态</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">visited</span><span class="hljs-params">(V, <span class="hljs-literal">false</span>)</span></span>;<br>    <br>    <span class="hljs-comment">// 使用队列实现BFS</span><br>    list&lt;<span class="hljs-type">int</span>&gt; queue;<br>    visited[v] = <span class="hljs-literal">true</span>;<br>    queue.<span class="hljs-built_in">push_back</span>(v);<br><br>    <span class="hljs-keyword">while</span> (!queue.<span class="hljs-built_in">empty</span>()) &#123;<br>        v = queue.<span class="hljs-built_in">front</span>();<br>        cout &lt;&lt; v &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        queue.<span class="hljs-built_in">pop_front</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : adj[v]) &#123;<br>            <span class="hljs-keyword">if</span> (!visited[i]) &#123;<br>                visited[i] = <span class="hljs-literal">true</span>;<br>                queue.<span class="hljs-built_in">push_back</span>(i);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="图相关算法"><a href="#图相关算法" class="headerlink" title="图相关算法"></a>图相关算法</h1><h2 id="图的环检测算法"><a href="#图的环检测算法" class="headerlink" title="图的环检测算法"></a>图的环检测算法</h2><p>环检测（Cycle Detection）是在图中查找环的过程。在许多应用中，如任务调度、编译器优化和约束求解等，检测图中是否存在环非常重要。</p><h3 id="无向图环检测算法"><a href="#无向图环检测算法" class="headerlink" title="无向图环检测算法"></a>无向图环检测算法</h3><p>对于无向图，我们可以使用深度优先搜索（DFS）进行环检测。基本思想是，在访问邻接顶点时，如果碰到一个已经访问过的邻接顶点，<strong>并且这个邻接顶点不是当前顶点的父节点，</strong>那么就可以判断无向图中存在环。</p><p>需要：辅助栈，visited数组，并递归记录父节点信息</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">hasCycleUtil</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; graph, <span class="hljs-type">int</span> v, vector&lt;<span class="hljs-type">bool</span>&gt;&amp; visited, <span class="hljs-type">int</span> parent)</span> </span>&#123;<br>    visited[v] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> neighbor : graph[v]) &#123;<br>        <span class="hljs-keyword">if</span> (!visited[neighbor]) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">hasCycleUtil</span>(graph, neighbor, visited, v))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (neighbor != parent) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; graph)</span> </span>&#123;<br>    <span class="hljs-type">int</span> V = graph.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">visited</span><span class="hljs-params">(V, <span class="hljs-literal">false</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; V; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!visited[i]) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">hasCycleUtil</span>(graph, i, visited, <span class="hljs-number">-1</span>))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="有向图环检测算法"><a href="#有向图环检测算法" class="headerlink" title="有向图环检测算法"></a>有向图环检测算法</h3><p>对于有向图，我们同样可以使用DFS进行环检测，但需要稍作改动。用一个数组<code>status</code>记录每个顶点的状态：未访问（0）、正在访问（1）、已访问（2）。当我们在DFS过程中遇到一个正在访问的顶点时，说明有向图中存在环。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Graph::hasCycle</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">status</span><span class="hljs-params">(V, <span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// 初始化状态数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; V; i++) &#123;<br>        <span class="hljs-keyword">if</span> (status[i] == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">hasCycleUtil</span>(i, status)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Graph::hasCycleUtil</span><span class="hljs-params">(<span class="hljs-type">int</span> v, vector&lt;<span class="hljs-type">int</span>&gt;&amp; status)</span> </span>&#123;<br>    status[v] = <span class="hljs-number">1</span>; <span class="hljs-comment">// 设置当前顶点为正在访问</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> neighbor : adj[v]) &#123;<br>        <span class="hljs-keyword">if</span> (status[neighbor] == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 如果邻接顶点正在访问，则存在环</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (status[neighbor] == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">hasCycleUtil</span>(neighbor, status)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    status[v] = <span class="hljs-number">2</span>; <span class="hljs-comment">// 设置当前顶点为已访问</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="图的拓扑排序算法"><a href="#图的拓扑排序算法" class="headerlink" title="图的拓扑排序算法"></a>图的拓扑排序算法</h2><p><strong>拓扑排序（Topological Sorting）是针对有向无环图（DAG，Directed Acyclic Graph）的一种线性排序方法。</strong></p><p><strong>在拓扑排序中，对于图中的所有顶点u和v，如果存在一条从u到v的有向边，那么在排序结果中u应该位于v的前面。</strong></p><p>需要注意的是，拓扑排序只能应用于DAG。如果图中存在环，则无法进行拓扑排序。</p><p>拓扑排序的典型应用场景包括任务调度、课程安排等。</p><p><img src="/images/posts/graph/Untitled%202.png" alt="Untitled"></p><blockquote><p>💫小星说丨拓扑排序即将一个图拉平成为一个链表，这一链表中所有关系的方向都向右，也就是所有的节点都在它所依赖的节点的后边。</p></blockquote><p>拓扑排序的主要算法包括两种：</p><ol><li>基于DFS的拓扑排序</li><li>基于BFS的拓扑排序（Kahn算法）</li></ol><h3 id="基于DFS的拓扑排序"><a href="#基于DFS的拓扑排序" class="headerlink" title="基于DFS的拓扑排序"></a>基于DFS的拓扑排序</h3><p>在深度优先搜索（DFS）过程中，我们使用后序的方式向结果数组中添加元素，那么这一后序结果的反转数组即为拓扑排序结果。</p><p>在后序过程中，我们保证了所有后续的节点都被放置在了前序节点的前面，那么它的反转即为所有前序的节点，在后序节点的后面。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Graph::topologicalSort</span><span class="hljs-params">()</span> </span>&#123;<br>    stack&lt;<span class="hljs-type">int</span>&gt; Stack;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">visited</span><span class="hljs-params">(V, <span class="hljs-literal">false</span>)</span></span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; V; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!visited[i]) &#123;<br>            <span class="hljs-built_in">topologicalSortUtil</span>(i, visited, Stack);<br>        &#125;<br>    &#125;<br><br><span class="hljs-comment">// 使用栈来反转</span><br>    <span class="hljs-keyword">while</span> (!Stack.<span class="hljs-built_in">empty</span>()) &#123;<br>        cout &lt;&lt; Stack.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        Stack.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Graph::topologicalSortUtil</span><span class="hljs-params">(<span class="hljs-type">int</span> v, vector&lt;<span class="hljs-type">bool</span>&gt; &amp;visited, stack&lt;<span class="hljs-type">int</span>&gt; &amp;Stack)</span> </span>&#123;<br>    visited[v] = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> neighbor : adj[v]) &#123;<br>        <span class="hljs-keyword">if</span> (!visited[neighbor]) &#123;<br>            <span class="hljs-built_in">topologicalSortUtil</span>(neighbor, visited, Stack);<br>        &#125;<br>    &#125;<br><span class="hljs-comment">// 后序位置添加节点</span><br>    Stack.<span class="hljs-built_in">push</span>(v);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基于BFS的拓扑排序（Kahn算法）"><a href="#基于BFS的拓扑排序（Kahn算法）" class="headerlink" title="基于BFS的拓扑排序（Kahn算法）"></a>基于BFS的拓扑排序（Kahn算法）</h3><p>这一做法是在BFS的基础上增加入度的衡量，只让入度为0的节点加入队列被访问，因此保证了所有有前序节点的节点不会被访问。</p><ol><li>计算图中所有节点的入度。</li><li>将所有入度为0的节点添加到队列中。</li><li>从队列中取出节点，然后输出该节点，接着遍历该节点的所有邻居，减去它们的入度值。如果某个邻居节点的入度变为0，则将其加入队列。</li></ol><p>这里的关键在于如何计算各个节点的入度，我们可以使用Map来储存</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">vector&lt;<span class="hljs-type">char</span>&gt; <span class="hljs-title">bfs_topological_sort</span><span class="hljs-params">(<span class="hljs-type">const</span> unordered_map&lt;<span class="hljs-type">char</span>, vector&lt;<span class="hljs-type">char</span>&gt;&gt;&amp; graph)</span> </span>&#123;<br>    unordered_map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; indegree; <span class="hljs-comment">// 保存每个节点的入度</span><br><br>    <span class="hljs-comment">// 初始化入度表</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; entry : graph) &#123;<br>        <span class="hljs-type">char</span> node = entry.first;<br>        <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">char</span>&gt;&amp; neighbors = entry.second;<br>        <span class="hljs-keyword">if</span> (indegree.<span class="hljs-built_in">find</span>(node) == indegree.<span class="hljs-built_in">end</span>()) &#123;<br>            indegree[node] = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> neighbor : neighbors) &#123;<br>            ++indegree[neighbor];<br>        &#125;<br>    &#125;<br><br>    queue&lt;<span class="hljs-type">char</span>&gt; q; <span class="hljs-comment">// 用于存储入度为0的节点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; entry : indegree) &#123;<br>        <span class="hljs-keyword">if</span> (entry.second == <span class="hljs-number">0</span>) &#123;<br>            q.<span class="hljs-built_in">push</span>(entry.first);<br>        &#125;<br>    &#125;<br><br>    vector&lt;<span class="hljs-type">char</span>&gt; result; <span class="hljs-comment">// 存储拓扑排序结果</span><br><br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">char</span> current_node = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        result.<span class="hljs-built_in">push_back</span>(current_node);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> neighbor : graph.<span class="hljs-built_in">at</span>(current_node)) &#123;<br>            --indegree[neighbor];<br>            <span class="hljs-keyword">if</span> (indegree[neighbor] == <span class="hljs-number">0</span>) &#123;<br>                q.<span class="hljs-built_in">push</span>(neighbor);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="图的最短路径算法"><a href="#图的最短路径算法" class="headerlink" title="图的最短路径算法"></a>图的最短路径算法</h2><p>图的最短路径问题是在图中找到两个节点之间的最短距离（以边的权重为度量标准）。常用的有Dijkstra算法、Bellman-Ford算法、Floyd-wallshall算法等。</p><h3 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h3><p>Dijkstra算法是由荷兰计算机科学家艾兹赫尔·戴克斯特拉（Edsger W. Dijkstra）于1956年发明的。它是一种广泛应用的最短路径算法，用于求解单源最短路径问题。<strong>适用于带权重的有向无环图 (DAG) 或无向图，要求所有边的权重都是非负数。</strong></p><p>算法的思路如下：</p><ol><li>初始化距离表 <code>distance</code>，将源节点的距离设为0，其余节点的距离设为正无穷。</li><li>创建一个未访问节点集合 <code>unvisited</code>，包含图中的所有节点。</li><li>当 <code>unvisited</code> 非空时，执行以下操作： <ol><li>选择当前 <code>unvisited</code> 中距离最短的节点 <code>current_node</code>。 </li><li>遍历 <code>current_node</code> 的邻居节点，计算从源节点通过 <code>current_node</code> 到邻居节点的距离。如果这个新距离小于之前记录的距离，则更新对应邻居节点在 <code>distance</code> 表中的距离。</li><li>将 <code>current_node</code> 从 <code>unvisited</code> 集合中移除。</li></ol></li></ol><p>算法结束后，<code>distance</code> 表中将包含源节点到所有其他节点的最短距离。此外，我们还可以维护一个“前驱节点”表来记录最短路径中的具体节点。</p><blockquote><p>💫小星说丨这一算法的核心在于，选定一个中间节点来计算源节点和其他节点的距离，计算其他节点经过不同中间节点距离的最小值，本质上是一种贪心算法</p></blockquote><p>在这里可以使用优先队列来维护unvisited集合，以保证每次取出距离最短的节点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 自定义比较器，用于构建最小堆</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Compare</span> &#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">const</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">char</span>&gt;&amp; a, <span class="hljs-type">const</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">char</span>&gt;&amp; b)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a.first &gt; b.first;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function">unordered_map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-type">const</span> unordered_map&lt;<span class="hljs-type">char</span>, vector&lt;pair&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt;&gt;&gt;&amp; graph, <span class="hljs-type">char</span> start_node)</span> </span>&#123;<br>    unordered_map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; distance; <span class="hljs-comment">// 存储源节点到其他所有节点的最短距离</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; entry : graph) &#123;<br>        distance[entry.first] = INT_MAX;<br>    &#125;<br>    distance[start_node] = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 优先级队列</span><br>    priority_queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">char</span>&gt;, vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">char</span>&gt;&gt;, Compare&gt; pq;<br>    pq.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>, start_node&#125;);<br><br>    <span class="hljs-keyword">while</span> (!pq.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">char</span> current_node = pq.<span class="hljs-built_in">top</span>().second;<br>        <span class="hljs-type">int</span> current_distance = pq.<span class="hljs-built_in">top</span>().first;<br>        pq.<span class="hljs-built_in">pop</span>();<br><br><span class="hljs-comment">// 若存在比当前更短的路径，放弃该条路线</span><br>        <span class="hljs-keyword">if</span> (current_distance &gt; distance[current_node]) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; neighbor_info : graph.<span class="hljs-built_in">at</span>(current_node)) &#123;<br>            <span class="hljs-type">char</span> neighbor = neighbor_info.first;<br>            <span class="hljs-type">int</span> edge_weight = neighbor_info.second;<br><br><span class="hljs-comment">// 更新其他节点的权重距离</span><br>            <span class="hljs-type">int</span> new_distance = current_distance + edge_weight;<br>            <span class="hljs-keyword">if</span> (new_distance &lt; distance[neighbor]) &#123;<br>                distance[neighbor] = new_distance;<br>                pq.<span class="hljs-built_in">push</span>(&#123;new_distance, neighbor&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> distance;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Floyd-Warshall算法"><a href="#Floyd-Warshall算法" class="headerlink" title="Floyd-Warshall算法"></a>Floyd-Warshall算法</h3><p>Floyd-Warshall算法（简称Floyd算法）是一种求解所有节点对之间最短路径的经典动态规划方法。它可以处理带权重的有向图或无向图，并且可以处理负权边，但不能正确地处理包含负权环的图。</p><p>Floyd算法的基本思想是通过逐步添加“中间节点”来优化任意两点之间的最短路径。初始化时，距离矩阵中元素的值为直接连接两节点的边的权重。然后，在每次迭代中，我们尝试使用一个新的中间节点 k 来找到任意两个节点 i 和 j 的更短路径。如果通过节点 k 连接 i 和 j 可以得到更短的路径，那么更新距离矩阵的相应元素。</p><p>以下是Floyd算法的步骤：</p><ol><li>初始化距离矩阵<code>dist</code>，其中对角线元素设为 0，其他元素设为直接相连的边的权重（若两节点间没有直接连接，则设为正无穷大）。</li><li>对于每个节点 k（作为中间节点），执行以下操作： a. 遍历所有节点对 (i, j)，计算从 i 到 j 经过 k 的距离：<code>dist[i][k] + dist[k][j]</code>。 b. 如果经过 k 的距离小于当前记录的距离，那么更新 <code>dist[i][j]</code>。</li></ol><p>算法结束后，<code>dist</code> 矩阵中的元素将表示所有节点对之间的最短路径长度。</p><blockquote><p>小星说丨这个方法更简单，和dijistra算法的不同之处在于，他在原始权重的基础上进行比较，其他部分也是通过中间节点来完成距离的计算。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">floyd_warshall</span>(<span class="hljs-type">const</span> vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; graph) &#123;<br>    <span class="hljs-type">int</span> n = graph.<span class="hljs-built_in">size</span>();<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; dist = graph;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; n; ++k) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (dist[i][k] != INT_MAX &amp;&amp; dist[k][j] != INT_MAX &amp;&amp;<br>                    dist[i][k] + dist[k][j] &lt; dist[i][j]) &#123;<br>                    dist[i][j] = dist[i][k] + dist[k][j];<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> dist;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="并查集算法"><a href="#并查集算法" class="headerlink" title="并查集算法"></a>并查集算法</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">class</span> UnionFind &#123;<br>    <span class="hljs-keyword">private</span>:<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; parent;<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; rank;<br>        <span class="hljs-keyword">int</span> <span class="hljs-keyword">count</span>;<br>    <span class="hljs-keyword">public</span>:<br>        UnionFind(<span class="hljs-keyword">int</span> <span class="hljs-keyword">size</span>)&#123;<br>            parent = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>(<span class="hljs-keyword">size</span>);<br>            rank = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>(<span class="hljs-keyword">size</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt; <span class="hljs-keyword">size</span>;i++)&#123;<br>                parent[i] = i;<br>            &#125;<br>            <span class="hljs-keyword">this</span>-&gt;<span class="hljs-keyword">count</span> = <span class="hljs-keyword">size</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> <span class="hljs-keyword">Find</span>(<span class="hljs-keyword">int</span> x)&#123;<br>            <span class="hljs-keyword">if</span> (parent[x] != x)&#123;<br>                parent[x] = <span class="hljs-keyword">find</span>(parent[x]);<br>            &#125;<br>            <span class="hljs-keyword">return</span> parent[x];<br>        &#125;<br><br>        <span class="hljs-keyword">void</span> Union(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)&#123;<br>            <span class="hljs-keyword">int</span> root_x = <span class="hljs-keyword">Find</span>(x);<br>            <span class="hljs-keyword">int</span> root_y = <span class="hljs-keyword">Find</span>(y);<br><br>            <span class="hljs-keyword">if</span> (root_x = root_y) <span class="hljs-keyword">return</span>;<br><br>            <span class="hljs-keyword">if</span> (rank[root_x] &gt; rank[root_y]) &#123;<br>                parent[root_y] = root_x;<br>                rank[root_x] += rank[root_y];<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                parent[root_x] = root_y;<br>                rank[root_y] += rank[root_x];<br>            &#125;<br>            <span class="hljs-keyword">count</span> --;<br>        &#125;<br><br>        bool Connected(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">Find</span>(x) == <span class="hljs-keyword">Find</span>(y);<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> <span class="hljs-keyword">count</span>()&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">count</span>;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>并查集（Disjoint Set，也称为 Union-Find）是一种用于处理不相交集合（Disjoint Sets）合并及查询问题的数据结构。它主要应用在解决连通性问题，例如判断图中两个节点是否属于同一连通分量。</p><p>以下的图中包含两个连通分量，每个连通分量都有一个代表元素。</p><p><img src="/images/posts/graph/Untitled%203.png" alt="Untitled"></p><p>并查集支持以下操作：</p><ol><li><strong>Find</strong>：查询元素所属的集合，即找到该元素的代表元素。</li><li><strong>Union</strong>：合并两个集合，可以将两个元素所属的集合连接起来。</li></ol><p>譬如，以上两联通量合并：</p><p><img src="/images/posts/graph/Untitled%204.png" alt="Untitled"></p><p>并查集的核心思想是使用一个数组（或向量）<code>parent</code>来存储每个元素的父节点信息。每个集合都有一个代表元素，该元素的 <code>parent</code> 值指向其本身。一般将树的根节点视为代表元素。并查集通过这种层级结构来表示各个集合之间的关系。</p><p>为了提高效率，实现并查集时通常会采用以下两种优化方法：</p><ol><li><strong>路径压缩</strong>：在执行 Find 操作时，沿途访问的所有节点直接指向根节点（代表元素），从而减少后续查询的时间。</li><li><strong>按秩合并</strong>：在执行 Union 操作时，将秩（树的深度或节点数量）较小的树连接到秩较大的树上，从而减小合并后树的高度，提高查询效率。</li></ol><p>并查集具有较好的时间复杂度，其每次操作的均摊复杂度接近 O(α(n))，其中 α(n) 是阿克曼函数的反函数。由于 α(n) 的增长速度非常慢，可以认为它是一个几乎恒定的值。因此，在实践中，使用并查集进行合并和查询操作的效率非常高</p><p>使用C++实现并查集算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UnionFind</span> &#123;<br>    <span class="hljs-keyword">private</span>:<br>        vector&lt;<span class="hljs-type">int</span>&gt; parent;<br>        vector&lt;<span class="hljs-type">int</span>&gt; rank;<br>        <span class="hljs-type">int</span> count;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">UnionFind</span>(<span class="hljs-type">int</span> size)&#123;<br>            prarent.<span class="hljs-built_in">resize</span>(size);<br>            rank.<span class="hljs-built_in">resize</span>(size);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt; size;i++)&#123;<br>                parent[i] = i;<br>            &#125;<br>            <span class="hljs-keyword">this</span>-&gt;count = size;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>            <span class="hljs-keyword">if</span> (parent[x] != x)&#123;<br>                parent[x] = <span class="hljs-built_in">Find</span>(parent[x]);<br>            &#125;<br>            <span class="hljs-keyword">return</span> parent[x];<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Union</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span>&#123;<br>            <span class="hljs-type">int</span> root_x = <span class="hljs-built_in">Find</span>(x);<br>            <span class="hljs-type">int</span> root_y = <span class="hljs-built_in">Find</span>(y);<br><br>            <span class="hljs-keyword">if</span> (root_x = root_y) <span class="hljs-keyword">return</span>;<br><br>            <span class="hljs-keyword">if</span> (rank[root_x] &gt; rank[root_y]) &#123;<br>                parent[root_y] = root_x;<br>                rank[root_x] += rank[root_y];<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                parent[root_x] = root_y;<br>                rank[root_y] += rank[root_x];<br>            &#125;<br>            count --;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Connected</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span>&#123;<br>            <span class="hljs-keyword">return</span> parent[x] == parent[y];<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Count</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-keyword">return</span> count;<br>        &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="二分图判定算法"><a href="#二分图判定算法" class="headerlink" title="二分图判定算法"></a>二分图判定算法</h2><p>二分图（Bipartite Graph）是一种特殊类型的图，其顶点可以分为两个不相交的集合，使得每条边的两个端点分别属于这两个集合。换句话说，在二分图中，所有边的一个端点位于集合A，而另一个端点位于集合B。对于二分图，我们可以将其中一个集合的顶点涂成红色，另一个集合的顶点涂成蓝色，满足图中任意相邻顶点具有不同的颜色。</p><p><strong>二分图判定算法</strong>用于检查给定图是否为二分图。常见的二分图判定方法有以下两种：</p><ol><li><strong>深度优先搜索（DFS）</strong>：从任意顶点开始，使用深度优先搜索遍历图，并在遍历过程中为顶点着色。如果在遍历过程中发现已着色的相邻顶点具有相同颜色，则该图不是二分图。否则，遍历完成后，该图是二分图。</li><li><strong>广度优先搜索（BFS）</strong>：从任意顶点开始，使用广度优先搜索遍历图，并在遍历过程中为顶点着色。类似于 DFS 方法，我们通过检查已着色顶点的相邻顶点是否具有相同的颜色来判断二分性。如果存在相同颜色的相邻顶点，则该图不是二分图。否则，遍历完成后，该图是二分图。</li></ol><p>在实际应用中，可以根据图结构以及问题需求来选择合适的二分图判定方法。通常情况下，两种方法的时间复杂度都为 O(|V|+|E|)，其中 |V| 是图中节点的数量，|E| 是图中边的数量。</p><h3 id="DFS实现"><a href="#DFS实现" class="headerlink" title="DFS实现"></a>DFS实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; graph, <span class="hljs-type">int</span> node, vector&lt;<span class="hljs-type">int</span>&gt;&amp; colors, <span class="hljs-type">int</span> color)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (colors[node] != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> colors[node] == color; <span class="hljs-comment">// 已着色，检查颜色是否相同</span><br>    &#125;<br>    colors[node] = color;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> neighbor : graph[node]) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">dfs</span>(graph, neighbor, colors, -color)) &#123; <span class="hljs-comment">// 对相邻顶点着相反颜色</span><br><span class="hljs-comment">// 若颜色与已着色不同，返回false</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_bipartite</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; graph)</span> </span>&#123;<br>    <span class="hljs-type">int</span> n = graph.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">colors</span><span class="hljs-params">(n, <span class="hljs-number">0</span>)</span></span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (colors[i] == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 未着色节点</span><br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">dfs</span>(graph, i, colors, <span class="hljs-number">1</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="BFS实现"><a href="#BFS实现" class="headerlink" title="BFS实现"></a>BFS实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; graph, <span class="hljs-type">int</span> node, vector&lt;<span class="hljs-type">int</span>&gt;&amp; colors)</span> </span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(node);<br>    colors[node] = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> current_node = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> neighbor : graph[current_node]) &#123;<br>            <span class="hljs-keyword">if</span> (colors[neighbor] == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 未着色节点</span><br>                colors[neighbor] = -colors[current_node]; <span class="hljs-comment">// 对相邻顶点着相反颜色</span><br>                q.<span class="hljs-built_in">push</span>(neighbor);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (colors[neighbor] == colors[current_node]) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 相邻顶点颜色相同，不是二分图</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_bipartite</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; graph)</span> </span>&#123;<br>    <span class="hljs-type">int</span> n = graph.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">colors</span><span class="hljs-params">(n, <span class="hljs-number">0</span>)</span></span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (colors[i] == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 未着色节点</span><br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">bfs</span>(graph, i, colors)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="最小生成树算法"><a href="#最小生成树算法" class="headerlink" title="最小生成树算法"></a>最小生成树算法</h2><p>生成树，即含有图中所有顶点的无环连通子图。</p><p>最小生成树（Minimum Spanning Tree，MST）是一种用于<strong>解决加权连通无向图</strong>的问题。<strong>它可以找到连接图中所有节点的边的子集，使得这些边的权重之和最小，并且子集构成一个无环连通子图。</strong>如下图所示。</p><p><img src="/images/posts/graph/Untitled%205.png" alt="Untitled"></p><p>在实际应用中，最小生成树可解决诸如网络设计、交通运输、供水管道等领域的问题。最小生成树的性质如下：</p><ol><li>最小生成树包含图中的所有节点。</li><li>最小生成树不包含任何环路。</li><li>最小生成树的边数为节点数减1，即 |E| &#x3D; |V| - 1。</li></ol><p>求解最小生成树的两个主要算法分别是 Kruskal 算法和 Prim 算法：</p><ol><li><strong>Kruskal 算法</strong>：此算法适用于稀疏图。它首先对所有边按权重进行排序，然后遍历排序后的边，若当前边的两个端点属于不同的连通分量，则添加该边到最小生成树。Kruskal 算法需要使用并查集数据结构来维护节点的连通性。</li><li><strong>Prim 算法</strong>：此算法适用于稠密图。它从任意节点开始，逐步扩展已选节点集合，每次选择连接当前集合和未选节点集的权重最小的边。通过迭代此过程，直到所有节点都包含在最小生成树中。Prim 算法需要使用优先队列等数据结构来找到具有最小权重的边。</li></ol><h3 id="Kruskal算法实现"><a href="#Kruskal算法实现" class="headerlink" title="Kruskal算法实现"></a>Kruskal算法实现</h3><p>Kruskal算法是基于并查集的贪心算法，可以用C++实现如下，包括以下几个步骤：</p><ol><li>将所有边放入edges数组中并按权重排序</li><li>从edges中取出边，若该边的两个顶点属于不同的连通分量，那么则将该边放入结果中，并在并查集中连接这两个边。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;tuple&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">kruskal</span>(<span class="hljs-type">const</span> vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; graph) &#123;<br>    <span class="hljs-type">int</span> n = graph.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-function">DisjointSet <span class="hljs-title">ds</span><span class="hljs-params">(n)</span></span>;<br><br>    <span class="hljs-comment">// 将边放入一个数组中并按权重排序</span><br>    vector&lt;tuple&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; edges;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (graph[i][j] != INT_MAX) &#123;<br>                edges.<span class="hljs-built_in">push_back</span>(&#123;i, j, graph[i][j]&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br>    std::<span class="hljs-built_in">sort</span>(edges.<span class="hljs-built_in">begin</span>(), edges.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; a, <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; b) &#123; <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">get</span>&lt;<span class="hljs-number">2</span>&gt;(a) &lt; std::<span class="hljs-built_in">get</span>&lt;<span class="hljs-number">2</span>&gt;(b); &#125;);<br><br>    vector&lt;tuple&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; mst;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;[u, v, w] : edges) &#123;<br>        <span class="hljs-keyword">if</span> (ds.<span class="hljs-built_in">find</span>(u) != ds.<span class="hljs-built_in">find</span>(v)) &#123;<br>            mst.<span class="hljs-built_in">push_back</span>(&#123;u, v, w&#125;);<br>            ds.<span class="hljs-built_in">union_sets</span>(u, v);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> mst;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Prim算法实现"><a href="#Prim算法实现" class="headerlink" title="Prim算法实现"></a>Prim算法实现</h3><p>与kruskal以边为单位不同，prim算法是以点为单位添加边，主要有以下几步：</p><ol><li>min_edge储存对某个节点而言的最小边，parent储存某个节点的代表节点</li><li>对队列出口元素u，遍历所有的节点v,若u→v小于v当前的最小边，则将v的代表节点设为u，最小边设为u→v，并将该权重和v加入优先队列。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">prim</span>(<span class="hljs-type">const</span> vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; graph) &#123;<br>    <span class="hljs-type">int</span> n = graph.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">visited</span><span class="hljs-params">(n, <span class="hljs-literal">false</span>)</span></span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">min_edge</span><span class="hljs-params">(n, INT_MAX)</span></span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">parent</span><span class="hljs-params">(n, <span class="hljs-number">-1</span>)</span></span>;<br>    min_edge[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">using</span> Edge = std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;; <span class="hljs-comment">// &#123;weight, vertex&#125;</span><br>    std::priority_queue&lt;Edge, vector&lt;Edge&gt;, std::greater&lt;&gt;&gt; pq;<br>    pq.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;);<br><br>    <span class="hljs-keyword">while</span> (!pq.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> u = pq.<span class="hljs-built_in">top</span>().second;<br>        pq.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">if</span> (visited[u]) <span class="hljs-keyword">continue</span>;<br>        visited[u] = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v = <span class="hljs-number">0</span>; v &lt; n; ++v) &#123;<br>            <span class="hljs-keyword">if</span> (graph[u][v] != INT_MAX &amp;&amp; !visited[v] &amp;&amp; graph[u][v] &lt; min_edge[v]) &#123;<br>                parent[v] = u;<br>                min_edge[v] = graph[u][v];<br>                pq.<span class="hljs-built_in">push</span>(&#123;min_edge[v], v&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    vector&lt;std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; mst;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>        mst.<span class="hljs-built_in">push_back</span>(&#123;i, parent[i]&#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> mst;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>DSA</tag>
      
      <tag>图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小星学DSA丨从二叉树到树</title>
    <link href="/2023/05/07/10-09-00/"/>
    <url>/2023/05/07/10-09-00/</url>
    
    <content type="html"><![CDATA[<p>这是小星学DSA系列的第四篇，我会记录我学习的过程与理解，希望能够帮到你。</p><p>本篇文章的思维导图如下，在文章的末尾，我会给出更加详细的思维导图。</p><p><img src="/images/posts/tree/Untitled.png"></p><p>在前面的三篇文章中，我们学习了基本的二叉树、二叉搜索树、二叉平衡树与红黑树，在这篇文章中，我们将从二叉树进化到树，学习更多的高级数据结构。</p><p>话不多说，直接开始</p><h1 id="树的概念"><a href="#树的概念" class="headerlink" title="树的概念"></a>树的概念</h1><blockquote><p><strong>树是一种非线性分层的数据结构，由通过边连接的节点组成。</strong></p></blockquote><h2 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h2><p>树中需要明确以下概念的定义</p><ul><li>节点：包含值以及指向子节点的指针的实体。<ul><li>根节点：树最顶端的节点</li><li>叶子节点：每条路径的最后一个节点</li><li>内部节点：至少有一个子节点的节点</li></ul></li><li>边：两个节点之间的链接</li><li>节点的高度与深度<ul><li>高度：从该节点到叶子节点的最长路径</li><li>深度：从根节点到该节点的路径长度</li></ul></li><li>树的高度：根节点的高度</li><li>节点的度：连接节点的边条数</li><li>森林：一些相互无连接的树</li></ul><h2 id="树的应用"><a href="#树的应用" class="headerlink" title="树的应用"></a>树的应用</h2><p>虽然我们前面介绍了四种二叉树，但是对于它们的应用却只言未提。</p><p>这里我们综合将树的各种应用场景都整理了出来。</p><table><thead><tr><th>应用类别</th><th>应用场景</th><th>常用树的种类</th></tr></thead><tbody><tr><td>算法与数据结构</td><td>堆、优先队列的实现</td><td>二叉树</td></tr><tr><td>算法与数据结构</td><td>C++STL map, set实现</td><td>红黑树</td></tr><tr><td>算法与数据结构</td><td>表达式求值、最小生成树、最短路径等</td><td></td></tr><tr><td>操作系统、网络与数据库</td><td>文件系统</td><td>B树，B+树</td></tr><tr><td>操作系统、网络与数据库</td><td>数据库索引</td><td>B树，B+树</td></tr><tr><td>操作系统、网络与数据库</td><td>网络路由</td><td>前缀树</td></tr><tr><td>操作系统、网络与数据库</td><td>进程线程调度</td><td>红黑树</td></tr><tr><td>图形学与人工智能</td><td>场景图网格数据结构、决策树等</td><td></td></tr></tbody></table><p>当然列出的只是树应用的冰山一角，作为一个基础的数据结构，树在计算机的各项应用中都发挥着独特的左右，需要我们在使用时去发掘与思考。</p><h1 id="B树与B-树"><a href="#B树与B-树" class="headerlink" title="B树与B+树"></a>B树与B+树</h1><p>当字典足够小时，AVL树和红-黑树都能保证良好的时间性能，但对于存储在磁盘上的大型字典我们需要ji节点存储的数据更多，度数更高（子节点数更多）的搜索树来改善性能，B树和B+树就是这样的搜索树。</p><h2 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h2><h3 id="B树的定义与性质"><a href="#B树的定义与性质" class="headerlink" title="B树的定义与性质"></a>B树的定义与性质</h3><p>B-Tree 是一种自平衡的多路搜索树</p><blockquote><p>💫小星说丨B树和之前的二叉搜索树的区别主要在：1. 一个节点可以有多个孩子；2. 一个节点可以有多个键</p></blockquote><p>B树的性质比较多，也较为抽象，我们直接上图理解</p><p><img src="/images/posts/tree/Untitled%201.png"></p><ol><li><strong>B树是有序的，其节点键值按递增顺序存储</strong></li></ol><blockquote><p>我们可以从图上看，虽然一个节点有许多个键值，但是对单个键值来说，其子节点的排列还是按左小右大的顺序，比如图中10是20的左节点，30和33是20的右节点、40的左节点。</p></blockquote><ol><li><strong>根节点最少有2个孩子与至少1个值</strong></li></ol><blockquote><p>这个意味着一个单独的节点不能成为一颗B树</p></blockquote><ol><li><strong>若B树的阶数为n，则每个内部节点最多可以储存n-1个键值，最少有n&#x2F;2(向上取整）-1个键值</strong></li></ol><blockquote><p>比如图上的B树，阶数为3阶，节点中最多能存2个键值</p></blockquote><ol><li><strong>若B树的阶数为n，除根结点外，则每个节点最多可有n个孩子，至少有n&#x2F;2（向上取整）个孩子</strong></li></ol><blockquote><p>图上的B树，最多能有3个孩子，最少有2个孩子</p></blockquote><ol><li><strong>性质3与性质4的结合：所有内部节点的键值比孩子数少1</strong></li><li><strong>所有叶子节点的深度相同</strong></li></ol><blockquote><p>也就是说所有叶子节点都在同一层，这一能够保持树的平衡性，使操作复杂度在O(logn)</p></blockquote><p>因此，这里作为一个B树的节点应当有以下几个属性：</p><ul><li>键值数组</li><li>孩子数组</li><li>是否为叶子节点</li></ul><p>而B树本身应当由以下几个属性：</p><ul><li>根节点</li><li>阶数</li></ul><h3 id="B树的搜索"><a href="#B树的搜索" class="headerlink" title="B树的搜索"></a>B树的搜索</h3><p>B树作为搜索树，它的搜索过程与二叉搜索树非常相似，可以用下图来理解</p><p>它的搜索过程可以归纳为：</p><ol><li>逐个与被搜索节点的键值数组比较，直到达到末尾或找到比它大的键值，此时在键值数组里的索引为i；</li><li>递归，搜索第i个子节点，直到搜索到该值或达到叶子节点但搜索不到该值时返回</li></ol><p><img src="/images/posts/tree/Untitled%202.png"></p><p><img src="/images/posts/tree/Untitled%203.png"></p><p><img src="/images/posts/tree/Untitled%204.png"></p><h3 id="B树的插入"><a href="#B树的插入" class="headerlink" title="B树的插入"></a>B树的插入</h3><p>B树的插入相较于之前的二叉树更为复杂，首先简要叙述一下B树插入的步骤：</p><ol><li><strong>使用B树的查找算法，查找到相应的插入位置，这个位置应当是一个叶子节点</strong></li><li><strong>如果该节点未满，直接插入</strong></li><li><strong>如果插入的节点已经满了，则先将键值插入，然后对该节点进行分裂</strong><ol><li><strong>将该节点的key值排序</strong></li><li><strong>将中间的key上移到父结点中，并以此为界限分裂出两个子节点</strong></li><li><strong>继续对父节点进行判断，是否要分裂</strong></li></ol></li></ol><p>其中最关键的步骤就是分裂这一步，我们用一句话来理解：中间节点上移，两头分裂</p><p>来看以下的图，理解插入过程</p><p><img src="/images/posts/tree/Untitled%205.png"></p><p><img src="/images/posts/tree/Untitled%206.png"></p><p>这里插入后该节点key值数超过了限定的2，所以需要分裂</p><p><img src="/images/posts/tree/Untitled%207.png"></p><p>这里我们仍需要对父节点再次分裂</p><p><img src="/images/posts/tree/Untitled%208.png"></p><p>依然需要分裂</p><p><img src="/images/posts/tree/Untitled%209.png"></p><p>这时分裂完成，我们又得到了一颗满足要求的B树</p><h3 id="B树的删除"><a href="#B树的删除" class="headerlink" title="B树的删除"></a>B树的删除</h3><p>B树的删除同样是在二叉树的删除的基础上建立的，它的删除相对插入更为复杂，但和我们之前讲过的所有树一样，都是第一步：找到替换节点，第二步：进行修复维护B树性质，具体步骤如下：</p><ol><li>如果要删除的键在叶子节点中<ul><li>该叶子节点中包含的键数大于等于最小度数t<ul><li>直接将该键从叶子节点中删除即可</li></ul></li><li>该叶子节点中包含的键数小于最小度数t<ul><li>删除该key</li><li>对该节点进行删除修正</li></ul></li></ul></li><li>如果要删除的键在内部节点中：<ul><li>找到后继节点（即右子树中最小的键）。</li><li>将该键替换为要删除的键，并递归删除后继节点。</li></ul></li><li>删除修正：<ul><li>如果该节点有相邻的兄弟节点，且兄弟节点中包含的键数大于等于最小度数t：<ul><li>该兄弟节点上移一个键到父节点中，父节点相应下放一个键到原节点位置</li></ul></li><li>如果该叶子节点有相邻的兄弟节点，但它们都包含的键数小于最小度数t：<ul><li>父节点下放一个键给原节点之后，原节点和兄弟节点合并</li><li>该节点的子节点合并为一个节点，并成为兄弟节点的子节点</li><li>递归修正父节点</li></ul></li><li>若根节点为空，直接返回其子节点作为根节点（这时候肯定只有一个子节点）</li></ul></li></ol><p>接下来对删除修正的方式进行说明</p><ul><li>Case I: 该节点有相邻的键数富余的兄弟节点→父节点先从兄弟处拿一个，再给一个给该节点<ul><li>兄弟节点将离原节点最近的键给父亲（这里是28）</li><li>父亲根据原节点位置下放对应的键（下放排序第二的Key）</li><li>因为这里父亲借一还一，键数量没变，不需要继续递归</li></ul></li></ul><p><img src="/images/posts/tree/Untitled%2010.png"></p><ul><li>Case II: 该节点没有相邻的键数富余的兄弟节点→父节点下放一个键和兄弟节点合并，对父亲节点进行递归修正:<ul><li>父亲节点下放离某个节点最近的节点与之合并（这里是28和25，也可以是33和35）</li><li>对[33]进行递归修正（此时无需修正）</li><li>因为被修正的节点没有子节点，所以无需进行子节点合并的步骤</li></ul></li></ul><p><img src="/images/posts/tree/Untitled%2011.png"></p><h2 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h2><h3 id="B-树的定义与性质"><a href="#B-树的定义与性质" class="headerlink" title="B+树的定义与性质"></a>B+树的定义与性质</h3><p>B+树是B树的扩展，因此它也是一种自平衡的多路搜索树，同样包括以下性质：</p><ol><li>有序，节点键值按递增顺序排列</li><li>根节点至少有两个孩子和至少一个值</li><li>内部节点至少有ceil(n&#x2F;2) -1个键值, ceil(n&#x2F;2)个子节点；至多n-1个键值,n个子节点</li><li>内部节点有n个键值，则有n+1个子节点</li><li>所有叶子节点的深度相同</li></ol><p>此外，b+树还存在一些扩展的性质：</p><ol><li><strong>b+树的内部节点不保存数据，只作为索引，其叶子节点保存数据（降低树的高度，提高查询效率，且使查询性能更稳定）</strong></li><li><strong>B+树的叶子节点之间通过指针连接，形成一个链表结构（更方便进行范围查询和有序遍历）</strong></li><li>b+树的关键字可以在叶子节点和内部节点中均出现，其中内部节点左子树&lt;键值，<strong>右子树≥键值（等于则向右寻找）</strong></li></ol><p><img src="/images/posts/tree/Untitled%2012.png"></p><h3 id="B-树的搜索"><a href="#B-树的搜索" class="headerlink" title="B+树的搜索"></a>B+树的搜索</h3><p>B+树的搜索与B树搜索的不同之处在于，所有的查询最后都在叶子节点处结束</p><p>譬如，搜索45</p><ol><li>和根节点比较，向右</li></ol><p><img src="/images/posts/tree/Untitled%2013.png"></p><ol><li>逐个和关键字比较，≥45，因此向右</li></ol><p><img src="/images/posts/tree/Untitled%2014.png"></p><ol><li>到达叶子节点层，找到45对应的键</li></ol><p><img src="/images/posts/tree/Untitled%2015.png"></p><h3 id="B-树的插入"><a href="#B-树的插入" class="headerlink" title="B+树的插入"></a>B+树的插入</h3><p>B+树的插入和B树的插入类似：</p><ol><li>使用B+树的查找算法，查找到相应的插入位置，这个位置应当是一个叶子节点</li><li>如果该节点未满，直接插入</li><li>如果插入的节点已经满了，则先将键值插入，然后对该节点进行分裂<ol><li>将该节点的key值排序</li><li><strong>将中间的key上移到父结点中，并以此为界限分裂出两个子节点（此时叶子节点中仍需要保留上移的值）</strong></li><li>若为叶子节点，<strong>建立两个子节点之间的指针</strong></li><li><strong>继续对父节点进行判断，是否要分裂</strong></li></ol></li></ol><p><img src="/images/posts/tree/Untitled%2016.png"></p><p>譬如上图，插入45：</p><ol><li>将35移到父节点，25&#x2F;35&amp;45分裂，并建立从25到35&amp;45的指针</li><li>此时父节点超出限制，于是将25上移，15和35分裂成两个节点</li></ol><blockquote><p>B+树的插入与B树插入的区别，主要在于叶子节点部分，需要保留原来的键，且建立子节点之间的指针，其余部分则相同。</p></blockquote><h3 id="B-树的删除"><a href="#B-树的删除" class="headerlink" title="B+树的删除"></a>B+树的删除</h3><p>B+树的删除首先也要找到关键字对应的叶子节点</p><ol><li>被删除的节点只出现在叶子节点，而不出现在内部节点<ol><li>节点的键数大于最小键数，直接删除</li><li>节点的键数小于等于最小键数，检查兄弟节点是否有多余的键<ol><li>若有，则从兄弟节点处借一个键，同时更新父节点中相对应的键（应为后继节点）</li><li>若无，则将当前叶子节点和兄弟节点合并，从父结点中删除分割它们的键值</li><li>递归修正使用B树的删除修正方法修正父节点，直至根节点，若根节点键数减少至0且只有一个子节点，则将该子节点作为B+树的新的根节点</li></ol></li></ol></li></ol><p><img src="/images/posts/tree/Untitled%2017.png"></p><ol><li>被删除的键值同时出现在叶子节点和内部节点<ol><li>使用1中方式，删除叶子节点中的键值</li><li>将对应的内部节点的键值，替换为离之最近的后继节点或前序节点</li></ol><p> <img src="/images/posts/tree/Untitled%2018.png"></p><h2 id="❗B-树比B树好在哪里"><a href="#❗B-树比B树好在哪里" class="headerlink" title="❗B+树比B树好在哪里"></a>❗B+树比B树好在哪里</h2><ol><li><strong>搜索速度稳定</strong>：由于B+树的数据项仅出现在叶子节点，因此每次查找都需要遍历从根节点到叶子节点的路径。这使得B+树的查找性能更加稳定，不会出现最好和最坏情况下性能差异较大的问题。</li><li><strong>磁盘读写性能更优</strong>：B+树的叶子节点包含了所有数据项，通常采用链表结构将它们连接起来。<strong>这使得范围查询和顺序访问更高效，可以减少磁盘I&#x2F;O操作次数</strong>。同时，由于B+树内部节点不存储数据项，<strong>每个节点可以容纳更多关键字，从而降低整棵树的高度，减少磁盘寻道次数。</strong></li><li><strong>插入删除效率高</strong>，B+树中可以存储冗余节点，所以插入删除时较少发生复杂的树的变形。</li></ol></li></ol><h1 id="2-Trie树"><a href="#2-Trie树" class="headerlink" title="2 Trie树"></a>2 Trie树</h1><h2 id="Trie树的定义与性质"><a href="#Trie树的定义与性质" class="headerlink" title="Trie树的定义与性质"></a>Trie树的定义与性质</h2><p>Trie 树（又称为前缀树或字典树）是一种用于存储动态字符串集合的高效数据结构。它通过将字符串拆分成单个字符，然后将这些字符组织成一个类似于树结构的有序数据结构，从而实现快速查找、插入和删除操作。</p><p><img src="/images/posts/tree/Untitled%2019.png"></p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ol><li>节点本身不存储值，根节点不包含字符，其余每个节点表示一个字符。</li><li>从根节点到一个节点的路径表示一个字符串。</li><li>每个节点的所有子节点包含的字符互不相同。</li></ol><p><strong>优点：</strong></p><ul><li>高效的查询、插入操作（O(m), m是待插入、查询的字符串的长度）</li><li>能够方便地查询某个字符串的前缀。</li><li>可以用于实现自动补全功能。</li></ul><p><strong>缺点：</strong></p><ul><li>空间复杂度较高，因为每个节点可能需要存储所有字符的指针。</li><li>实现过程可能比其他数据结构更复杂。</li></ul><h2 id="Trie树的插入与查找"><a href="#Trie树的插入与查找" class="headerlink" title="Trie树的插入与查找"></a>Trie树的插入与查找</h2><p>从理解上来说，Trie树的插入和查找都非常简单，在每层依次查询，依次插入便可</p><p>我们使用C++实现Trie树</p><h3 id="Trie树节点"><a href="#Trie树节点" class="headerlink" title="Trie树节点"></a>Trie树节点</h3><p>TrieNode 包含一个字符 (<code>ch</code>)，一个布尔值 (<code>is_end_of_word</code>)，用于表示该节点是否为一个完整的单词的结尾，以及一个哈希表 (<code>children</code>)，用于存储子节点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TrieNode</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">char</span> ch;<br>    <span class="hljs-type">bool</span> is_end_of_word;<br>    std::unordered_map&lt;<span class="hljs-type">char</span>, TrieNode*&gt; children;<br><br>    <span class="hljs-built_in">TrieNode</span>(<span class="hljs-type">char</span> c) : <span class="hljs-built_in">ch</span>(c), <span class="hljs-built_in">is_end_of_word</span>(<span class="hljs-literal">false</span>) &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="查找函数"><a href="#查找函数" class="headerlink" title="查找函数"></a>查找函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; word)</span> </span>&#123;<br>        TrieNode* current_node = root;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : word) &#123;<br>            <span class="hljs-keyword">if</span> (current_node-&gt;children.<span class="hljs-built_in">find</span>(c) == current_node-&gt;children.<span class="hljs-built_in">end</span>()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 字符不在 Trie 树中</span><br>            &#125;<br>            current_node = current_node-&gt;children[c];<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> current_node-&gt;is_end_of_word; <span class="hljs-comment">// 如果到达单词结尾，返回 true</span><br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="插入函数"><a href="#插入函数" class="headerlink" title="插入函数"></a>插入函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; word)</span> </span>&#123;<br>        TrieNode* current_node = root;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : word) &#123;<br>            <span class="hljs-keyword">if</span> (current_node-&gt;children.<span class="hljs-built_in">find</span>(c) == current_node-&gt;children.<span class="hljs-built_in">end</span>()) &#123;<br>                current_node-&gt;children[c] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TrieNode</span>(c);<br>            &#125;<br>            current_node = current_node-&gt;children[c];<br>        &#125;<br><br>        current_node-&gt;is_end_of_word = <span class="hljs-literal">true</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="Trie树的应用"><a href="#Trie树的应用" class="headerlink" title="Trie树的应用"></a>Trie树的应用</h2><ol><li><strong>字符串匹配</strong>：Trie 树可以在字符串集合中高效地查找指定字符串，同时还能找出具有相同前缀的字符串。因此，它适用于文本搜索、模式匹配等场景。</li><li><strong>自动补全</strong>：Trie 树可以快速地查找具有给定前缀的所有字符串，这使得它成为实现搜索引擎或文本编辑器中的自动补全功能的理想选择。</li><li><strong>词频统计</strong>：Trie 树可以在插入字符串的过程中记录每个字符串出现的次数，从而实现高效的词频统计。</li><li><strong>拼写检查</strong>：通过比较输入字符串与 Trie 树中存储的正确拼写的单词，我们可以找出拼写错误并给出建议。</li><li><strong>IP 路由查找</strong>：在计算机网络中，Trie 树可用于实现 IP 路由表的查找。通过将 IP 地址转换成二进制字符串，我们可以使用 Trie 树来查找最长前缀匹配以确定对应的路由。</li><li><strong>词典查找</strong>：Trie 树可用于实现电子词典，通过将单词按照字母顺序存储，可以快速查找和浏览单词。</li><li><strong>字符串排序</strong>：Trie 树可以对字符串进行字典序排序。通过中序遍历 Trie 树，我们可以得到一个按字典序排列的字符串列表。</li></ol><h2 id="Trie树的扩展"><a href="#Trie树的扩展" class="headerlink" title="Trie树的扩展"></a>Trie树的扩展</h2><h3 id="后缀树（suffix-tree"><a href="#后缀树（suffix-tree" class="headerlink" title="后缀树（suffix tree)"></a>后缀树（suffix tree)</h3><p>对Trie树进行压缩（没有分支的路径进行压缩），获得字符串所有的后缀，即组成后缀树</p><h3 id="AC自动机"><a href="#AC自动机" class="headerlink" title="AC自动机"></a>AC自动机</h3><p>AC 自动机是 以 Trie 的结构为基础，结合 KMP 的思想 建立的自动机，用于解决多模式匹配等任务。</p><h1 id="3-其他树的扩展"><a href="#3-其他树的扩展" class="headerlink" title="3 其他树的扩展"></a>3 其他树的扩展</h1><p>除了基础的一些树之外，还有很多高级的树结构，了解即可，毕竟咱也不打竞赛</p><ul><li>伸展树<ul><li>伸展树（Splay Tree）是一种自平衡二叉搜索树（BST）</li><li>伸展树在访问、插入或删除节点时总是保持最后访问过的节点位于根节点。</li><li>伸展树通过局部调整树结构来实现自我平衡，以优化通常对数据集访问的时间复杂度。</li><li>最坏情况下的时间复杂度为 O(n)，但在实际应用中，伸展树能提供接近于 O(log n) 的平摊时间复杂度。</li><li>伸展树可以用作缓存，因为频繁访问的元素总是位于树的顶部，从而实现较快的查找。</li></ul></li><li>huffman树<ul><li>霍夫曼树（Huffman Tree），又称最优二叉树，是一种特殊的带权路径长度最短的二叉树。</li><li>是一种完全二叉树，每个节点要么具有两个子节点，要么没有子节点。</li><li>树中每个叶子节点代表一个字符或符号，权值通常是该字符在待编码数据中出现的频率。</li><li>不同字符对应的叶子节点具有不同的权值，权值越大的字符距离根节点越近。</li><li>霍夫曼树的构建过程是贪心算法的典型应用。</li></ul></li><li>2-3-4树<ul><li>2-3-4树是一种自平衡多路搜索树，它的每个节点可以存储1个、2个或3个键（key）及相应的值（value）。根据键的数量，每个节点可以有2个、3个或4个子节点。2-3-4树的性质保证了在进行插入和删除操作时，树始终保持平衡。</li><li>下面是2-3-4树的一些特性：</li><li>节点结构：<ul><li>2-节点：包含1个键和2个子节点。</li><li>3-节点：包含2个键和3个子节点。</li><li>4-节点：包含3个键和4个子节点。</li></ul></li><li>性质：<ul><li>所有叶子节点具有相同的深度。</li><li>每个内部节点的子树高度相同。</li><li>对于给定的键，左子节点的所有键小于当前节点的键，右子节点的所有键大于当前节点的键。</li><li>任何时刻都没有空闲子节点。</li></ul></li><li>插入操作：<ul><li>当插入一个新的键时，首先按照二叉查找树规则找到合适的位置。</li><li>如果目标节点不是4-节点，则直接插入该节点并排序即可。</li><li>如果目标节点是4-节点，需要执行分裂操作。将4-节点分裂为两个2-节点，中间的键上升到父节点。如果父节点也是4-节点，递归执行分裂操作。</li></ul></li><li>删除操作：<ul><li>如果要删除的键在叶子节点上，直接删除即可。</li><li>如果要删除的键在内部节点上，需要将其与后继键交换位置，使其成为叶子节点，然后进行删除。</li><li>检查并修复可能破坏平衡的情况。</li></ul></li><li>复杂度：2-3-4树的查找、插入和删除操作的时间复杂度为O(log n)。</li></ul></li><li>线段树<ul><li>线段树（Segment Tree）是一种用于处理数组或区间上的范围查询和更新操作的高效数据结构。它是一棵二叉树，每个节点表示一个输入数组或区间的连续部分。线段树常用于解决诸如求区间最大值、最小值、总和等问题。</li><li>结构：线段树是一种完全二叉树，通常以数组形式存储。对于数组中的每个元素，线段树使用一个节点来表示其所在的区间；所有叶子节点表示单个元素的区间，而非叶子节点表示由其左右子节点覆盖的区间。</li><li>构建：线段树的构建过程是递归的。从根节点开始，逐层将区间分成两个子区间，并将其分别分配给左右子节点。当区间长度为1时，创建叶子节点并返回。构建过程的时间复杂度为 O(n)。</li><li>查询：线段树支持范围查询操作，例如查询某个区间内的最大值、最小值或总和。查询过程从根节点开始，根据目标区间与当前节点区间的关系来判断向左子节点、右子节点还是两者都查找。查询操作的时间复杂度为 O(log n)。</li><li>更新：线段树支持对输入数组元素的更新操作，例如修改某个索引处的值。更新过程从根节点开始，递归找到目标叶子节点并修改其值，然后沿着路径回溯到根节点，更新所有经过的非叶子节点的信息。更新操作的时间复杂度为 O(log n)。</li></ul></li><li>K-D树<ul><li>KD树（k-dimension tree是一种用于处理多维空间数据的二叉搜索树。它在计算机科学和应用数学中具有广泛的应用，常常应用于如最近邻查找、范围查询等问题。KD树的主要目的是将数据集分割成较小的子集，以便更高效地进行搜索。</li><li><strong>构建过程</strong>：<ul><li>选择一个轴</li><li>根据轴上的中值将数据集分割为两个子集，左子集中的点在所选轴上的坐标小于或等于中值，右子集中的点在所选轴上的坐标大于中值。</li><li>递归地重复步骤1、2，直到形成二叉树</li></ul></li><li><strong>优势</strong>：<ul><li>对于多维数据的查询，KD树相对于线性搜索更高效</li><li>可以有效地解决 k-最近邻 和范围查询等问题</li></ul></li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>DSA</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小星学DSA丨一文学完二叉树（进阶篇）</title>
    <link href="/2023/04/17/19-09-00/"/>
    <url>/2023/04/17/19-09-00/</url>
    
    <content type="html"><![CDATA[<h1 id="小星学DSA丨一文学完二叉树-进阶篇"><a href="#小星学DSA丨一文学完二叉树-进阶篇" class="headerlink" title="小星学DSA丨一文学完二叉树-进阶篇"></a>小星学DSA丨一文学完二叉树-进阶篇</h1><p>Tags: 数据结构</p><p>这是小星学DSA系列的第三篇，我会记录我学习的过程与理解，希望能够帮到你。</p><p>本篇文章的思维导图如下，在文章的末尾，我会给出更加详细的思维导图。</p><p><img src="/images/posts/BST/Untitled.png"></p><p>上篇文章中我们介绍了二叉树的基础知识，这篇我们来介绍常用的二叉树进阶篇。</p><h1 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h1><h2 id="二叉搜索树的定义"><a href="#二叉搜索树的定义" class="headerlink" title="二叉搜索树的定义"></a>二叉搜索树的定义</h2><p>虽然我们已经在前面两篇文章中都涉及到了二叉搜索树，这里还是再次给二叉搜索树正式的定义。</p><blockquote><p><strong>所有节点的值唯一，且左子树的值都小于该节点的值，右子树的值都大于该节点的值。</strong></p></blockquote><h2 id="二叉搜索树的操作"><a href="#二叉搜索树的操作" class="headerlink" title="二叉搜索树的操作"></a>二叉搜索树的操作</h2><p>在<a href="http://rainystar.site/2023/04/07/10-00-00/">小星学DSA丨一文学完红黑树篇</a>中，我们其实已经介绍过二叉搜索树的操作，这里我们将这些操作再次介绍一遍。</p><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>二叉搜索树是有序的，因此二叉搜索树的查找不需要遍历整个树，只需要根据需要查找的值与当前节点的值比较即可，可以大大降低查找的时间复杂度。</p><p><img src="/images/posts/BST/Untitled%201.png"></p><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>二叉搜索树的插入不同于二叉树的插入，一个节点插入的位置是固定的。</p><p>我们用搜索的方式去遍历二叉搜索树，找到小于插入值的最大叶子节点，或大于插入值的最小叶子节点，这个节点的下方就是我们要插入的位置。</p><p><img src="/images/posts/BST/Untitled%202.png"></p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>二叉搜索树的删除首先仍是通过查找的方式，找到需要删除的节点。</p><p>由于在删除后仍需要保持二叉搜索树的性质，因此对于非叶子节点，需要找到合适的值替代，具体替代方式我在<a href="http://rainystar.site/2023/04/07/10-00-00/#%E7%BA%A2%E9%BB%91%E6%A0%91%E7%9A%84%E5%88%A0%E9%99%A4">红黑树的删除</a>也讲过一次。</p><p>主要分为以下三种情况</p><p><img src="/images/posts/BST/Untitled%203.png"></p><p><img src="/images/posts/BST/Untitled%204.png"></p><p><img src="/images/posts/BST/Untitled%205.png"></p><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><table><thead><tr><th></th><th>平衡情况（接近完全二叉树）</th><th>非平衡情况（退化成单链表）</th></tr></thead><tbody><tr><td>搜索</td><td>O(logn)</td><td>O(n)</td></tr><tr><td>插入</td><td>O(logn)</td><td>O(n)</td></tr><tr><td>删除</td><td>O(logn)</td><td>O(n)</td></tr></tbody></table><h1 id="二叉平衡树"><a href="#二叉平衡树" class="headerlink" title="二叉平衡树"></a>二叉平衡树</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>二叉平衡树是左子树和右子树高度差至多为1的二叉搜索树。</p><h3 id="平衡因子"><a href="#平衡因子" class="headerlink" title="平衡因子"></a>平衡因子</h3><p>为了更好的描述二叉平衡树，我们引入了平衡因子的概念，它的计算公式为</p><p>$$<br>平衡因子&#x3D;左子树高度-右子树高度<br>$$</p><p>有了平衡因子之后，我们就能重新定义二叉平衡树，即平衡因子为-1,0或1的二叉搜索树。</p><h2 id="二叉平衡树的操作"><a href="#二叉平衡树的操作" class="headerlink" title="二叉平衡树的操作"></a>二叉平衡树的操作</h2><h3 id="左旋与右旋"><a href="#左旋与右旋" class="headerlink" title="左旋与右旋"></a>左旋与右旋</h3><p>在二叉平衡树中，为了维持平衡，我们也需要左旋与右旋这一操作。</p><blockquote><p>💫小星说丨还记得我们在红黑树一节说的，左旋即：被左旋的节点成为左节点；右旋：被右旋的节点成为右节点</p></blockquote><p>左旋与右旋都分两步：1. 把准父节点中，多余的子节点接到原父节点上 2. 准父节点与原父节点的父子关系调整，如下图所示</p><p><img src="/images/posts/BST/Untitled%206.png"></p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>由于二叉平衡树也是二叉搜索树，因此二叉平衡树的搜索与二叉搜索树的搜索完全相同</p><h3 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a>插入</h3><p>二叉平衡树，由于需要维持平衡，因此其插入过程分两步：</p><ol><li>按照二叉搜索树的方式插入</li><li>平衡修正</li></ol><p>当我们向二叉平衡树中插入节点后，若导致不平衡，则这一不平衡肯定最早出现在插入节点的祖父节点上，因此我们要对插入节点、父节点与祖父节点的关系进行平衡修正。</p><p>主要有以下几种情况：</p><ol><li><p>祖父节点平衡因子&gt;1，则插入节点和插入节点的父节点必然出现在祖父节点的左边，此时</p><ol><li>若插入节点&gt;父节点，父子方向不一致，则需要先将插入节点的父节点左旋使二者朝向一致，此时来到情况b</li><li>若插入节点与父节点方向一致，直接右旋祖父节点即可</li></ol><p> <img src="/images/posts/BST/Untitled%207.png"> </p></li><li><p>祖父节点平衡因子&lt; -1，则说明右边的链路更长，此时的处理与上面对称</p><ol><li>若插入节点&lt;父节点，父子方向不一致，则需要先将插入节点的父节点右旋</li><li>若父子方向一致，直接左旋插入节点的祖父节点</li></ol><p> <img src="/images/posts/BST/Untitled%208.png"></p><blockquote><p>💫小星说丨插入只影响到了父节点和祖父节点，因此只需要根据这三个节点的形状进行适当的左右旋，使之变为“<strong>^”</strong>这样的形状就好了</p></blockquote></li></ol><h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><p>二叉平衡树的删除同样分为两步：</p><ol><li>按照二叉搜索树的方式删除</li><li>平衡修正</li></ol><p>二叉树平衡树中最终删除的必定是叶子节点的位置，因此这一不平衡肯定最早出现在被删除节点的父结点处，因此我们要对这一节点进行平衡修正。</p><ol><li><p>该节点平衡因子&gt;1，则左链路更长，考虑左链路</p><ol><li>该节点左子节点的平衡因子&lt;0，即对左子节点而言，其右链路更长，因此我们需要先对左子节点进行左旋，以补偿左子节点 的左链路，来到情况b</li><li>该节点左子节点的平衡因子≥0, 则我们对该节点进行右旋，以补偿该节点的右链路</li></ol><p> <img src="/images/posts/BST/Untitled%209.png"> </p></li><li><p>该节点平衡因子&lt; -1，则右链路更长</p><ol><li>该节点右子节点平衡因子&gt;0，对右子节点来说，其左链路更长，因此需要先补偿右子节点的左链路</li><li>该节点右子节点平衡因子≤0，直接左旋补偿左链路</li></ol><p> <img src="/images/posts/BST/Untitled%2010.png"></p></li></ol><p><strong>其实到这里我们发现，删除的修正与插入的修正都是一样的，即对平衡因子绝对值大于1的节点通过左旋或右旋补偿较短的那条链路，如果子节点需要补偿的方向与该节点一致则可直接补偿，否则，需要先补偿子节点，再补偿该节点。</strong></p><h3 id="性能分析-1"><a href="#性能分析-1" class="headerlink" title="性能分析"></a>性能分析</h3><p>二叉平衡树由于能够保证树左右高度差不超过1，因此其操作的时间复杂度能够保持在最优</p><table><thead><tr><th></th><th>平衡情况（接近完全二叉树）</th></tr></thead><tbody><tr><td>搜索</td><td>O(logn)</td></tr><tr><td>插入</td><td>O(logn)</td></tr><tr><td>删除</td><td>O(logn)</td></tr></tbody></table><h1 id="手撕二叉进阶树"><a href="#手撕二叉进阶树" class="headerlink" title="手撕二叉进阶树"></a>手撕二叉进阶树</h1><h2 id="手撕二叉搜索树"><a href="#手撕二叉搜索树" class="headerlink" title="手撕二叉搜索树"></a>手撕二叉搜索树</h2><h3 id="节点定义"><a href="#节点定义" class="headerlink" title="节点定义"></a>节点定义</h3><p>二叉搜索树的节点定义与二叉树相同，不需要额外的值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    <span class="hljs-type">int</span> data;<br>    Node *left;<br>    Node *right;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="搜索-1"><a href="#搜索-1" class="headerlink" title="搜索"></a>搜索</h3><p>用递归的方式实现搜索</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">NodePtr <span class="hljs-title">searchTreeHelper</span><span class="hljs-params">(NodePtr node, <span class="hljs-type">int</span> key)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">nullptr</span> || key == node-&gt;data)<br>        &#123;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (key &lt; node-&gt;data)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">searchTreeHelper</span>(node-&gt;left, key);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">searchTreeHelper</span>(node-&gt;right, key);<br>    &#125;<br><span class="hljs-function">NodePtr <span class="hljs-title">searchTree</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">searchTreeHelper</span>(<span class="hljs-keyword">this</span>-&gt;root, k);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="插入-2"><a href="#插入-2" class="headerlink" title="插入"></a>插入</h3><p>同样用递归的方式插入, 找到插入点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">NodePtr <span class="hljs-title">insertNode</span><span class="hljs-params">(NodePtr node, <span class="hljs-type">int</span> data)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">nullptr</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">newNode</span>(data);<br><br>        <span class="hljs-keyword">if</span> (data &lt; node-&gt;data)<br>        &#123;<br>            node-&gt;left = <span class="hljs-built_in">insertNode</span>(node-&gt;left, data);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            node-&gt;right = <span class="hljs-built_in">insertNode</span>(node-&gt;right, data);<br>        &#125;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h3><p>我们也可以使用递归的方式实现删除，如下</p><p>其中，后继节点为右子树的最小节点，由findMin函数实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deleteNode</span><span class="hljs-params">(NodePtr &amp;root, <span class="hljs-type">int</span> value)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!root)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (value &lt; root-&gt;data)<br>        &#123;<br>            <span class="hljs-built_in">deleteNode</span>(root-&gt;left, value);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &gt; root-&gt;data)<br>        &#123;<br>            <span class="hljs-built_in">deleteNode</span>(root-&gt;right, value);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-comment">// 情况1&amp;情况2的一部分：为叶子节点或只有右节点</span><br>            <span class="hljs-keyword">if</span> (!root-&gt;left)<br>            &#123;<br>                NodePtr temp = root-&gt;right;<br>                <span class="hljs-keyword">delete</span> root;<br>                root = temp;<br>            &#125;<br>            <span class="hljs-comment">// 只有左节点</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!root-&gt;right)<br>            &#123;<br>                NodePtr temp = root-&gt;left;<br>                <span class="hljs-keyword">delete</span> root;<br>                root = temp;<br>            &#125;<br>            <span class="hljs-comment">// 作于节点都没有，使用后继节点代替，并在右子树中删除后继节点</span><br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                NodePtr temp = <span class="hljs-built_in">findMin</span>(root-&gt;right);<br>                root-&gt;data = temp-&gt;data;<br>                <span class="hljs-built_in">deleteNode</span>(root-&gt;right, temp-&gt;data);<br>            &#125;<br>        &#125;<br>    &#125;<br><br><span class="hljs-function">NodePtr <span class="hljs-title">findMin</span><span class="hljs-params">(NodePtr node)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (node-&gt;left) &#123;<br>        node = node-&gt;left;<br>    &#125;<br>    <span class="hljs-keyword">return</span> node;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="手撕二叉平衡树"><a href="#手撕二叉平衡树" class="headerlink" title="手撕二叉平衡树"></a>手撕二叉平衡树</h2><h3 id="节点定义-1"><a href="#节点定义-1" class="headerlink" title="节点定义"></a>节点定义</h3><p>由于我们需要计算节点的平衡因子，因此在定义节点时，需要额外定义节点的高度，以方便平衡因子的计算。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    <span class="hljs-type">int</span> data;<br>    Node *left;<br>    Node *right;<br>    <span class="hljs-type">int</span> height;<br>&#125;;<br></code></pre></td></tr></table></figure><p>相应的，我们需要实现高度的计算与更新、平衡因子的计算等函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getHeight</span><span class="hljs-params">(NodePtr node)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!node)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> node-&gt;height;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getBalanceFactor</span><span class="hljs-params">(NodePtr node)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!node)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">getHeight</span>(node-&gt;left) - <span class="hljs-built_in">getHeight</span>(node-&gt;right);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">updateHeight</span><span class="hljs-params">(NodePtr node)</span></span><br><span class="hljs-function">    </span>&#123;<br>        node-&gt;height = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">getHeight</span>(node-&gt;left), <span class="hljs-built_in">getHeight</span>(node-&gt;right)) + <span class="hljs-number">1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="左旋与右旋-1"><a href="#左旋与右旋-1" class="headerlink" title="左旋与右旋"></a>左旋与右旋</h3><p>二叉平衡树的左旋与右旋除了需要实现定义好的行为之外，还需要对节点高度进行重新计算：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">NodePtr <span class="hljs-title">leftRotate</span><span class="hljs-params">(NodePtr node)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// rotate</span><br>        NodePtr right = node-&gt;right;<br>        NodePtr rleft = right-&gt;left;<br><br>        right-&gt;left = node;<br>        node-&gt;right = rleft;<br><br>        <span class="hljs-comment">// update height</span><br>        <span class="hljs-comment">// only child-changed node need to update</span><br>        <span class="hljs-built_in">updateHeight</span>(node);<br><span class="hljs-built_in">updateHeight</span>(right);<br><br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br><br>    <span class="hljs-function">NodePtr <span class="hljs-title">rightRotate</span><span class="hljs-params">(NodePtr node)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// rotate</span><br>        NodePtr left = node-&gt;left;<br>        NodePtr lright = left-&gt;right;<br><br>        left-&gt;right = node;<br>        node-&gt;left = lright;<br><br>        <span class="hljs-comment">// update height</span><br>        <span class="hljs-comment">// only child-changed node need to update</span><br>        <span class="hljs-built_in">updateHeight</span>(node);<br><span class="hljs-built_in">updateHeight</span>(left);<br><br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="查找-1"><a href="#查找-1" class="headerlink" title="查找"></a>查找</h3><p>查找的实现与二叉搜索树相同</p><h3 id="插入-3"><a href="#插入-3" class="headerlink" title="插入"></a>插入</h3><p>我们使用递归的方式实现插入，在前序部分插入，后序部分处理平衡逻辑，这样就实现了自下至上的平衡。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">NodePtr <span class="hljs-title">insertHelper</span><span class="hljs-params">(NodePtr node, <span class="hljs-type">int</span> data)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 1. 二叉搜索树式插入</span><br>        <span class="hljs-comment">// 叶子节点插入位置</span><br>        <span class="hljs-keyword">if</span> (!node)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">createNewNode</span>(data);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (data &lt; node-&gt;data)<br>        &#123;<br>            node-&gt;left = <span class="hljs-built_in">insertHelper</span>(node-&gt;left, data);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data &gt; node-&gt;data)<br>        &#123;<br>            node-&gt;right = <span class="hljs-built_in">insertHelper</span>(node-&gt;right, data);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br><br>        <span class="hljs-comment">// 后序方式，更新当前节点平衡因子</span><br>        <span class="hljs-comment">// 实际上在插入节点的祖父节点处才会进入以下的计算</span><br>        <span class="hljs-built_in">updateHeight</span>(node);<br>        <span class="hljs-type">int</span> balanceFactor = <span class="hljs-built_in">getBalanceFactor</span>(node);<br><br>        <span class="hljs-comment">// 情況1a</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &gt; <span class="hljs-number">1</span> &amp;&amp; data &gt; node-&gt;left-&gt;data)<br>        &#123;<br>            node-&gt;left = <span class="hljs-built_in">leftRotate</span>(node-&gt;left);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">rightRotate</span>(node);<br>        &#125;<br>        <span class="hljs-comment">// 情況1b</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &gt; <span class="hljs-number">1</span> &amp;&amp; data &lt; node-&gt;left-&gt;data)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">rightRotate</span>(node);<br>        &#125;<br>        <span class="hljs-comment">// 情況2a</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &lt; <span class="hljs-number">-1</span> &amp;&amp; data &lt; node-&gt;right-&gt;data)<br>        &#123;<br>            node-&gt;right = <span class="hljs-built_in">rightRotate</span>(node-&gt;right);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">leftRotate</span>(node);<br>        &#125;<br>        <span class="hljs-comment">// 情況2b</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &lt; <span class="hljs-number">-1</span> &amp;&amp; data &gt; node-&gt;right-&gt;data)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">leftRotate</span>(node);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br><br><span class="hljs-function">NodePtr <span class="hljs-title">insertNode</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">insertHelper</span>(<span class="hljs-keyword">this</span>-&gt;root, data);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="删除-3"><a href="#删除-3" class="headerlink" title="删除"></a>删除</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">NodePtr <span class="hljs-title">deleteHelper</span><span class="hljs-params">(NodePtr node, <span class="hljs-type">int</span> data)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 1. 二叉搜索树方式删除节点</span><br>        <span class="hljs-keyword">if</span> (!node)<br>        &#123;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (data &lt; node-&gt;data)<br>        &#123;<br>            node-&gt;left = <span class="hljs-built_in">deleteHelper</span>(node-&gt;left, data);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data &gt; node-&gt;data)<br>        &#123;<br>            node-&gt;right = <span class="hljs-built_in">deleteHelper</span>(node-&gt;right, data);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (!root-&gt;left)<br>            &#123;<br>                NodePtr temp = root-&gt;right;<br>                <span class="hljs-keyword">delete</span> root;<br>                root = temp;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!root-&gt;right)<br>            &#123;<br>                NodePtr temp = root-&gt;left;<br>                <span class="hljs-keyword">delete</span> root;<br>                root = temp;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                NodePtr temp = <span class="hljs-built_in">findMin</span>(root-&gt;right);<br>                root-&gt;data = temp-&gt;data;<br>                <span class="hljs-built_in">deleteHelper</span>(root-&gt;right, temp-&gt;data);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 2.后序方式，更新当前节点平衡因子并进行平衡修正</span><br>        <span class="hljs-built_in">updateHeight</span>(node);<br>        <span class="hljs-type">int</span> balanceFactor = <span class="hljs-built_in">getBalanceFactor</span>(node);<br><br>        <span class="hljs-comment">// 情況1a</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &gt; <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-built_in">getBalanceFactor</span>(node-&gt;left) &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            node-&gt;left = <span class="hljs-built_in">leftRotate</span>(node-&gt;left);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">rightRotate</span>(node);<br>        &#125;<br>        <span class="hljs-comment">// 情況1b</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &gt; <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-built_in">getBalanceFactor</span>(node-&gt;left) &gt;= <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">rightRotate</span>(node);<br>        &#125;<br><br>        <span class="hljs-comment">// 情況2a</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &lt; <span class="hljs-number">-1</span> &amp;&amp; <span class="hljs-built_in">getBalanceFactor</span>(node-&gt;right) &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            node-&gt;right = <span class="hljs-built_in">rightRotate</span>(node-&gt;right);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">leftRotate</span>(node);<br>        &#125;<br>        <span class="hljs-comment">// 情況2b</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &lt; <span class="hljs-number">-1</span> &amp;&amp; <span class="hljs-built_in">getBalanceFactor</span>(node-&gt;right) &lt;= <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">leftRotate</span>(node);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">NodePtr  <span class="hljs-title">insertNode</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">insertHelper</span>(<span class="hljs-keyword">this</span>-&gt;root, data);<br>    &#125;<br><br>    <span class="hljs-function">NodePtr <span class="hljs-title">deleteNode</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">deleteHelper</span>(<span class="hljs-keyword">this</span>-&gt;root, data);<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最后我们再用一张思维导图总结这篇博客的内容</p><p><img src="/images/posts/BST/Untitled%2011.png"></p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p>本文代码已在github上开源，包含c++，python(待补充), golang(待补充)的红黑树代码</p><p><a href="https://github.com/Yuxin1999/star-code">https://github.com/Yuxin1999/star-code</a></p><h3 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h3><ol><li><a href="https://www.programiz.com/dsa/avl-tree">https://www.programiz.com/dsa/avl-tree</a> </li><li>萨尼 S, 王立柱, 刘志红 数据结构、算法与应用 C++语言描述[M]. 北京: 机械工业出版社, 2015.</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>DSA</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小星学DSA丨一文学完二叉树（基础篇）</title>
    <link href="/2023/04/10/15-09-00/"/>
    <url>/2023/04/10/15-09-00/</url>
    
    <content type="html"><![CDATA[<p>这是小星学DSA系列的第二篇，我会记录我学习的过程与理解，希望能够帮到你。</p><p>本篇文章的思维导图如下，在文章的末尾，我会给出更加详细的思维导图。</p><p><img src="/images/posts/bintree/Untitled.png"></p><p>上篇我们一上来就介绍了红黑树，原因是红黑树在sde岗位面试中的重要分量。</p><p>当然，基础也要打好，因此这篇文章，我们来学习一下二叉树的基础。</p><h1 id="二叉树的定义与性质"><a href="#二叉树的定义与性质" class="headerlink" title="二叉树的定义与性质"></a>二叉树的定义与性质</h1><h2 id="定义与表示"><a href="#定义与表示" class="headerlink" title="定义与表示"></a>定义与表示</h2><p>二叉树是一种特殊类型的通用树，它的每个节点最多可以有两个子节点，两个子节点是有序的，分为左子节点与右子节点。</p><h3 id="链式表示（常用）"><a href="#链式表示（常用）" class="headerlink" title="链式表示（常用）"></a>链式表示（常用）</h3><p>链式表示是通过指针把分布在散落在各个地址的节点串联一起。</p><p>二叉树通常由指向根节点的指针表示，二叉树的每个节点都包括以下三个部分：</p><ol><li>节点的值</li><li>指向左子节点的指针</li><li>指向右子节点的指针</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> data;<br>    node* left;<br>    node* right;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="顺序表示"><a href="#顺序表示" class="headerlink" title="顺序表示"></a>顺序表示</h3><p>顺序表示的元素在内存是连续分布的。</p><p><strong>如果父节点的数组下标是 i，那么它的左孩子就是 i * 2 + 1，右孩子就是 i * 2 + 2。</strong></p><h2 id="二叉树的基本概念"><a href="#二叉树的基本概念" class="headerlink" title="二叉树的基本概念"></a>二叉树的基本概念</h2><p>以下列出了二叉树中的一些基本概念</p><table><thead><tr><th>概念</th><th>释义</th></tr></thead><tbody><tr><td>根节点</td><td>二叉树的顶端节点，没有父节点</td></tr><tr><td>父节点&#x2F;子节点</td><td>有子节点的节点被称为父节点；连接在父节点下面的节点被称为子节点</td></tr><tr><td>叶子节点</td><td>没有子节点的节点被称为叶子节点</td></tr><tr><td>兄弟节点</td><td>具有相同父节点的节点之间互为兄弟节点</td></tr><tr><td>深度</td><td>从根节点到当前节点的路径长度被称为深度</td></tr><tr><td>高度</td><td>从当前节点到叶子节点的最长路径长度被称为高度</td></tr></tbody></table><h2 id="二叉树的分类"><a href="#二叉树的分类" class="headerlink" title="二叉树的分类"></a>二叉树的分类</h2><h3 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h3><p>若高度为h的二叉树恰好有$2^h -1$个元素，则称其为<strong>满二叉树</strong>（顾名思义，满了的二叉树）</p><p><img src="/images/posts/bintree/Untitled%201.png"></p><h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><p>如果所有叶子节点都位于相同的高度，则称为<strong>完全二叉树</strong>（只有最后一层没满的二叉树）</p><p><img src="/images/posts/bintree/Untitled%202.png"></p><h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><p>所有节点的值唯一，且左子树的值都小于该节点的值，右子树的值都大于该节点的值。</p><p><img src="/images/posts/bintree/Untitled%203.png"></p><h3 id="平衡二叉树（AVL树）"><a href="#平衡二叉树（AVL树）" class="headerlink" title="平衡二叉树（AVL树）"></a>平衡二叉树（AVL树）</h3><p>左子树和右子树高度差至多为1的二叉搜索树</p><p><img src="/images/posts/bintree/Untitled%204.png"></p><h2 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h2><ol><li>含n个元素的二叉树有n-1条边</li><li>若二叉树的高度为h，它最少有h个元素，最多有$2^h -1$个元素</li><li>若二叉树有n个元素，它的最大高度为n，最下高度为$log_2(n+1)$ </li><li>对于完全二叉树的一个元素i，其父节点为[i&#x2F;2]，左孩子为2i（或者不存在），右孩子为2i+1（或不存在）</li></ol><p>这些性质证明起来都不难，初中数学难度，这里不再赘述。</p><h1 id="二叉树的操作"><a href="#二叉树的操作" class="headerlink" title="二叉树的操作"></a>二叉树的操作</h1><h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><p>二叉树的遍历是老生常谈了，我在实习的面试里遇到过无数次（不过出这个一般也和放水差不多了）</p><p>二叉树的遍历有四种方式：前序、中序、后序、层序</p><blockquote><p>💫<strong>小星说</strong>丨前中后序的区分方法——父节点在什么时候被访问（前序：先访问父节点，再访问左子树和右子树；中序：先访问左子树，再访问父节点，再访问右子树；后序：先访问左子树，再访问右子树，最后访问父节点）</p></blockquote><h3 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h3><p>二叉树前序遍历的步骤如下：</p><ol><li>访问根节点</li><li>以前序遍历左子树</li><li>以前序遍历右子树</li></ol><p><img src="/images/posts/bintree/Untitled%205.png"></p><p>具体到代码实现，我们通常可以使用递归方法（常用）或者迭代方法实现。</p><ol><li>递归方法非常简单粗暴，除了一个非空判定之外，与上面的步骤是一样的</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preOrderTravesal</span><span class="hljs-params">(NodePtr node)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        cout &lt;&lt; node-&gt;data &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-built_in">preOrderTravesal</span>(node-&gt;left);<br>        <span class="hljs-built_in">preOrderTravesal</span>(node-&gt;right);<br>    &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>迭代法则需要用到栈，每次访问栈顶元素，并将它的右节点和左节点依次放入栈中，从而实现前序遍历的逻辑。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preOrderIteration</span><span class="hljs-params">(NodePtr node)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        stack&lt;NodePtr&gt; nodeStack;<br>        nodeStack.<span class="hljs-built_in">push</span>(node);<br><br>        <span class="hljs-keyword">while</span> (!nodeStack.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            NodePtr currnode = nodeStack.<span class="hljs-built_in">top</span>();<br>            nodeStack.<span class="hljs-built_in">pop</span>();<br><br>            cout &lt;&lt; currnode-&gt;data &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>            <span class="hljs-comment">// 先进后出，因此要先放右节点，再放子节点</span><br>            <span class="hljs-keyword">if</span> (currnode-&gt;right != <span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                nodeStack.<span class="hljs-built_in">push</span>(currnode-&gt;right);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (currnode-&gt;left != <span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                nodeStack.<span class="hljs-built_in">push</span>(currnode-&gt;left);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>知道了前序遍历，中序遍历的思路也就很清楚了</p><p>二叉树中序遍历的步骤：</p><ul><li>按顺序遍历左子树</li><li>访问根节点</li><li>按顺序遍历右子树</li></ul><p><img src="/images/posts/bintree/Untitled%206.png"></p><p>中序遍历同样可以使用递归法和迭代法实现</p><ol><li>递归法也没什么好说的，简单粗暴</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inorderRecursion</span><span class="hljs-params">(NodePtr node)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-built_in">inorderRecursion</span>(node-&gt;left);<br>        cout &lt;&lt; node-&gt;data &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-built_in">inorderRecursion</span>(node-&gt;right);<br>    &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>中序遍历的迭代法和前序遍历不同的是，<strong>这里的栈保存的是所有的根节点</strong>，一路向左一路保存根节点，<strong>当到达最左处时，可以从栈中取出一个根节点来访问，之后再遍历右子树</strong>，也是用同样的方法。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inorderIteration</span><span class="hljs-params">(NodePtr node)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        stack&lt;NodePtr&gt; nodeStack;<br>        NodePtr currNode = node;<br><br>        <span class="hljs-keyword">while</span> (currNode != <span class="hljs-literal">nullptr</span> || !nodeStack.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-comment">// Traverse left subtree</span><br>            <span class="hljs-keyword">while</span> (currNode != <span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                nodeStack.<span class="hljs-built_in">push</span>(currNode);<br>                currNode = currNode-&gt;left;<br>            &#125;<br><br>            <span class="hljs-comment">// Process current node</span><br>            currNode = nodeStack.<span class="hljs-built_in">top</span>();<br>            nodeStack.<span class="hljs-built_in">pop</span>();<br>            cout &lt;&lt; currNode-&gt;data &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br>            <span class="hljs-comment">// Traverse right subtree</span><br>            currNode = currNode-&gt;right;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>二叉树后序遍历的步骤如下：</p><ul><li>按后序遍历左子树</li><li>按后序遍历右子树</li><li>访问根节点</li></ul><p><img src="/images/posts/bintree/Untitled%207.png"></p><p>同样可以使用递归法和迭代法来实现</p><ol><li>递归法还是一样</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">postorderRecursion</span><span class="hljs-params">(NodePtr node)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-built_in">postorderRecursion</span>(node-&gt;left);<br>        <span class="hljs-built_in">postorderRecursion</span>(node-&gt;right);<br>        cout &lt;&lt; node-&gt;data &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>迭代法中，我们仍使用一个栈保存待遍历的根节点，而当我们从栈中拿出一个待访问的根节点时，有两种情况：1. 我们刚从左边上来，要遍历右子树2. 我们已经遍历了右子树，要访问当前根节点，因此需要一个指针保存上一次访问的节点，以确定右子树是否已被访问</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">postorderIteration</span><span class="hljs-params">(NodePtr node)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        stack&lt;NodePtr&gt; nodeStack;<br>        NodePtr currNode = node;<br>        NodePtr lastVisitedNode = <span class="hljs-literal">nullptr</span>;<br><br>        <span class="hljs-keyword">while</span> (currNode != <span class="hljs-literal">nullptr</span> || !nodeStack.<span class="hljs-built_in">empty</span>())&#123;<br>            <span class="hljs-comment">// 一路向左</span><br>            <span class="hljs-keyword">while</span> (currNode != <span class="hljs-literal">nullptr</span>)&#123;<br>                nodeStack.<span class="hljs-built_in">push</span>(currNode);<br>                currNode = currNode-&gt;left;<br>            &#125;<br><br>            NodePtr peekNode = nodeStack.<span class="hljs-built_in">top</span>();<br>            <span class="hljs-comment">// 判断栈顶节点的右节点是否被访问过</span><br>            <span class="hljs-keyword">if</span> (peekNode-&gt;right != <span class="hljs-literal">nullptr</span> &amp;&amp; peekNode-&gt;right != lastVisitedNode)&#123;<br>                <span class="hljs-comment">// 遍历右子树</span><br>                currNode = currNode-&gt;right;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">// 访问当前节点</span><br>                cout &lt;&lt; peekNode-&gt;data &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>                lastVisitedNode = nodeStack.<span class="hljs-built_in">top</span>();<br>                nodeStack.<span class="hljs-built_in">pop</span>();<br>            &#125;<br><br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>我们注意到后序遍历（左右中）其实可以由变种的前序遍历（中右左）反转得到，因此可以使用反转的方法, cr<a href="https://programmercarl.com/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%BF%AD%E4%BB%A3%E9%81%8D%E5%8E%86.html#%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86-%E8%BF%AD%E4%BB%A3%E6%B3%95">《代码随想录》</a></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">postorderTraversal</span><span class="hljs-params">(NodePtr node)</span></span><br><span class="hljs-function">    </span>&#123;<br>        stack&lt;NodePtr&gt; stack;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        stack.<span class="hljs-built_in">push</span>(node);<br>        vector&lt;<span class="hljs-type">int</span>&gt; result;<br>        <span class="hljs-keyword">while</span> (!stack.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            NodePtr currnode = stack.<span class="hljs-built_in">top</span>();<br>            stack.<span class="hljs-built_in">pop</span>();<br>            result.<span class="hljs-built_in">push_back</span>(node-&gt;data);<br>            <span class="hljs-keyword">if</span> (currnode-&gt;left)<br>            &#123;<br>                stack.<span class="hljs-built_in">push</span>(node-&gt;left);<br>            &#125; <span class="hljs-comment">// 相对于前序遍历，这更改一下入栈顺序</span><br>            <span class="hljs-keyword">if</span> (currnode-&gt;right)<br>            &#123;<br>                stack.<span class="hljs-built_in">push</span>(node-&gt;right);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">reverse</span>(result.<span class="hljs-built_in">begin</span>(), result.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">// 将结果反转之后就是左右中的顺序了</span><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h3><p>层序遍历理解上更简单了，就是一层一层的遍历。</p><p><img src="/images/posts/bintree/Untitled%208.png"></p><p>层序遍历同样可以使用迭代法和递归法，只不过这里迭代法可能更常用一些</p><ol><li>迭代法，使用一个队列存储待访问的节点，每次访问将左节点和右节点放入队列内，即可实现一层一层的遍历</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">levelOrderIteration</span><span class="hljs-params">(NodePtr node)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        queue&lt;NodePtr&gt; nodeQueue;<br>        nodeQueue.<span class="hljs-built_in">push</span>(node);<br><br>        <span class="hljs-keyword">while</span> (!nodeQueue.<span class="hljs-built_in">empty</span>()) &#123;<br>            NodePtr currNode = nodeQueue.<span class="hljs-built_in">front</span>();<br>            nodeQueue.<span class="hljs-built_in">pop</span>();<br>            cout &lt;&lt; currNode-&gt;data &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br>            <span class="hljs-keyword">if</span> (currNode-&gt;left != <span class="hljs-literal">nullptr</span>) &#123;<br>                nodeQueue.<span class="hljs-built_in">push</span>(currNode-&gt;left);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (currNode-&gt;right != <span class="hljs-literal">nullptr</span>) &#123;<br>                nodeQueue.<span class="hljs-built_in">push</span>(currNode-&gt;right);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>递归法：层序遍历的递归法，需要记录每层的高度，通过高度储存每一层的节点</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">levelOrderRecursion</span><span class="hljs-params">(NodePtr cur, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; &amp;result, <span class="hljs-type">int</span> depth)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (cur == <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (result.<span class="hljs-built_in">size</span>() == depth)<br>            result.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;());<br>        result[depth].<span class="hljs-built_in">push_back</span>(cur-&gt;data);<br>        <span class="hljs-built_in">levelOrderRecursion</span>(cur-&gt;left, result, depth + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">levelOrderRecursion</span>(cur-&gt;right, result, depth + <span class="hljs-number">1</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="二叉树的搜索"><a href="#二叉树的搜索" class="headerlink" title="二叉树的搜索"></a>二叉树的搜索</h2><p>二叉树的搜索，二叉树的最值，二叉树的高度，二叉树的元素数目等操作均建立在二叉树的遍历基础上，选一种合适的遍历方法即可实现，这里不再赘述。</p><h2 id="二叉树的重构"><a href="#二叉树的重构" class="headerlink" title="二叉树的重构"></a>二叉树的重构</h2><p>二叉树的重构，即从遍历的结果里重新构造一棵二叉树。</p><p>二叉树的重构需要两种遍历结果的综合，但是通常不能从前序和后序结果里重构二叉树，因为不能确定根节点的左子树和右子树信息。</p><h3 id="从前序与中序遍历结果中重构二叉树"><a href="#从前序与中序遍历结果中重构二叉树" class="headerlink" title="从前序与中序遍历结果中重构二叉树"></a>从前序与中序遍历结果中重构二叉树</h3><p>从前序与中序遍历结果中重构二叉树分为以下几步：</p><ol><li>从前序遍历结果中获得根节点值（前序遍历的第一个元素）</li><li>找到该值在中序遍历结果中的索引rootIdx</li><li>借助rootIdx，将前序结果和中序结果都切分成左子树的结果和右子树的结果</li><li>递归实现重构</li></ol><p><img src="/images/posts/bintree/Untitled%209.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">NodePtr <span class="hljs-title">buildTreeFromPreIn</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;preorder, vector&lt;<span class="hljs-type">int</span>&gt; &amp;inorder)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (preorder.<span class="hljs-built_in">empty</span>() || inorder.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 找到根节点在中序遍历中的索引</span><br>        <span class="hljs-type">int</span> rootVal = preorder[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> rootIdx = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (inorder[rootIdx] != rootVal)<br>        &#123;<br>            rootIdx++;<br>        &#125;<br>        NodePtr root = <span class="hljs-keyword">new</span> node;<br>        root-&gt;data = rootVal;<br><br>        <span class="hljs-comment">// 切割成左子树和右子树</span><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">leftInorder</span><span class="hljs-params">(inorder.begin(), inorder.begin() + rootIdx)</span></span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">rightInorder</span><span class="hljs-params">(inorder.begin() + rootIdx + <span class="hljs-number">1</span>, inorder.end())</span></span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">leftPreorder</span><span class="hljs-params">(preorder.begin() + <span class="hljs-number">1</span>, preorder.begin() + <span class="hljs-number">1</span> + rootIdx)</span></span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">rightPreorder</span><span class="hljs-params">(preorder.begin() + <span class="hljs-number">1</span> + rootIdx, preorder.end())</span></span>;<br><br>        root-&gt;left = <span class="hljs-built_in">buildTreeFromPreIn</span>(leftPreorder, leftInorder);<br>        root-&gt;right = <span class="hljs-built_in">buildTreeFromPreIn</span>(rightPreorder, rightInorder);<br><br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="从中序和后序结果中重构二叉树"><a href="#从中序和后序结果中重构二叉树" class="headerlink" title="从中序和后序结果中重构二叉树"></a>从中序和后序结果中重构二叉树</h3><p>中序和后序重构二叉树的方法类似:</p><ol><li>从后序遍历结果中获得根节点值（后序遍历的第一个元素）</li><li>找到该值在中序遍历结果中的索引rootIdx</li><li>借助rootIdx，将前序结果和中序结果都切分成左子树的结果和右子树的结果</li><li>递归实现重构</li></ol><p><img src="/images/posts/bintree/Untitled%2010.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">NodePtr <span class="hljs-title">buildTreeFromInPost</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;inorder, vector&lt;<span class="hljs-type">int</span>&gt; &amp;postorder)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (inorder.<span class="hljs-built_in">empty</span>() || postorder.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 找到根节点在中序遍历中的索引</span><br>        <span class="hljs-type">int</span> rootVal = postorder.<span class="hljs-built_in">back</span>();<br>        <span class="hljs-type">int</span> rootIdx = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (inorder[rootIdx] != rootVal)<br>        &#123;<br>            rootIdx++;<br>        &#125;<br><br>        NodePtr root = <span class="hljs-keyword">new</span> node;<br>        root-&gt;data = rootVal;<br><br>        <span class="hljs-comment">// 切割成左子树和右子树</span><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">leftInorder</span><span class="hljs-params">(inorder.begin(), inorder.begin() + rootIdx)</span></span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">rightInorder</span><span class="hljs-params">(inorder.begin() + rootIdx + <span class="hljs-number">1</span>, inorder.end())</span></span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">leftPostorder</span><span class="hljs-params">(postorder.begin(), postorder.begin() + rootIdx)</span></span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">rightPostorder</span><span class="hljs-params">(postorder.begin() + rootIdx, postorder.end() - <span class="hljs-number">1</span>)</span></span>;<br><br>        root-&gt;left = <span class="hljs-built_in">buildTreeFromInPost</span>(leftInorder, leftPostorder);<br>        root-&gt;right = <span class="hljs-built_in">buildTreeFromInPost</span>(rightInorder, rightPostorder);<br><br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="二叉树操作的时空复杂度"><a href="#二叉树操作的时空复杂度" class="headerlink" title="二叉树操作的时空复杂度"></a>二叉树操作的时空复杂度</h2><p>最后总结一下二叉树基本操作的时空复杂度</p><table><thead><tr><th>操作</th><th>时间复杂度</th><th>空间复杂度</th></tr></thead><tbody><tr><td>遍历（递归）</td><td>O(n)</td><td>O(h),递归栈的最大深度为树的高度</td></tr><tr><td>遍历（迭代）</td><td>O(n)</td><td>前中后层次具体分析</td></tr><tr><td>搜索</td><td>O(n)</td><td>O(1)</td></tr><tr><td>插入&#x2F;删除</td><td>O(n)</td><td>O(1)</td></tr><tr><td>重构</td><td>O(n)</td><td>O(h),递归栈的最大深度为树的高度</td></tr></tbody></table><p>这里都是将二叉树视作退化的链表来计算的，如果二叉树是搜索树或平衡树，则时间复杂度进一步降低。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最后我们再给出本篇文章的详细内容导图</p><p><img src="/images/posts/bintree/Untitled%2011.png"></p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p>本文代码已在github上开源，包含c++，python(待补充), golang(待补充)的二叉树及其操作代码，如果你觉得这篇文章对你有帮助的话，还请帮忙在github上点个Star，谢谢！</p><p><a href="https://github.com/Yuxin1999/star-code/tree/main/DSA/BinaryTree">Github地址</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>清华大学计算机系邓俊辉教授DSA课件[05.二叉树]，<a href="http://dsa.cs.tsinghua.edu.cn/~deng/ds/dsacpp/">下载地址</a></li><li>萨尼 S, 王立柱, 刘志红 数据结构、算法与应用 C++语言描述[M]. 北京: 机械工业出版社, 2015.</li><li><a href="https://programmercarl.com/">代码随想录</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>DSA</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小星学DSA丨一文学完红黑树（简明教程）</title>
    <link href="/2023/04/07/10-00-00/"/>
    <url>/2023/04/07/10-00-00/</url>
    
    <content type="html"><![CDATA[<p>这是小星学DSA系列的第一篇，我会记录我学习的过程与理解，希望能够帮到你。</p><p>本篇文章的思维导图如下，在文章的末尾，我会给出更加详细的思维导图。</p><p><img src="/images/posts/rbtree/Untitled.png"></p><h1 id="红黑树的定义"><a href="#红黑树的定义" class="headerlink" title="红黑树的定义"></a>红黑树的定义</h1><h2 id="红黑树的概念与性质"><a href="#红黑树的概念与性质" class="headerlink" title="红黑树的概念与性质"></a>红黑树的概念与性质</h2><ul><li>红黑树是一棵节点为黑色或红色的二叉搜索树；</li><li>性质1：根节点与外部节点（叶子节点的空子节点）为黑色</li><li>性质2：从根节点到外部节点的路径上，不能有两个连续的红色节点</li><li>性质3：从根节点到外部节点的路径上，黑色节点的数目相同</li></ul><blockquote><p>💫 小星说丨一句话概括红黑树性质：<strong>头尾黑，红红不相连，黑节点数目相等</strong></p></blockquote><h2 id="红黑树的复杂度及证明"><a href="#红黑树的复杂度及证明" class="headerlink" title="红黑树的复杂度及证明"></a>红黑树的复杂度及证明</h2><ul><li>红黑树的空间复杂度为O(n)</li><li>红黑树的时间复杂度为: O(lgn)</li></ul><h3 id="证明红黑树的时间复杂度"><a href="#证明红黑树的时间复杂度" class="headerlink" title="证明红黑树的时间复杂度"></a>证明红黑树的时间复杂度</h3><ol><li>等价命题：<strong>一棵含有n个节点的红黑树的高度至多为2log(n+1)</strong></li><li>逆否命题：高度为h的红黑树，其节点至少为$2^{h&#x2F;2}-1$个</li><li>设节点x路径中黑节点的数量为bh(x)，则上述命题为：高度为h的红黑树，其黑节点至少为$2^{bh(x)}-1$个</li><li>数学归纳法证明：<ol><li>h &#x3D; 0, 易证</li><li>假设h&#x3D;H-1时等式成立，则h&#x3D;H时，根节点的两个子节点高度均为H-1，则根节点的黑节点数量至少为$2*2^{bh(root.child)}-2+1&#x3D;2^{bh{(root)}}-1$,等式成立</li></ol></li></ol><blockquote><p>💫 小星说丨用高度推节点数地计算和理解更容易</p></blockquote><h1 id="红黑树的操作"><a href="#红黑树的操作" class="headerlink" title="红黑树的操作"></a>红黑树的操作</h1><p>红黑树的作为树的基本操作：查找、插入、删除</p><p>为了维护红黑树性质需要的操作：左旋、右旋</p><h2 id="红黑树的左旋与右旋"><a href="#红黑树的左旋与右旋" class="headerlink" title="红黑树的左旋与右旋"></a>红黑树的左旋与右旋</h2><h3 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h3><p>左旋即被旋转的节点（根节点）变为了右节点的左子节点，右节点代替了它的位置，而右节点原先的左子节点则变为了被旋转节点的右节点</p><p><img src="/images/posts/rbtree/Untitled%201.png"></p><h3 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h3><p>右旋即被旋转的节点（根节点）变为了左节点的右子节点，左节点代替了它的位置，而左节点原先的右子节点则变为了被旋转节点的左节点</p><p><img src="/images/posts/rbtree/Untitled%202.png"></p><blockquote><p>💫 小星说丨<strong>左旋：被左旋的节点变为左子节点；右旋：被右旋的节点变为右子节点</strong>。想象被旋转的节点是一个跷跷板的支点，左旋即把右节点翘上去，右旋即把左节点翘上去，多出来的节点由支点接住。</p></blockquote><h2 id="红黑树的查找"><a href="#红黑树的查找" class="headerlink" title="红黑树的查找"></a>红黑树的查找</h2><p>在查找上，红黑树与普通的二叉搜索树完全一样，不一样的点在于红黑树的查找复杂度为O(lgn)。</p><p>二叉搜索树的查找非常简单，只要将查找值与当前节点的值比较，大则向右找，小则向左找，这里不再赘述。</p><h2 id="红黑树的插入"><a href="#红黑树的插入" class="headerlink" title="红黑树的插入"></a>红黑树的插入</h2><p>红黑树的插入总共三步：</p><ol><li>将红黑树当作二叉查找树，插入节点；</li><li>将插入的节点着色为红色；</li><li>通过旋转着色，使之重新成为一颗红黑树。</li></ol><p>接下来我们详细说明一下这三步：</p><h3 id="插入二叉查找树"><a href="#插入二叉查找树" class="headerlink" title="插入二叉查找树"></a>插入二叉查找树</h3><p>首先我们不考虑颜色，而是根据二叉查找树的性质，找到红黑树的插入点。</p><p>我们用一个节点指针遍历二叉树，反复与节点比较，大则向右，小则向左，直到到达null；</p><h3 id="插入节点着色为红色"><a href="#插入节点着色为红色" class="headerlink" title="插入节点着色为红色"></a>插入节点着色为红色</h3><p>为了在插入时不破坏红黑树的性质3（从根节点到外部节点的路径上，黑色节点的数目相同），我们将该节点着色为红色，接下来，只要解决红-红冲突，便能完成插入。</p><h3 id="插入修正"><a href="#插入修正" class="headerlink" title="插入修正"></a>插入修正</h3><blockquote><p>💫 小星说丨<strong>一句话理解红黑树的插入修正：红色矛盾向上转移，直到移到根节点变为黑色</strong>。因为矛盾要向上转移，因此我们需要考虑上一层长辈节点的状态，即父节点与叔叔节点。</p></blockquote><p>这里，我给插入修正的情况做了一个总结表</p><table><thead><tr><th>当前节点</th><th>父节点</th><th>叔叔节点</th><th>当前节点与父亲节点的偏向</th><th>操作</th></tr></thead><tbody><tr><td>根节点</td><td></td><td></td><td></td><td>染黑</td></tr><tr><td>红</td><td>黑</td><td></td><td></td><td>无需修正</td></tr><tr><td>红</td><td>红</td><td>红</td><td></td><td>父节点和叔叔节点变黑，祖父节点变红，开始解决祖父节点可能存在的矛盾</td></tr><tr><td>红</td><td>红</td><td>黑</td><td>不一致</td><td>当前节点通过左旋或右旋成为原父节点的父节点，使二者朝向一致，此时将原父节点当作当前节点，再次判断当前节点状态。</td></tr><tr><td>红</td><td>红</td><td>黑</td><td>一致</td><td>父节点通过左旋或右旋成为原祖父节点的父节点，父节点变为黑色，原祖父节点变为红色</td></tr></tbody></table><p>可以这样理解红黑树插入修正的逻辑：</p><ol><li>父亲红，叔叔红，那么就交换父亲层和祖父层的颜色，将红色矛盾向上转移至祖父，而父亲和叔叔这一层可以变为黑色；</li><li>父亲红，叔叔黑，由于性质3的限制，不能直接交换（下一层需要两个变黑才能换上一层一个变红），为了只变父亲这边不变叔叔那边，于是使用左旋或右旋来交换父亲和祖父的颜色；</li><li>旋转时要保持当前节点和父亲节点的父子关系，所以要求偏向一致。</li></ol><blockquote><p>💫 小星说丨红黑树插入修正达到以下三种情况，即为最终情况，可以彻底解决矛盾，其他的操作是为了达到这三种状态。</p></blockquote><ol><li>当前节点为根节点</li><li>当前节点的父节点为黑色</li><li>双红偏向一致，叔叔黑色</li></ol><p><img src="/images/posts/rbtree/Untitled%203.png"></p></aside><h2 id="红黑树的删除"><a href="#红黑树的删除" class="headerlink" title="红黑树的删除"></a>红黑树的删除</h2><p>红黑树的删除同样是三步：</p><ol><li>将红黑树当作二叉搜索树，找到需要删除的节点</li><li>使用恰当的节点值代替该删除节点，并将矛盾转移到代替节点</li><li>删除代替节点，并根据代替节点的情况，旋转着色使之重新成为一颗红黑树</li></ol><p>看起来比插入要复杂一些，这是因为插入的地方肯定为叶子节点，而删除的地方则不一定，因此我们需要将删除的矛盾转移至叶子节点，然后再来解决红黑树的矛盾。</p><h3 id="从二叉搜索树找到需要删除的节点"><a href="#从二叉搜索树找到需要删除的节点" class="headerlink" title="从二叉搜索树找到需要删除的节点"></a>从二叉搜索树找到需要删除的节点</h3><p>利用二叉搜索树的查找方法，找到该节点</p><h3 id="找到代替节点"><a href="#找到代替节点" class="headerlink" title="找到代替节点"></a>找到代替节点</h3><p>找到删除节点后，我们需要明确，删除节点的位置是否可以空置，如果不空置，是否需要找一个替代节点，而替代节点又如何解决？</p><p>这里有三种情况</p><ol><li>被删除节点为叶子节点，由于它已经是叶子节点，因此这个地方可以为空，也即节点可以直接删除。</li></ol><p><img src="/images/posts/rbtree/Untitled%204.png"></p><ol start="2"><li>被删除的节点有一个子节点，那么我们就用这个子节点代替这个节点的位置，而将子节点删除，由于红黑树的的性质3限制，这个子节点肯定是一个叶子节点。</li></ol><p><img src="/images/posts/rbtree/Untitled%205.png"></p><ol start="3"><li>被删除的节点有两个子节点，那么我们就找到该节点的后继节点（右子树的最左节点），用后继节点代替这个节点的位置，而将后继节点删除，后继节点也必定为一个叶子节点</li></ol><p><img src="/images/posts/rbtree/Untitled%206.png"></p><h3 id="删除修正"><a href="#删除修正" class="headerlink" title="删除修正"></a>删除修正</h3><p>经过第二步，我们将删除指定节点的任务，都转化为了删除一个叶子节点的任务，接下来，我们需要根据这个叶子节点的状态，通过旋转着色维护红黑树的性质。</p><blockquote><p>💫 小星说丨一句话总结红黑树的删除修正：父节点下放弥补双黑，兄弟相应调整。这里主要影响到的是兄弟节点和侄子节点</p></blockquote></aside><p>以下两种情况，可以直接删除该节点，用一个外部节点代替其位置</p><table><thead><tr><th>当前节点</th><th>兄弟节点</th><th>侄子节点</th><th>操作</th></tr></thead><tbody><tr><td>根节点</td><td></td><td></td><td>直接删除</td></tr><tr><td>红色</td><td></td><td></td><td>直接删除</td></tr></tbody></table><p>以下几种情况，为了维护性质3，我们在用外部节点代替该节点时，将该外部节点标记为双黑（DB，double black)</p><table><thead><tr><th>当前节点</th><th>兄弟节点</th><th>侄子节点</th><th>操作</th></tr></thead><tbody><tr><td>DB</td><td>红色</td><td></td><td>父亲节点与兄弟节点颜色互换，且父亲节点向DB方向旋转，此时再重新判断DB状态。</td></tr><tr><td>DB</td><td>黑色</td><td>黑色</td><td>当前节点变为单黒，兄弟节点变为红色，父亲节点加一个黑色（黑或双黑），再次判断情况</td></tr><tr><td>DB</td><td>黑色</td><td>远黑近红</td><td>兄弟和红侄子颜色互换，朝着DB的反方向旋转，（即变到下一种状态）此时再重新判断DB状态</td></tr><tr><td>DB</td><td>黑色</td><td>近黑远红</td><td>兄弟和父节点颜色互换，父节点向DB方向旋转，删除DB记号，并将远红侄子标为黑色</td></tr></tbody></table><p>这样理解红黑树的删除修正逻辑：为了弥补双黑节点将要失去的黑色，我们将父节点加一个黑色弥补到这条线路上，但这样兄弟节点那边会多一个黑色。因此，如果侄子是黑的，那么兄弟就可以变红来保持黑色平衡；否则为了不影响兄弟路线上的黑色数目，父节点需要通过旋转来到DB的路径，而兄弟路线上少的一个黑色要由远侄子（不会被带到DB路线上的侄子）弥补。因此，这种情况下兄弟必须是黑色（这个黑色将贡献给父亲），而远侄子也必须是红色（才能弥补一个黑色）。</p><blockquote><p>💫 小星说丨红黑树删除修正达到以下三种情况，即为最终情况，可以彻底解决矛盾，其他的操作是为了达到这三种状态。</p></blockquote><ol><li>当前节点为根节点</li><li>当前节点为红色节点</li><li>兄黑远侄子红</li></ol><p><img src="/images/posts/rbtree/Untitled%207.png"></p><h1 id="手撕红黑树"><a href="#手撕红黑树" class="headerlink" title="手撕红黑树"></a>手撕红黑树</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>首先，我们需要准备构建红黑树所需要的基础数据结构，以及基本的类成员与初始化方法</p><h3 id="节点数据结构"><a href="#节点数据结构" class="headerlink" title="节点数据结构"></a>节点数据结构</h3><p>红黑树由节点构成，因此我们首先需要定义节点的数据结构</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>  <span class="hljs-type">int</span> data;<br>  Node *parent;<br>  Node *left;<br>  Node *right;<br>  <span class="hljs-type">int</span> color;<br>&#125;;<br><br><span class="hljs-comment">// 定义节点指针类型，方便引用</span><br><span class="hljs-keyword">typedef</span> Node *NodePtr;<br></code></pre></td></tr></table></figure><h3 id="基本类成员"><a href="#基本类成员" class="headerlink" title="基本类成员"></a>基本类成员</h3><p>这里我们需要定义两个类成员：根节点与NULL节点（用于截止判定）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedBlackTree</span> &#123;<br>   <span class="hljs-keyword">private</span>:<br>  NodePtr root;<br>  NodePtr TNULL;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="初始化二叉树"><a href="#初始化二叉树" class="headerlink" title="初始化二叉树"></a>初始化二叉树</h3><p>二叉树的初始化：1. 初始化TNULL节点 2. 初始化根节点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">RedBlackTree</span>() &#123;<br>    TNULL = <span class="hljs-keyword">new</span> Node;<br>    TNULL-&gt;color = <span class="hljs-number">0</span>;<br>    TNULL-&gt;left = <span class="hljs-literal">nullptr</span>;<br>    TNULL-&gt;right = <span class="hljs-literal">nullptr</span>;<br>    root = TNULL;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="红黑树的左旋与右旋-1"><a href="#红黑树的左旋与右旋-1" class="headerlink" title="红黑树的左旋与右旋"></a>红黑树的左旋与右旋</h2><p>左旋实现：</p><ol><li>定义right为节点x的右子节点</li><li>将right的左孩子接在父节点的右边</li><li>right的父节点变为祖父节点；祖父节点的（左&#x2F;右）子节点变为right</li><li>right的左节点变为x，x的父节点变为right</li></ol><p>右旋实现同理：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">leftRotate</span><span class="hljs-params">(NodePtr x)</span> </span>&#123;<br>    NodePtr y = x-&gt;right;<br>    x-&gt;right = y-&gt;left;<br>    <span class="hljs-keyword">if</span> (y-&gt;left != TNULL) &#123;<br>      y-&gt;left-&gt;parent = x;<br>    &#125;<br>    y-&gt;parent = x-&gt;parent;<br>    <span class="hljs-keyword">if</span> (x-&gt;parent == <span class="hljs-literal">nullptr</span>) &#123;<br>      <span class="hljs-keyword">this</span>-&gt;root = y;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x == x-&gt;parent-&gt;left) &#123;<br>      x-&gt;parent-&gt;left = y;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      x-&gt;parent-&gt;right = y;<br>    &#125;<br>    y-&gt;left = x;<br>    x-&gt;parent = y;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rightRotate</span><span class="hljs-params">(NodePtr x)</span> </span>&#123;<br>    NodePtr y = x-&gt;left;<br>    x-&gt;left = y-&gt;right;<br>    <span class="hljs-keyword">if</span> (y-&gt;right != TNULL) &#123;<br>      y-&gt;right-&gt;parent = x;<br>    &#125;<br>    y-&gt;parent = x-&gt;parent;<br>    <span class="hljs-keyword">if</span> (x-&gt;parent == <span class="hljs-literal">nullptr</span>) &#123;<br>      <span class="hljs-keyword">this</span>-&gt;root = y;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x == x-&gt;parent-&gt;right) &#123;<br>      x-&gt;parent-&gt;right = y;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      x-&gt;parent-&gt;left = y;<br>    &#125;<br>    y-&gt;right = x;<br>    x-&gt;parent = y;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="红黑树的查找-1"><a href="#红黑树的查找-1" class="headerlink" title="红黑树的查找"></a>红黑树的查找</h2><p>接下来实现红黑树的查找，我们定义一个search公共函数作为外部调用接口，内部的递归使用私有函数searchHelper。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">private</span>:<br><span class="hljs-function">NodePtr <span class="hljs-title">searchTreeHelper</span><span class="hljs-params">(NodePtr node, <span class="hljs-type">int</span> key)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (node == TNULL || key == node-&gt;data) &#123;<br>      <span class="hljs-keyword">return</span> node;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (key &lt; node-&gt;data) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">searchTreeHelper</span>(node-&gt;left, key);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">searchTreeHelper</span>(node-&gt;right, key);<br>  &#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">NodePtr <span class="hljs-title">searchTree</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">searchTreeHelper</span>(<span class="hljs-keyword">this</span>-&gt;root, k);<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="红黑树的插入-1"><a href="#红黑树的插入-1" class="headerlink" title="红黑树的插入"></a>红黑树的插入</h2><p>这里我们需要定义两个函数，一个是insert函数，一个是插入修正insertFix函数</p><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>插入函数逻辑的实现包括：</p><ol><li>为插入的值new一个新节点</li><li>找到插入位置</li><li>插入该节点，建立父子连接（注意根节点的判定）</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span>&#123;<br><span class="hljs-comment">// 1. new一个新节点</span><br>    NodePtr node = <span class="hljs-keyword">new</span> Node;<br>    node-&gt;parent = <span class="hljs-literal">nullptr</span>;<br>    node-&gt;data = key;<br>    node-&gt;left = TNULL;<br>    node-&gt;right = TNULL;<br>    node-&gt;color = <span class="hljs-number">1</span>;<br><br>    NodePtr y = <span class="hljs-literal">nullptr</span>;<br>    NodePtr x = <span class="hljs-keyword">this</span>-&gt;root;<br><br><span class="hljs-comment">// 2. 找到插入位置</span><br>    <span class="hljs-keyword">while</span> (x != TNULL) &#123;<br>      y = x;<br>      <span class="hljs-keyword">if</span> (node-&gt;data &lt; x-&gt;data) &#123;<br>        x = x-&gt;left;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        x = x-&gt;right;<br>      &#125;<br>    &#125;<br><br><span class="hljs-comment">// 3. 建立父子连接</span><br>    node-&gt;parent = y;<br>    <span class="hljs-keyword">if</span> (y == <span class="hljs-literal">nullptr</span>) &#123;<br>      root = node;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (node-&gt;data &lt; y-&gt;data) &#123;<br>      y-&gt;left = node;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      y-&gt;right = node;<br>    &#125;<br><br>    <span class="hljs-built_in">insertFix</span>(node);<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="插入修正-1"><a href="#插入修正-1" class="headerlink" title="插入修正"></a>插入修正</h3><p>插入修正的5种情况中，情况1和情况2可以排除在循环外，情况3，4，5由循环解决</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertFix</span><span class="hljs-params">(NodePtr k)</span> </span>&#123;<br>        NodePtr u;<br>        <span class="hljs-comment">// 情况1:根结点&amp;情况2:黑父节点</span><br>        <span class="hljs-keyword">while</span> (k-&gt;parent != <span class="hljs-literal">nullptr</span> &amp;&amp; k-&gt;parent-&gt;color == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 父节点为右孩子</span><br>        <span class="hljs-keyword">if</span> (k-&gt;parent == k-&gt;parent-&gt;parent-&gt;right) &#123;<br>            <span class="hljs-comment">// 获取叔叔节点</span><br>            u = k-&gt;parent-&gt;parent-&gt;left;<br><br>            <span class="hljs-comment">// 情况3:叔叔节点为红</span><br>            <span class="hljs-keyword">if</span> (u-&gt;color == <span class="hljs-number">1</span>) &#123;<br>            u-&gt;color = <span class="hljs-number">0</span>;<br>            k-&gt;parent-&gt;color = <span class="hljs-number">0</span>;<br>            k-&gt;parent-&gt;parent-&gt;color = <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 矛盾转移至祖父节点</span><br>            k = k-&gt;parent-&gt;parent;<br>            &#125; <br><br>            <span class="hljs-comment">// 叔叔节点为黑</span><br>            <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 情况4:父子偏向不一致</span><br>            <span class="hljs-keyword">if</span> (k == k-&gt;parent-&gt;left) &#123;<br>                k = k-&gt;parent;<br>                <span class="hljs-built_in">rightRotate</span>(k);<br>            &#125;<br>            <span class="hljs-comment">// 情况5:父子偏向一致</span><br>            k-&gt;parent-&gt;color = <span class="hljs-number">0</span>;<br>            k-&gt;parent-&gt;parent-&gt;color = <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">leftRotate</span>(k-&gt;parent-&gt;parent);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 父节点为左孩子，类似 </span><br>        <span class="hljs-keyword">else</span> &#123;<br>            u = k-&gt;parent-&gt;parent-&gt;right;<br><br>            <span class="hljs-keyword">if</span> (u-&gt;color == <span class="hljs-number">1</span>) &#123;<br>            u-&gt;color = <span class="hljs-number">0</span>;<br>            k-&gt;parent-&gt;color = <span class="hljs-number">0</span>;<br>            k-&gt;parent-&gt;parent-&gt;color = <span class="hljs-number">1</span>;<br>            k = k-&gt;parent-&gt;parent;<br>            &#125; <br>            <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (k == k-&gt;parent-&gt;right) &#123;<br>                k = k-&gt;parent;<br>                <span class="hljs-built_in">leftRotate</span>(k);<br>            &#125;<br>            k-&gt;parent-&gt;color = <span class="hljs-number">0</span>;<br>            k-&gt;parent-&gt;parent-&gt;color = <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">rightRotate</span>(k-&gt;parent-&gt;parent);<br>            &#125;<br>        &#125;<br>        &#125;<br>        <span class="hljs-comment">// 根结点染黑</span><br>        root-&gt;color = <span class="hljs-number">0</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="红黑树的删除-1"><a href="#红黑树的删除-1" class="headerlink" title="红黑树的删除"></a>红黑树的删除</h2><p>这里同样需要定义两个函数，一个是删除函数deleteNode，一个是删除修正函数deleteFix</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除函数的逻辑实现包括：</p><ol><li>找到key对应的节点</li><li>找到对应的代替节点（叶子节点；有一个子节点；有两个子节点）</li><li>删除修正</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deleteNode</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 1. 找到key对应的节点</span><br>        NodePtr z = TNULL;<br>        z = <span class="hljs-built_in">searchTreeHelper</span>(<span class="hljs-keyword">this</span>-&gt;root, key);<br>        <span class="hljs-keyword">if</span> (z == TNULL)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;Key not found in the tree&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 2. 找到对应的代替节点</span><br>        NodePtr y = TNULL;<br>        <span class="hljs-keyword">if</span> (z-&gt;left == TNULL &amp;&amp; z-&gt;right == TNULL)<br>        &#123;<br>            y = z;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (z-&gt;left == TNULL)<br>        &#123;<br>            y = z-&gt;right;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (z-&gt;right == TNULL)<br>        &#123;<br>            y = z-&gt;left;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            y = <span class="hljs-built_in">minimum</span>(z-&gt;right);<br>        &#125;<br>        z-&gt;data = y-&gt;data;<br><br>        <span class="hljs-comment">// 3. 删除修正</span><br>        <span class="hljs-built_in">deleteFix</span>(y);<br>        <span class="hljs-comment">// 修正完后删除这个节点</span><br>        <span class="hljs-keyword">if</span> (y-&gt;data &lt; y-&gt;parent-&gt;data)&#123;<br>            y-&gt;parent-&gt;left = TNULL;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            y-&gt;parent-&gt;right = TNULL;<br>        &#125;<br>        <span class="hljs-comment">// 释放指针</span><br>        z = y;<br>        <span class="hljs-keyword">delete</span> y;<br>        y = <span class="hljs-literal">NULL</span>;<br>        z = <span class="hljs-literal">NULL</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="删除修正-1"><a href="#删除修正-1" class="headerlink" title="删除修正"></a>删除修正</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deleteFix</span><span class="hljs-params">(NodePtr x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        NodePtr s;<br>        <span class="hljs-comment">// 情况1:根结点&amp;情况2:红节点</span><br>        <span class="hljs-keyword">while</span> (x != root &amp;&amp; x-&gt;color == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-comment">// x为左节点</span><br>            <span class="hljs-keyword">if</span> (x == x-&gt;parent-&gt;left)<br>            &#123;<br>                s = x-&gt;parent-&gt;right;<br>                <span class="hljs-comment">// 情况3:兄弟节点为红色</span><br>                <span class="hljs-keyword">if</span> (s-&gt;color == <span class="hljs-number">1</span>)<br>                &#123;<br>                    s-&gt;color = <span class="hljs-number">0</span>;<br>                    x-&gt;parent-&gt;color = <span class="hljs-number">1</span>;<br>                    <span class="hljs-built_in">leftRotate</span>(x-&gt;parent);<br>                    <span class="hljs-comment">// 获得新的兄弟节点</span><br>                    s = x-&gt;parent-&gt;right;<br>                &#125;<br><br>                <span class="hljs-comment">// 情况4:兄弟节点为黑色，侄子节点为黑色 </span><br>                <span class="hljs-keyword">if</span> (s-&gt;left-&gt;color == <span class="hljs-number">0</span> &amp;&amp; s-&gt;right-&gt;color == <span class="hljs-number">0</span>)<br>                &#123;<br>                    s-&gt;color = <span class="hljs-number">1</span>;<br>                    <span class="hljs-comment">// 父亲节点变为要判断的节点</span><br>                    x = x-&gt;parent;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-comment">// 情况5: 侄子远黑近红</span><br>                    <span class="hljs-keyword">if</span> (s-&gt;right-&gt;color == <span class="hljs-number">0</span>)<br>                    &#123;<br>                        s-&gt;left-&gt;color = <span class="hljs-number">0</span>;<br>                        s-&gt;color = <span class="hljs-number">1</span>;<br>                        <span class="hljs-built_in">rightRotate</span>(s);<br>                        s = x-&gt;parent-&gt;right;<br>                    &#125;<br><br>                    <span class="hljs-comment">// 情况6: 侄子远红近黑</span><br>                    s-&gt;color = x-&gt;parent-&gt;color;<br>                    x-&gt;parent-&gt;color = <span class="hljs-number">0</span>;<br>                    s-&gt;right-&gt;color = <span class="hljs-number">0</span>;<br>                    <span class="hljs-built_in">leftRotate</span>(x-&gt;parent);<br>                    <span class="hljs-comment">// 终止循环</span><br>                    x = root;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// x为右节点，类似</span><br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                s = x-&gt;parent-&gt;left;<br>                <span class="hljs-keyword">if</span> (s-&gt;color == <span class="hljs-number">1</span>)<br>                &#123;<br>                    s-&gt;color = <span class="hljs-number">0</span>;<br>                    x-&gt;parent-&gt;color = <span class="hljs-number">1</span>;<br>                    <span class="hljs-built_in">rightRotate</span>(x-&gt;parent);<br>                    s = x-&gt;parent-&gt;left;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (s-&gt;right-&gt;color == <span class="hljs-number">0</span> &amp;&amp; s-&gt;right-&gt;color == <span class="hljs-number">0</span>)<br>                &#123;<br>                    s-&gt;color = <span class="hljs-number">1</span>;<br>                    x = x-&gt;parent;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-keyword">if</span> (s-&gt;left-&gt;color == <span class="hljs-number">0</span>)<br>                    &#123;<br>                        s-&gt;right-&gt;color = <span class="hljs-number">0</span>;<br>                        s-&gt;color = <span class="hljs-number">1</span>;<br>                        <span class="hljs-built_in">leftRotate</span>(s);<br>                        s = x-&gt;parent-&gt;left;<br>                    &#125;<br><br>                    s-&gt;color = x-&gt;parent-&gt;color;<br>                    x-&gt;parent-&gt;color = <span class="hljs-number">0</span>;<br>                    s-&gt;left-&gt;color = <span class="hljs-number">0</span>;<br>                    <span class="hljs-built_in">rightRotate</span>(x-&gt;parent);<br>                    x = root;<br>                &#125;<br>            &#125;<br>        &#125;<br>        x-&gt;color = <span class="hljs-number">0</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>再最后，我们再用一张思维导图总结本篇博客的内容</p><p><img src="/images/posts/rbtree/Untitled%208.png"></p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p>本文代码已在github上开源，包含c++，python(待补充), golang(待补充)的红黑树代码，如果你觉得这篇文章对你有帮助的话，还请帮忙在github上点个Star，谢谢！</p><p><a href="https://github.com/Yuxin1999/star-code/tree/main/DSA/RBTree">Github地址</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://juejin.cn/post/7035463218604556325">红黑树 - 插入篇 - 掘金</a></p><p><a href="https://medium.com/analytics-vidhya/deletion-in-red-black-rb-tree-92301e1474ea">Deletion in Red-Black (RB) Tree</a></p><p><a href="https://www.programiz.com/dsa/red-black-tree">Red-Black Tree</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>DSA</tag>
      
      <tag>红黑树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验室工作站配置记录</title>
    <link href="/2022/11/01/21-44-37/"/>
    <url>/2022/11/01/21-44-37/</url>
    
    <content type="html"><![CDATA[<p>给实验室配置新的服务器，具体配置如下：</p><ul><li>CPU：Xeon 2.5 G x 2，40核80进程</li><li>内存：32GX4</li><li>存储：8T</li><li>显卡：3090 x 2</li><li>系统：ubuntu20.02</li></ul><h2 id="系统成员管理与登录"><a href="#系统成员管理与登录" class="headerlink" title="系统成员管理与登录"></a>系统成员管理与登录</h2><h3 id="更改user密码"><a href="#更改user密码" class="headerlink" title="更改user密码"></a>更改user密码</h3><p>使用随机生成的高强度密码代替原始密码，保证服务器安全性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo passwd user<br></code></pre></td></tr></table></figure><h3 id="创建成员组与成员"><a href="#创建成员组与成员" class="headerlink" title="创建成员组与成员"></a>创建成员组与成员</h3><p>由于该服务器需要多个用途：</p><ol><li>实验室计算需要</li><li>网站搭建需要</li></ol><p>因此需要对其进行严格限制与区分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 对于实验室成员，创建成员组lab</span><br>sudo groupadd lab<br><br><span class="hljs-comment"># 向成员组中添加成员</span><br>sudo useradd user_name -g lab -m<br><br><span class="hljs-comment"># 查看所有用户和用户组</span><br>cat /etc/passwd<br>cat /etc/group<br></code></pre></td></tr></table></figure><h3 id="获取固定局域网IP（校园网用户不建议使用，后面造成很多bug）"><a href="#获取固定局域网IP（校园网用户不建议使用，后面造成很多bug）" class="headerlink" title="获取固定局域网IP（校园网用户不建议使用，后面造成很多bug）"></a><del>获取固定局域网IP（校园网用户不建议使用，后面造成很多bug）</del></h3><p>参考文章：<a href="https://blog.csdn.net/qq_19734597/article/details/104087091">https://blog.csdn.net/qq_19734597&#x2F;article&#x2F;details&#x2F;104087091</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 安装ifupdown </span><br>sudo apt install ifupdown<br><span class="hljs-comment"># 查看网卡名称</span><br>ifconfig<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出第一行eno1为网卡名称</span><br><span class="hljs-string">eno1:flags=4163....</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># 查看网关地址</span><br>netstat -r<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出第一列中类ipv4地址192.168.11.2即为网关地址</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># 修改配置文件</span><br>sudo vim /etc/network/interfaces<br><br><span class="hljs-comment"># 配置文件修改如下</span><br>iface **eno1** inet static <span class="hljs-comment"># 填网卡名称</span><br>address <span class="hljs-number">192.168</span><span class="hljs-number">.11</span><span class="hljs-number">.135</span><br>**gateway** <span class="hljs-number">192.168</span><span class="hljs-number">.11</span><span class="hljs-number">.2</span> <span class="hljs-comment"># 填自己的网关</span><br>netmask <span class="hljs-number">255.255</span><span class="hljs-number">.255</span><span class="hljs-number">.0</span><br>dns-nameservers <span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span><br><br><span class="hljs-comment">#重启网络服务</span><br>sudo service network-manager restart<br><br><span class="hljs-comment">#ifconfig查看局域网地址</span><br></code></pre></td></tr></table></figure><p>修改后重启电脑时，可能会导致网络消失，解决方法查看基础配置问题&#x2F;有线网络消失</p><h2 id="安全登录设置"><a href="#安全登录设置" class="headerlink" title="安全登录设置"></a>安全登录设置</h2><h3 id="修改ssh端口22"><a href="#修改ssh端口22" class="headerlink" title="修改ssh端口22"></a>修改ssh端口22</h3><p>ssh默认端口为22，但从安全方面考虑，建议修改1024到65535</p><p><strong>修改为5160</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo vi /etc/ssh/ssh_config<br>sudo vi /etc/ssh/sshd_config<br><span class="hljs-comment"># 取消Port前注释并将端口改成5160</span><br><br><span class="hljs-comment"># 重启sshd服务</span><br>service sshd restart<br></code></pre></td></tr></table></figure><h3 id="禁用远程root登录"><a href="#禁用远程root登录" class="headerlink" title="禁用远程root登录"></a>禁用远程root登录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo vi /etc/ssh/sshd_config<br><span class="hljs-comment"># 把permitrootlogin 改成 no</span><br></code></pre></td></tr></table></figure><h3 id="修改rsa登录"><a href="#修改rsa登录" class="headerlink" title="修改rsa登录"></a>修改rsa登录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在自己本地电脑生成公钥与私钥</span><br>ssh-keygen<br><span class="hljs-comment"># 将id_rsa.pub转移到服务器上</span><br><br><span class="hljs-comment"># 在该用户工作区，新建.ssh文件夹，在.ssh文件夹中新建文件authorized_keys</span><br><span class="hljs-comment"># 添加公钥至authorized_keys</span><br>cat id_rsa.pub &gt;&gt; .ssh/authorized_keys<br><br><span class="hljs-comment"># 调整权限</span><br>chmod <span class="hljs-number">600</span> authorized_keys<br>chmod <span class="hljs-number">700</span> ~/.ssh<br><br><span class="hljs-comment"># 设置服务器ssh</span><br>sudo vim /etc/ssh/sshd_config<br><span class="hljs-comment"># 取消以下两行的注释</span><br>RSAAuthentication yes<br>PubkeyAuthentication yes<br><br><span class="hljs-comment"># 重启</span><br>service sshd restart<br></code></pre></td></tr></table></figure><h3 id="禁止密码登录"><a href="#禁止密码登录" class="headerlink" title="禁止密码登录"></a>禁止密码登录</h3><p>为了防止不同用户使用弱密码时被攻破，只允许使用公钥私钥配对登录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo vim /etc/ssh/sshd_config<br><span class="hljs-comment"># 修改</span><br>PasswordAuthencation no<br></code></pre></td></tr></table></figure><h2 id="图形界面基础软件安装"><a href="#图形界面基础软件安装" class="headerlink" title="图形界面基础软件安装"></a>图形界面基础软件安装</h2><h3 id="拼音输入法"><a href="#拼音输入法" class="headerlink" title="拼音输入法"></a>拼音输入法</h3><p>参考文章：<a href="https://blog.csdn.net/kan2016/article/details/105735645">https://blog.csdn.net/kan2016/article/details/105735645</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 安装fcitx</span><br>sudo apt install fcitx<br><span class="hljs-comment"># 此处踩坑：unable to locate package fcitx</span><br><span class="hljs-comment"># 原因：需要更新源</span><br><br><span class="hljs-comment"># 配置Fcitx</span><br>im-config <span class="hljs-comment"># 选择fcitx</span><br><br><span class="hljs-comment"># 安装谷歌输入法</span><br>sudo apt install fcitx-fooflepinyin -y<br>fcitx-config-gtk3sudo <span class="hljs-comment"># 选择Google-pinyin并确认</span><br></code></pre></td></tr></table></figure><h3 id="Pycharm安装"><a href="#Pycharm安装" class="headerlink" title="Pycharm安装"></a>Pycharm安装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 官网下载对应版本</span><br><span class="hljs-comment"># 解压至opt文件夹（opt文件夹用于安装额外的软件,在root用户下安装）</span><br>tar-zxvf pycharm-community.tar.gz -C /opt<br><span class="hljs-comment"># 进入opt/pycharm/bin</span><br>sh pycharm.sh<br>完成配置<br></code></pre></td></tr></table></figure><h2 id="环境相关安装"><a href="#环境相关安装" class="headerlink" title="环境相关安装"></a>环境相关安装</h2><h3 id="显卡驱动"><a href="#显卡驱动" class="headerlink" title="显卡驱动"></a>显卡驱动</h3><ol><li>卸载旧驱动</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo apt-get --purge remove nvidia*<br>sudo apt autoremove<br></code></pre></td></tr></table></figure><ol><li>重装驱动</li></ol><p>在<a href="https://www.nvidia.cn/Download/index.aspx?lang=cn">Nvidia官网</a>下载对应的驱动版本：</p><p><img src="/images/posts/Nvidia.png" alt="Nividia官网下载"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 给驱动文件赋予执行权限</span><br>sudo chmod  a+x (下载的驱动文件）<br><span class="hljs-comment"># 安装驱动</span><br>sudo ./驱动文件name -no-x-check -no-nouveau-check -no-opengl-files<br>reboot<br></code></pre></td></tr></table></figure><h3 id="conda环境与安装"><a href="#conda环境与安装" class="headerlink" title="conda环境与安装"></a>conda环境与安装</h3><p>参考文章：<a href="https://zhuanlan.zhihu.com/p/459607806">https://zhuanlan.zhihu.com/p/459607806</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 每个用户独立安装自己的conda</span><br><span class="hljs-comment"># 进入data/anaconda3</span><br>wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-<span class="hljs-number">2021.11</span>-Linux-x86_64.sh<br><span class="hljs-comment"># 安装(在普通用户下</span><br>bash Anaconda3-<span class="hljs-number">2021.11</span>-Linux-x86_64.sh<br><span class="hljs-comment"># 安装路径设置在home/user/anaconda3</span><br>source ~/.bashrc<br></code></pre></td></tr></table></figure><h3 id="cuda安装"><a href="#cuda安装" class="headerlink" title="cuda安装"></a>cuda安装</h3><p>在<a href="https://developer.nvidia.com/cuda-toolkit-archive">Nvidia官网</a>下载对应CUDA版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 安装cuda</span><br>sudo sh cuda_11<span class="hljs-number">.7</span><span class="hljs-number">.0_515</span><span class="hljs-number">.43</span><span class="hljs-number">.04</span>_linux.run<br> <br>配置环境变量<br>vim  ~/.bashrc<br> <br>export PATH=/usr/local/cuda-<span class="hljs-number">11.7</span>/<span class="hljs-built_in">bin</span>$&#123;PATH:+:$&#123;PATH&#125;&#125;<br>export LD_LIBRARY_PATH=/usr/local/cuda-<span class="hljs-number">11.7</span>/lib64$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125;<br> <br><span class="hljs-comment"># 更新环境变量</span><br>source ~/.bashrc<br> <br><span class="hljs-comment"># 查看cuda是否安装成功</span><br>nvcc -V<br></code></pre></td></tr></table></figure><h2 id="基础配置问题"><a href="#基础配置问题" class="headerlink" title="基础配置问题"></a>基础配置问题</h2><h3 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 备份原来的源</span><br>sudo cp /etc/apt/source.<span class="hljs-built_in">list</span> /etc/apt/sources.<span class="hljs-built_in">list</span>.bak<br><br><span class="hljs-comment"># 使用vim打开并编辑source.list</span><br>sudo vim /etc/apt/source.<span class="hljs-built_in">list</span><br><br><span class="hljs-comment"># 在文件中添加源</span><br><br>deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse <br><br>deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse <br><br>deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse <br><br>deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse <br><br>deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse <br><br>deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse <br><br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse <br><br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse <br><br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse <br><br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse focal<br><br><span class="hljs-comment"># 更新源</span><br>sudo apt-get update<br></code></pre></td></tr></table></figure><h3 id="有线网络连接消失"><a href="#有线网络连接消失" class="headerlink" title="有线网络连接消失"></a>有线网络连接消失</h3><ul><li>原因：由于<code>/etc/network/interfaces</code>的手动修改而导致<code>network-manager</code>自动停止对系统网络的管理，从而系统开始使用<code>/etc/network/interfaces</code>文件内的参数进行网络配置。</li><li>解决方法(root用户下进行）：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 删除缓存文件</span><br>sudo service network-manager stop<br>sudo rm /var/lib/NetworkManager/NetworkManager.state<br>sudo service network-manager start<br><br><span class="hljs-comment"># 修改网络控制配置</span><br>sudo vi /etc/NetworkManager/NetworkManager.conf<br><span class="hljs-comment">#将managed=false更改为true</span><br><br><span class="hljs-comment">#重启NetworkManager</span><br>sudo service network-manager restart<br></code></pre></td></tr></table></figure><ul><li>然后可以通过图形界面连接</li></ul><h3 id="无法打开网页"><a href="#无法打开网页" class="headerlink" title="无法打开网页"></a>无法打开网页</h3><p>正常连接校园网，一段时间后无法打开任何网页，重启网络服务无效，ifconfig命令显示正常。</p><p>用Ping检查网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">ping baidu.com<br><span class="hljs-comment"># Temporary failure in name resolution</span><br>ping <span class="hljs-number">202.108</span><span class="hljs-number">.22</span><span class="hljs-number">.5</span><br><span class="hljs-comment"># 直接ping百度域名，packet loss</span><br>ping6 <span class="hljs-number">2402</span>:<span class="hljs-number">4e00</span>:<span class="hljs-number">40</span>:<span class="hljs-number">40</span>::<span class="hljs-number">2</span>:3b6<br><span class="hljs-comment"># ping ipv6地址，成功</span><br></code></pre></td></tr></table></figure><p>查阅可能是DNS解析的问题，导致无法连接所网认证ipv4，因此只能Ping通ipv6地址</p><p>利用网上的方法修改均不能奏效，考虑到在修改静态IP时，建议校园网用户不要使用，因此只能把之前关于网络的设置改回来，改回来后就能够正常上网了。可能是静态IP设置了静态DNS与默认DNS不符。</p><h3 id="分辨率问题"><a href="#分辨率问题" class="headerlink" title="分辨率问题"></a>分辨率问题</h3><p>初始开机分辨率正常，在更换显卡驱动重装桌面后显示不正常（1024x768），需要更换分辨率</p><p>使用网上的教程，用xrandr修改失效，经查阅资料后是显卡驱动的问题。</p><p>在重装显卡驱动后恢复正常</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux 运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>十月入秋</title>
    <link href="/2022/10/11/21-44-37/"/>
    <url>/2022/10/11/21-44-37/</url>
    
    <content type="html"><![CDATA[<p>金秋九月，今年的北京却是十月才有了些秋的样子。</p><p>阳台上还挂着刚洗的夏季的薄衫，妖风就随着秋天来到了。在它吹走吹乱晾衣绳上缠绕交融的长裙与纱衣前，抗风的外套、帽子、手套率先把人武装起来了。</p><p>然而我对季节的更替向来有些迟钝。直到在拥挤喧嚷的街头推着冰凉的共享单车，暖黄色的路灯在散光的眼瞳中呼吸闪烁，我联觉到曾被包裹在剧院外带着寒风的交响乐声中的2019年秋天，才意识到秋天似乎是来到了，且带来了它具有韵律性的寒冷。</p><p>这是九月末尾的事情，我从实习公司下班，因为少加了一件外套被秋天入侵，寒凉的重量加在了呼吸道中、加在了头颈的血管中。</p><p>春捂秋冻，老话说，或许是因为秋冻并没有那么强大。夏天的热量仍在血管中燃烧着，这寒凉仅仅入侵了几分钟，在回到我温暖的小屋后便被燃烧殆尽。这小屋里什么都得被燃烧，接下来是长长的七天国庆假期，我知道什么都得被燃烧。那些个金光闪闪、璀璨绚丽的未来，只有在冷得发灰的逼仄教室中才能梦的见。而那作梦的笔墨，也只有在冷的风里才能书写。</p><p>寒冷中的我是清醒的，中学时思考总是在阴冷天气的中午；本科则是在夜幕时分的熙春园与荒岛，在长白上的雪地，在流光闪烁的中关村大街。后来呢，后来就思考得没那么多了，或许是说，根本不思考，因为被燃烧殆尽了。</p><p>热量包围了我，从我来到北京，奢靡的、放纵的、下沉的热量包围了我，燃烧掉我的清醒。我的笔下再也写不出灵性的文字，我的脑子里再也没有奇绝的想法，而我的心也不再年轻，不再热情，不再有勇气。我被完完全全地蚕食掉，变成普罗大众，再也不特别了。且，再也不想特别，也不会认为自己可以特别了。</p><p>入了秋，我的心情烦躁了起来，只有寒冷能够给予我灵台的清醒，或许我需要去拥抱寒冷，找回一点过去的自己，找回一点力量。这力量来自于自身，不依靠他人，因为曾经的我是有自己的强大的力量的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>散文</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
