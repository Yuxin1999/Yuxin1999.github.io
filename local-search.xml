<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>小星学DSA丨一文学完二叉树（进阶篇）</title>
    <link href="/2023/04/17/19-09-00/"/>
    <url>/2023/04/17/19-09-00/</url>
    
    <content type="html"><![CDATA[<h1 id="小星学DSA丨一文学完二叉树-进阶篇"><a href="#小星学DSA丨一文学完二叉树-进阶篇" class="headerlink" title="小星学DSA丨一文学完二叉树-进阶篇"></a>小星学DSA丨一文学完二叉树-进阶篇</h1><p>Tags: 数据结构</p><p>这是小星学DSA系列的第三篇，我会记录我学习的过程与理解，希望能够帮到你。</p><p>本篇文章的思维导图如下，在文章的末尾，我会给出更加详细的思维导图。</p><p><img src="/images/posts/BST/Untitled.png"></p><p>上篇文章中我们介绍了二叉树的基础知识，这篇我们来介绍常用的二叉树进阶篇。</p><h1 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h1><h2 id="二叉搜索树的定义"><a href="#二叉搜索树的定义" class="headerlink" title="二叉搜索树的定义"></a>二叉搜索树的定义</h2><p>虽然我们已经在前面两篇文章中都涉及到了二叉搜索树，这里还是再次给二叉搜索树正式的定义。</p><blockquote><p><strong>所有节点的值唯一，且左子树的值都小于该节点的值，右子树的值都大于该节点的值。</strong></p></blockquote><h2 id="二叉搜索树的操作"><a href="#二叉搜索树的操作" class="headerlink" title="二叉搜索树的操作"></a>二叉搜索树的操作</h2><p>在<a href="http://rainystar.site/2023/04/07/10-00-00/">小星学DSA丨一文学完红黑树篇</a>中，我们其实已经介绍过二叉搜索树的操作，这里我们将这些操作再次介绍一遍。</p><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>二叉搜索树是有序的，因此二叉搜索树的查找不需要遍历整个树，只需要根据需要查找的值与当前节点的值比较即可，可以大大降低查找的时间复杂度。</p><p><img src="/images/posts/BST/Untitled%201.png"></p><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>二叉搜索树的插入不同于二叉树的插入，一个节点插入的位置是固定的。</p><p>我们用搜索的方式去遍历二叉搜索树，找到小于插入值的最大叶子节点，或大于插入值的最小叶子节点，这个节点的下方就是我们要插入的位置。</p><p><img src="/images/posts/BST/Untitled%202.png"></p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>二叉搜索树的删除首先仍是通过查找的方式，找到需要删除的节点。</p><p>由于在删除后仍需要保持二叉搜索树的性质，因此对于非叶子节点，需要找到合适的值替代，具体替代方式我在<a href="http://rainystar.site/2023/04/07/10-00-00/#%E7%BA%A2%E9%BB%91%E6%A0%91%E7%9A%84%E5%88%A0%E9%99%A4">红黑树的删除</a>也讲过一次。</p><p>主要分为以下三种情况</p><p><img src="/images/posts/BST/Untitled%203.png"></p><p><img src="/images/posts/BST/Untitled%204.png"></p><p><img src="/images/posts/BST/Untitled%205.png"></p><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><table><thead><tr><th></th><th>平衡情况（接近完全二叉树）</th><th>非平衡情况（退化成单链表）</th></tr></thead><tbody><tr><td>搜索</td><td>O(logn)</td><td>O(n)</td></tr><tr><td>插入</td><td>O(logn)</td><td>O(n)</td></tr><tr><td>删除</td><td>O(logn)</td><td>O(n)</td></tr></tbody></table><h1 id="二叉平衡树"><a href="#二叉平衡树" class="headerlink" title="二叉平衡树"></a>二叉平衡树</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>二叉平衡树是左子树和右子树高度差至多为1的二叉搜索树。</p><h3 id="平衡因子"><a href="#平衡因子" class="headerlink" title="平衡因子"></a>平衡因子</h3><p>为了更好的描述二叉平衡树，我们引入了平衡因子的概念，它的计算公式为</p><p>$$<br>平衡因子&#x3D;左子树高度-右子树高度<br>$$</p><p>有了平衡因子之后，我们就能重新定义二叉平衡树，即平衡因子为-1,0或1的二叉搜索树。</p><h2 id="二叉平衡树的操作"><a href="#二叉平衡树的操作" class="headerlink" title="二叉平衡树的操作"></a>二叉平衡树的操作</h2><h3 id="左旋与右旋"><a href="#左旋与右旋" class="headerlink" title="左旋与右旋"></a>左旋与右旋</h3><p>在二叉平衡树中，为了维持平衡，我们也需要左旋与右旋这一操作。</p><blockquote><p>💫小星说丨还记得我们在红黑树一节说的，左旋即：被左旋的节点成为左节点；右旋：被右旋的节点成为右节点</p></blockquote><p>左旋与右旋都分两步：1. 把准父节点中，多余的子节点接到原父节点上 2. 准父节点与原父节点的父子关系调整，如下图所示</p><p><img src="/images/posts/BST/Untitled%206.png"></p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>由于二叉平衡树也是二叉搜索树，因此二叉平衡树的搜索与二叉搜索树的搜索完全相同</p><h3 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a>插入</h3><p>二叉平衡树，由于需要维持平衡，因此其插入过程分两步：</p><ol><li>按照二叉搜索树的方式插入</li><li>平衡修正</li></ol><p>当我们向二叉平衡树中插入节点后，若导致不平衡，则这一不平衡肯定最早出现在插入节点的祖父节点上，因此我们要对插入节点、父节点与祖父节点的关系进行平衡修正。</p><p>主要有以下几种情况：</p><ol><li><p>祖父节点平衡因子&gt;1，则插入节点和插入节点的父节点必然出现在祖父节点的左边，此时</p><ol><li>若插入节点&gt;父节点，父子方向不一致，则需要先将插入节点的父节点左旋使二者朝向一致，此时来到情况b</li><li>若插入节点与父节点方向一致，直接右旋祖父节点即可</li></ol><p> <img src="/images/posts/BST/Untitled%207.png"> </p></li><li><p>祖父节点平衡因子&lt; -1，则说明右边的链路更长，此时的处理与上面对称</p><ol><li>若插入节点&lt;父节点，父子方向不一致，则需要先将插入节点的父节点右旋</li><li>若父子方向一致，直接左旋插入节点的祖父节点</li></ol><p> <img src="/images/posts/BST/Untitled%208.png"></p><blockquote><p>💫小星说丨插入只影响到了父节点和祖父节点，因此只需要根据这三个节点的形状进行适当的左右旋，使之变为“<strong>^”</strong>这样的形状就好了</p></blockquote></li></ol><h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><p>二叉平衡树的删除同样分为两步：</p><ol><li>按照二叉搜索树的方式删除</li><li>平衡修正</li></ol><p>二叉树平衡树中最终删除的必定是叶子节点的位置，因此这一不平衡肯定最早出现在被删除节点的父结点处，因此我们要对这一节点进行平衡修正。</p><ol><li><p>该节点平衡因子&gt;1，则左链路更长，考虑左链路</p><ol><li>该节点左子节点的平衡因子&lt;0，即对左子节点而言，其右链路更长，因此我们需要先对左子节点进行左旋，以补偿左子节点 的左链路，来到情况b</li><li>该节点左子节点的平衡因子≥0, 则我们对该节点进行右旋，以补偿该节点的右链路</li></ol><p> <img src="/images/posts/BST/Untitled%209.png"> </p></li><li><p>该节点平衡因子&lt; -1，则右链路更长</p><ol><li>该节点右子节点平衡因子&gt;0，对右子节点来说，其左链路更长，因此需要先补偿右子节点的左链路</li><li>该节点右子节点平衡因子≤0，直接左旋补偿左链路</li></ol><p> <img src="/images/posts/BST/Untitled%2010.png"></p></li></ol><p><strong>其实到这里我们发现，删除的修正与插入的修正都是一样的，即对平衡因子绝对值大于1的节点通过左旋或右旋补偿较短的那条链路，如果子节点需要补偿的方向与该节点一致则可直接补偿，否则，需要先补偿子节点，再补偿该节点。</strong></p><h3 id="性能分析-1"><a href="#性能分析-1" class="headerlink" title="性能分析"></a>性能分析</h3><p>二叉平衡树由于能够保证树左右高度差不超过1，因此其操作的时间复杂度能够保持在最优</p><table><thead><tr><th></th><th>平衡情况（接近完全二叉树）</th></tr></thead><tbody><tr><td>搜索</td><td>O(logn)</td></tr><tr><td>插入</td><td>O(logn)</td></tr><tr><td>删除</td><td>O(logn)</td></tr></tbody></table><h1 id="手撕二叉进阶树"><a href="#手撕二叉进阶树" class="headerlink" title="手撕二叉进阶树"></a>手撕二叉进阶树</h1><h2 id="手撕二叉搜索树"><a href="#手撕二叉搜索树" class="headerlink" title="手撕二叉搜索树"></a>手撕二叉搜索树</h2><h3 id="节点定义"><a href="#节点定义" class="headerlink" title="节点定义"></a>节点定义</h3><p>二叉搜索树的节点定义与二叉树相同，不需要额外的值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    <span class="hljs-type">int</span> data;<br>    Node *left;<br>    Node *right;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="搜索-1"><a href="#搜索-1" class="headerlink" title="搜索"></a>搜索</h3><p>用递归的方式实现搜索</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">NodePtr <span class="hljs-title">searchTreeHelper</span><span class="hljs-params">(NodePtr node, <span class="hljs-type">int</span> key)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">nullptr</span> || key == node-&gt;data)<br>        &#123;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (key &lt; node-&gt;data)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">searchTreeHelper</span>(node-&gt;left, key);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">searchTreeHelper</span>(node-&gt;right, key);<br>    &#125;<br><span class="hljs-function">NodePtr <span class="hljs-title">searchTree</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">searchTreeHelper</span>(<span class="hljs-keyword">this</span>-&gt;root, k);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="插入-2"><a href="#插入-2" class="headerlink" title="插入"></a>插入</h3><p>同样用递归的方式插入, 找到插入点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">NodePtr <span class="hljs-title">insertNode</span><span class="hljs-params">(NodePtr node, <span class="hljs-type">int</span> data)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">nullptr</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">newNode</span>(data);<br><br>        <span class="hljs-keyword">if</span> (data &lt; node-&gt;data)<br>        &#123;<br>            node-&gt;left = <span class="hljs-built_in">insertNode</span>(node-&gt;left, data);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            node-&gt;right = <span class="hljs-built_in">insertNode</span>(node-&gt;right, data);<br>        &#125;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h3><p>我们也可以使用递归的方式实现删除，如下</p><p>其中，后继节点为右子树的最小节点，由findMin函数实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deleteNode</span><span class="hljs-params">(NodePtr &amp;root, <span class="hljs-type">int</span> value)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!root)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (value &lt; root-&gt;data)<br>        &#123;<br>            <span class="hljs-built_in">deleteNode</span>(root-&gt;left, value);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &gt; root-&gt;data)<br>        &#123;<br>            <span class="hljs-built_in">deleteNode</span>(root-&gt;right, value);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-comment">// 情况1&amp;情况2的一部分：为叶子节点或只有右节点</span><br>            <span class="hljs-keyword">if</span> (!root-&gt;left)<br>            &#123;<br>                NodePtr temp = root-&gt;right;<br>                <span class="hljs-keyword">delete</span> root;<br>                root = temp;<br>            &#125;<br>            <span class="hljs-comment">// 只有左节点</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!root-&gt;right)<br>            &#123;<br>                NodePtr temp = root-&gt;left;<br>                <span class="hljs-keyword">delete</span> root;<br>                root = temp;<br>            &#125;<br>            <span class="hljs-comment">// 作于节点都没有，使用后继节点代替，并在右子树中删除后继节点</span><br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                NodePtr temp = <span class="hljs-built_in">findMin</span>(root-&gt;right);<br>                root-&gt;data = temp-&gt;data;<br>                <span class="hljs-built_in">deleteNode</span>(root-&gt;right, temp-&gt;data);<br>            &#125;<br>        &#125;<br>    &#125;<br><br><span class="hljs-function">NodePtr <span class="hljs-title">findMin</span><span class="hljs-params">(NodePtr node)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (node-&gt;left) &#123;<br>        node = node-&gt;left;<br>    &#125;<br>    <span class="hljs-keyword">return</span> node;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="手撕二叉平衡树"><a href="#手撕二叉平衡树" class="headerlink" title="手撕二叉平衡树"></a>手撕二叉平衡树</h2><h3 id="节点定义-1"><a href="#节点定义-1" class="headerlink" title="节点定义"></a>节点定义</h3><p>由于我们需要计算节点的平衡因子，因此在定义节点时，需要额外定义节点的高度，以方便平衡因子的计算。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    <span class="hljs-type">int</span> data;<br>    Node *left;<br>    Node *right;<br>    <span class="hljs-type">int</span> height;<br>&#125;;<br></code></pre></td></tr></table></figure><p>相应的，我们需要实现高度的计算与更新、平衡因子的计算等函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getHeight</span><span class="hljs-params">(NodePtr node)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!node)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> node-&gt;height;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getBalanceFactor</span><span class="hljs-params">(NodePtr node)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!node)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">getHeight</span>(node-&gt;left) - <span class="hljs-built_in">getHeight</span>(node-&gt;right);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">updateHeight</span><span class="hljs-params">(NodePtr node)</span></span><br><span class="hljs-function">    </span>&#123;<br>        node-&gt;height = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">getHeight</span>(node-&gt;left), <span class="hljs-built_in">getHeight</span>(node-&gt;right)) + <span class="hljs-number">1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="左旋与右旋-1"><a href="#左旋与右旋-1" class="headerlink" title="左旋与右旋"></a>左旋与右旋</h3><p>二叉平衡树的左旋与右旋除了需要实现定义好的行为之外，还需要对节点高度进行重新计算：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">NodePtr <span class="hljs-title">leftRotate</span><span class="hljs-params">(NodePtr node)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// rotate</span><br>        NodePtr right = node-&gt;right;<br>        NodePtr rleft = right-&gt;left;<br><br>        right-&gt;left = node;<br>        node-&gt;right = rleft;<br><br>        <span class="hljs-comment">// update height</span><br>        <span class="hljs-comment">// only child-changed node need to update</span><br>        <span class="hljs-built_in">updateHeight</span>(node);<br><span class="hljs-built_in">updateHeight</span>(right);<br><br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br><br>    <span class="hljs-function">NodePtr <span class="hljs-title">rightRotate</span><span class="hljs-params">(NodePtr node)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// rotate</span><br>        NodePtr left = node-&gt;left;<br>        NodePtr lright = left-&gt;right;<br><br>        left-&gt;right = node;<br>        node-&gt;left = lright;<br><br>        <span class="hljs-comment">// update height</span><br>        <span class="hljs-comment">// only child-changed node need to update</span><br>        <span class="hljs-built_in">updateHeight</span>(node);<br><span class="hljs-built_in">updateHeight</span>(left);<br><br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="查找-1"><a href="#查找-1" class="headerlink" title="查找"></a>查找</h3><p>查找的实现与二叉搜索树相同</p><h3 id="插入-3"><a href="#插入-3" class="headerlink" title="插入"></a>插入</h3><p>我们使用递归的方式实现插入，在前序部分插入，后序部分处理平衡逻辑，这样就实现了自下至上的平衡。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">NodePtr <span class="hljs-title">insertHelper</span><span class="hljs-params">(NodePtr node, <span class="hljs-type">int</span> data)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 1. 二叉搜索树式插入</span><br>        <span class="hljs-comment">// 叶子节点插入位置</span><br>        <span class="hljs-keyword">if</span> (!node)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">createNewNode</span>(data);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (data &lt; node-&gt;data)<br>        &#123;<br>            node-&gt;left = <span class="hljs-built_in">insertHelper</span>(node-&gt;left, data);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data &gt; node-&gt;data)<br>        &#123;<br>            node-&gt;right = <span class="hljs-built_in">insertHelper</span>(node-&gt;right, data);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br><br>        <span class="hljs-comment">// 后序方式，更新当前节点平衡因子</span><br>        <span class="hljs-comment">// 实际上在插入节点的祖父节点处才会进入以下的计算</span><br>        <span class="hljs-built_in">updateHeight</span>(node);<br>        <span class="hljs-type">int</span> balanceFactor = <span class="hljs-built_in">getBalanceFactor</span>(node);<br><br>        <span class="hljs-comment">// 情況1a</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &gt; <span class="hljs-number">1</span> &amp;&amp; data &gt; node-&gt;left-&gt;data)<br>        &#123;<br>            node-&gt;left = <span class="hljs-built_in">leftRotate</span>(node-&gt;left);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">rightRotate</span>(node);<br>        &#125;<br>        <span class="hljs-comment">// 情況1b</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &gt; <span class="hljs-number">1</span> &amp;&amp; data &lt; node-&gt;left-&gt;data)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">rightRotate</span>(node);<br>        &#125;<br>        <span class="hljs-comment">// 情況2a</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &lt; <span class="hljs-number">-1</span> &amp;&amp; data &lt; node-&gt;right-&gt;data)<br>        &#123;<br>            node-&gt;right = <span class="hljs-built_in">rightRotate</span>(node-&gt;right);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">leftRotate</span>(node);<br>        &#125;<br>        <span class="hljs-comment">// 情況2b</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &lt; <span class="hljs-number">-1</span> &amp;&amp; data &gt; node-&gt;right-&gt;data)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">leftRotate</span>(node);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br><br><span class="hljs-function">NodePtr <span class="hljs-title">insertNode</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">insertHelper</span>(<span class="hljs-keyword">this</span>-&gt;root, data);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="删除-3"><a href="#删除-3" class="headerlink" title="删除"></a>删除</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">NodePtr <span class="hljs-title">deleteHelper</span><span class="hljs-params">(NodePtr node, <span class="hljs-type">int</span> data)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 1. 二叉搜索树方式删除节点</span><br>        <span class="hljs-keyword">if</span> (!node)<br>        &#123;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (data &lt; node-&gt;data)<br>        &#123;<br>            node-&gt;left = <span class="hljs-built_in">deleteHelper</span>(node-&gt;left, data);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data &gt; node-&gt;data)<br>        &#123;<br>            node-&gt;right = <span class="hljs-built_in">deleteHelper</span>(node-&gt;right, data);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (!root-&gt;left)<br>            &#123;<br>                NodePtr temp = root-&gt;right;<br>                <span class="hljs-keyword">delete</span> root;<br>                root = temp;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!root-&gt;right)<br>            &#123;<br>                NodePtr temp = root-&gt;left;<br>                <span class="hljs-keyword">delete</span> root;<br>                root = temp;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                NodePtr temp = <span class="hljs-built_in">findMin</span>(root-&gt;right);<br>                root-&gt;data = temp-&gt;data;<br>                <span class="hljs-built_in">deleteHelper</span>(root-&gt;right, temp-&gt;data);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 2.后序方式，更新当前节点平衡因子并进行平衡修正</span><br>        <span class="hljs-built_in">updateHeight</span>(node);<br>        <span class="hljs-type">int</span> balanceFactor = <span class="hljs-built_in">getBalanceFactor</span>(node);<br><br>        <span class="hljs-comment">// 情況1a</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &gt; <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-built_in">getBalanceFactor</span>(node-&gt;left) &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            node-&gt;left = <span class="hljs-built_in">leftRotate</span>(node-&gt;left);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">rightRotate</span>(node);<br>        &#125;<br>        <span class="hljs-comment">// 情況1b</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &gt; <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-built_in">getBalanceFactor</span>(node-&gt;left) &gt;= <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">rightRotate</span>(node);<br>        &#125;<br><br>        <span class="hljs-comment">// 情況2a</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &lt; <span class="hljs-number">-1</span> &amp;&amp; <span class="hljs-built_in">getBalanceFactor</span>(node-&gt;right) &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            node-&gt;right = <span class="hljs-built_in">rightRotate</span>(node-&gt;right);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">leftRotate</span>(node);<br>        &#125;<br>        <span class="hljs-comment">// 情況2b</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &lt; <span class="hljs-number">-1</span> &amp;&amp; <span class="hljs-built_in">getBalanceFactor</span>(node-&gt;right) &lt;= <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">leftRotate</span>(node);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">NodePtr  <span class="hljs-title">insertNode</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">insertHelper</span>(<span class="hljs-keyword">this</span>-&gt;root, data);<br>    &#125;<br><br>    <span class="hljs-function">NodePtr <span class="hljs-title">deleteNode</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">deleteHelper</span>(<span class="hljs-keyword">this</span>-&gt;root, data);<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最后我们再用一张思维导图总结这篇博客的内容</p><p><img src="/images/posts/BST/Untitled%2011.png"></p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p>本文代码已在github上开源，包含c++，python(待补充), golang(待补充)的红黑树代码</p><p><a href="https://github.com/Yuxin1999/star-code">https://github.com/Yuxin1999/star-code</a></p><h3 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h3><ol><li><a href="https://www.programiz.com/dsa/avl-tree">https://www.programiz.com/dsa/avl-tree</a> </li><li>萨尼 S, 王立柱, 刘志红 数据结构、算法与应用 C++语言描述[M]. 北京: 机械工业出版社, 2015.</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>DSA</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小星学DSA丨一文学完二叉树（基础篇）</title>
    <link href="/2023/04/10/15-09-00/"/>
    <url>/2023/04/10/15-09-00/</url>
    
    <content type="html"><![CDATA[<p>这是小星学DSA系列的第二篇，我会记录我学习的过程与理解，希望能够帮到你。</p><p>本篇文章的思维导图如下，在文章的末尾，我会给出更加详细的思维导图。</p><p><img src="/images/posts/bintree/Untitled.png"></p><p>上篇我们一上来就介绍了红黑树，原因是红黑树在sde岗位面试中的重要分量。</p><p>当然，基础也要打好，因此这篇文章，我们来学习一下二叉树的基础。</p><h1 id="二叉树的定义与性质"><a href="#二叉树的定义与性质" class="headerlink" title="二叉树的定义与性质"></a>二叉树的定义与性质</h1><h2 id="定义与表示"><a href="#定义与表示" class="headerlink" title="定义与表示"></a>定义与表示</h2><p>二叉树是一种特殊类型的通用树，它的每个节点最多可以有两个子节点，两个子节点是有序的，分为左子节点与右子节点。</p><h3 id="链式表示（常用）"><a href="#链式表示（常用）" class="headerlink" title="链式表示（常用）"></a>链式表示（常用）</h3><p>链式表示是通过指针把分布在散落在各个地址的节点串联一起。</p><p>二叉树通常由指向根节点的指针表示，二叉树的每个节点都包括以下三个部分：</p><ol><li>节点的值</li><li>指向左子节点的指针</li><li>指向右子节点的指针</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> data;<br>    node* left;<br>    node* right;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="顺序表示"><a href="#顺序表示" class="headerlink" title="顺序表示"></a>顺序表示</h3><p>顺序表示的元素在内存是连续分布的。</p><p><strong>如果父节点的数组下标是 i，那么它的左孩子就是 i * 2 + 1，右孩子就是 i * 2 + 2。</strong></p><h2 id="二叉树的基本概念"><a href="#二叉树的基本概念" class="headerlink" title="二叉树的基本概念"></a>二叉树的基本概念</h2><p>以下列出了二叉树中的一些基本概念</p><table><thead><tr><th>概念</th><th>释义</th></tr></thead><tbody><tr><td>根节点</td><td>二叉树的顶端节点，没有父节点</td></tr><tr><td>父节点&#x2F;子节点</td><td>有子节点的节点被称为父节点；连接在父节点下面的节点被称为子节点</td></tr><tr><td>叶子节点</td><td>没有子节点的节点被称为叶子节点</td></tr><tr><td>兄弟节点</td><td>具有相同父节点的节点之间互为兄弟节点</td></tr><tr><td>深度</td><td>从根节点到当前节点的路径长度被称为深度</td></tr><tr><td>高度</td><td>从当前节点到叶子节点的最长路径长度被称为高度</td></tr></tbody></table><h2 id="二叉树的分类"><a href="#二叉树的分类" class="headerlink" title="二叉树的分类"></a>二叉树的分类</h2><h3 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h3><p>若高度为h的二叉树恰好有$2^h -1$个元素，则称其为<strong>满二叉树</strong>（顾名思义，满了的二叉树）</p><p><img src="/images/posts/bintree/Untitled%201.png"></p><h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><p>如果所有叶子节点都位于相同的高度，则称为<strong>完全二叉树</strong>（只有最后一层没满的二叉树）</p><p><img src="/images/posts/bintree/Untitled%202.png"></p><h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><p>所有节点的值唯一，且左子树的值都小于该节点的值，右子树的值都大于该节点的值。</p><p><img src="/images/posts/bintree/Untitled%203.png"></p><h3 id="平衡二叉树（AVL树）"><a href="#平衡二叉树（AVL树）" class="headerlink" title="平衡二叉树（AVL树）"></a>平衡二叉树（AVL树）</h3><p>左子树和右子树高度差至多为1的二叉搜索树</p><p><img src="/images/posts/bintree/Untitled%204.png"></p><h2 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h2><ol><li>含n个元素的二叉树有n-1条边</li><li>若二叉树的高度为h，它最少有h个元素，最多有$2^h -1$个元素</li><li>若二叉树有n个元素，它的最大高度为n，最下高度为$log_2(n+1)$ </li><li>对于完全二叉树的一个元素i，其父节点为[i&#x2F;2]，左孩子为2i（或者不存在），右孩子为2i+1（或不存在）</li></ol><p>这些性质证明起来都不难，初中数学难度，这里不再赘述。</p><h1 id="二叉树的操作"><a href="#二叉树的操作" class="headerlink" title="二叉树的操作"></a>二叉树的操作</h1><h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><p>二叉树的遍历是老生常谈了，我在实习的面试里遇到过无数次（不过出这个一般也和放水差不多了）</p><p>二叉树的遍历有四种方式：前序、中序、后序、层序</p><blockquote><p>💫<strong>小星说</strong>丨前中后序的区分方法——父节点在什么时候被访问（前序：先访问父节点，再访问左子树和右子树；中序：先访问左子树，再访问父节点，再访问右子树；后序：先访问左子树，再访问右子树，最后访问父节点）</p></blockquote><h3 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h3><p>二叉树前序遍历的步骤如下：</p><ol><li>访问根节点</li><li>以前序遍历左子树</li><li>以前序遍历右子树</li></ol><p><img src="/images/posts/bintree/Untitled%205.png"></p><p>具体到代码实现，我们通常可以使用递归方法（常用）或者迭代方法实现。</p><ol><li>递归方法非常简单粗暴，除了一个非空判定之外，与上面的步骤是一样的</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preOrderTravesal</span><span class="hljs-params">(NodePtr node)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        cout &lt;&lt; node-&gt;data &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-built_in">preOrderTravesal</span>(node-&gt;left);<br>        <span class="hljs-built_in">preOrderTravesal</span>(node-&gt;right);<br>    &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>迭代法则需要用到栈，每次访问栈顶元素，并将它的右节点和左节点依次放入栈中，从而实现前序遍历的逻辑。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preOrderIteration</span><span class="hljs-params">(NodePtr node)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        stack&lt;NodePtr&gt; nodeStack;<br>        nodeStack.<span class="hljs-built_in">push</span>(node);<br><br>        <span class="hljs-keyword">while</span> (!nodeStack.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            NodePtr currnode = nodeStack.<span class="hljs-built_in">top</span>();<br>            nodeStack.<span class="hljs-built_in">pop</span>();<br><br>            cout &lt;&lt; currnode-&gt;data &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>            <span class="hljs-comment">// 先进后出，因此要先放右节点，再放子节点</span><br>            <span class="hljs-keyword">if</span> (currnode-&gt;right != <span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                nodeStack.<span class="hljs-built_in">push</span>(currnode-&gt;right);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (currnode-&gt;left != <span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                nodeStack.<span class="hljs-built_in">push</span>(currnode-&gt;left);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>知道了前序遍历，中序遍历的思路也就很清楚了</p><p>二叉树中序遍历的步骤：</p><ul><li>按顺序遍历左子树</li><li>访问根节点</li><li>按顺序遍历右子树</li></ul><p><img src="/images/posts/bintree/Untitled%206.png"></p><p>中序遍历同样可以使用递归法和迭代法实现</p><ol><li>递归法也没什么好说的，简单粗暴</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inorderRecursion</span><span class="hljs-params">(NodePtr node)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-built_in">inorderRecursion</span>(node-&gt;left);<br>        cout &lt;&lt; node-&gt;data &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-built_in">inorderRecursion</span>(node-&gt;right);<br>    &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>中序遍历的迭代法和前序遍历不同的是，<strong>这里的栈保存的是所有的根节点</strong>，一路向左一路保存根节点，<strong>当到达最左处时，可以从栈中取出一个根节点来访问，之后再遍历右子树</strong>，也是用同样的方法。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inorderIteration</span><span class="hljs-params">(NodePtr node)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        stack&lt;NodePtr&gt; nodeStack;<br>        NodePtr currNode = node;<br><br>        <span class="hljs-keyword">while</span> (currNode != <span class="hljs-literal">nullptr</span> || !nodeStack.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-comment">// Traverse left subtree</span><br>            <span class="hljs-keyword">while</span> (currNode != <span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                nodeStack.<span class="hljs-built_in">push</span>(currNode);<br>                currNode = currNode-&gt;left;<br>            &#125;<br><br>            <span class="hljs-comment">// Process current node</span><br>            currNode = nodeStack.<span class="hljs-built_in">top</span>();<br>            nodeStack.<span class="hljs-built_in">pop</span>();<br>            cout &lt;&lt; currNode-&gt;data &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br>            <span class="hljs-comment">// Traverse right subtree</span><br>            currNode = currNode-&gt;right;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>二叉树后序遍历的步骤如下：</p><ul><li>按后序遍历左子树</li><li>按后序遍历右子树</li><li>访问根节点</li></ul><p><img src="/images/posts/bintree/Untitled%207.png"></p><p>同样可以使用递归法和迭代法来实现</p><ol><li>递归法还是一样</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">postorderRecursion</span><span class="hljs-params">(NodePtr node)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-built_in">postorderRecursion</span>(node-&gt;left);<br>        <span class="hljs-built_in">postorderRecursion</span>(node-&gt;right);<br>        cout &lt;&lt; node-&gt;data &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>迭代法中，我们仍使用一个栈保存待遍历的根节点，而当我们从栈中拿出一个待访问的根节点时，有两种情况：1. 我们刚从左边上来，要遍历右子树2. 我们已经遍历了右子树，要访问当前根节点，因此需要一个指针保存上一次访问的节点，以确定右子树是否已被访问</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">postorderIteration</span><span class="hljs-params">(NodePtr node)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        stack&lt;NodePtr&gt; nodeStack;<br>        NodePtr currNode = node;<br>        NodePtr lastVisitedNode = <span class="hljs-literal">nullptr</span>;<br><br>        <span class="hljs-keyword">while</span> (currNode != <span class="hljs-literal">nullptr</span> || !nodeStack.<span class="hljs-built_in">empty</span>())&#123;<br>            <span class="hljs-comment">// 一路向左</span><br>            <span class="hljs-keyword">while</span> (currNode != <span class="hljs-literal">nullptr</span>)&#123;<br>                nodeStack.<span class="hljs-built_in">push</span>(currNode);<br>                currNode = currNode-&gt;left;<br>            &#125;<br><br>            NodePtr peekNode = nodeStack.<span class="hljs-built_in">top</span>();<br>            <span class="hljs-comment">// 判断栈顶节点的右节点是否被访问过</span><br>            <span class="hljs-keyword">if</span> (peekNode-&gt;right != <span class="hljs-literal">nullptr</span> &amp;&amp; peekNode-&gt;right != lastVisitedNode)&#123;<br>                <span class="hljs-comment">// 遍历右子树</span><br>                currNode = currNode-&gt;right;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">// 访问当前节点</span><br>                cout &lt;&lt; peekNode-&gt;data &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>                lastVisitedNode = nodeStack.<span class="hljs-built_in">top</span>();<br>                nodeStack.<span class="hljs-built_in">pop</span>();<br>            &#125;<br><br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>我们注意到后序遍历（左右中）其实可以由变种的前序遍历（中右左）反转得到，因此可以使用反转的方法, cr<a href="https://programmercarl.com/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%BF%AD%E4%BB%A3%E9%81%8D%E5%8E%86.html#%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86-%E8%BF%AD%E4%BB%A3%E6%B3%95">《代码随想录》</a></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">postorderTraversal</span><span class="hljs-params">(NodePtr node)</span></span><br><span class="hljs-function">    </span>&#123;<br>        stack&lt;NodePtr&gt; stack;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        stack.<span class="hljs-built_in">push</span>(node);<br>        vector&lt;<span class="hljs-type">int</span>&gt; result;<br>        <span class="hljs-keyword">while</span> (!stack.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            NodePtr currnode = stack.<span class="hljs-built_in">top</span>();<br>            stack.<span class="hljs-built_in">pop</span>();<br>            result.<span class="hljs-built_in">push_back</span>(node-&gt;data);<br>            <span class="hljs-keyword">if</span> (currnode-&gt;left)<br>            &#123;<br>                stack.<span class="hljs-built_in">push</span>(node-&gt;left);<br>            &#125; <span class="hljs-comment">// 相对于前序遍历，这更改一下入栈顺序</span><br>            <span class="hljs-keyword">if</span> (currnode-&gt;right)<br>            &#123;<br>                stack.<span class="hljs-built_in">push</span>(node-&gt;right);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">reverse</span>(result.<span class="hljs-built_in">begin</span>(), result.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">// 将结果反转之后就是左右中的顺序了</span><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h3><p>层序遍历理解上更简单了，就是一层一层的遍历。</p><p><img src="/images/posts/bintree/Untitled%208.png"></p><p>层序遍历同样可以使用迭代法和递归法，只不过这里迭代法可能更常用一些</p><ol><li>迭代法，使用一个队列存储待访问的节点，每次访问将左节点和右节点放入队列内，即可实现一层一层的遍历</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">levelOrderIteration</span><span class="hljs-params">(NodePtr node)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        queue&lt;NodePtr&gt; nodeQueue;<br>        nodeQueue.<span class="hljs-built_in">push</span>(node);<br><br>        <span class="hljs-keyword">while</span> (!nodeQueue.<span class="hljs-built_in">empty</span>()) &#123;<br>            NodePtr currNode = nodeQueue.<span class="hljs-built_in">front</span>();<br>            nodeQueue.<span class="hljs-built_in">pop</span>();<br>            cout &lt;&lt; currNode-&gt;data &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br>            <span class="hljs-keyword">if</span> (currNode-&gt;left != <span class="hljs-literal">nullptr</span>) &#123;<br>                nodeQueue.<span class="hljs-built_in">push</span>(currNode-&gt;left);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (currNode-&gt;right != <span class="hljs-literal">nullptr</span>) &#123;<br>                nodeQueue.<span class="hljs-built_in">push</span>(currNode-&gt;right);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>递归法：层序遍历的递归法，需要记录每层的高度，通过高度储存每一层的节点</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">levelOrderRecursion</span><span class="hljs-params">(NodePtr cur, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; &amp;result, <span class="hljs-type">int</span> depth)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (cur == <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (result.<span class="hljs-built_in">size</span>() == depth)<br>            result.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;());<br>        result[depth].<span class="hljs-built_in">push_back</span>(cur-&gt;data);<br>        <span class="hljs-built_in">levelOrderRecursion</span>(cur-&gt;left, result, depth + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">levelOrderRecursion</span>(cur-&gt;right, result, depth + <span class="hljs-number">1</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="二叉树的搜索"><a href="#二叉树的搜索" class="headerlink" title="二叉树的搜索"></a>二叉树的搜索</h2><p>二叉树的搜索，二叉树的最值，二叉树的高度，二叉树的元素数目等操作均建立在二叉树的遍历基础上，选一种合适的遍历方法即可实现，这里不再赘述。</p><h2 id="二叉树的重构"><a href="#二叉树的重构" class="headerlink" title="二叉树的重构"></a>二叉树的重构</h2><p>二叉树的重构，即从遍历的结果里重新构造一棵二叉树。</p><p>二叉树的重构需要两种遍历结果的综合，但是通常不能从前序和后序结果里重构二叉树，因为不能确定根节点的左子树和右子树信息。</p><h3 id="从前序与中序遍历结果中重构二叉树"><a href="#从前序与中序遍历结果中重构二叉树" class="headerlink" title="从前序与中序遍历结果中重构二叉树"></a>从前序与中序遍历结果中重构二叉树</h3><p>从前序与中序遍历结果中重构二叉树分为以下几步：</p><ol><li>从前序遍历结果中获得根节点值（前序遍历的第一个元素）</li><li>找到该值在中序遍历结果中的索引rootIdx</li><li>借助rootIdx，将前序结果和中序结果都切分成左子树的结果和右子树的结果</li><li>递归实现重构</li></ol><p><img src="/images/posts/bintree/Untitled%209.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">NodePtr <span class="hljs-title">buildTreeFromPreIn</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;preorder, vector&lt;<span class="hljs-type">int</span>&gt; &amp;inorder)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (preorder.<span class="hljs-built_in">empty</span>() || inorder.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 找到根节点在中序遍历中的索引</span><br>        <span class="hljs-type">int</span> rootVal = preorder[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> rootIdx = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (inorder[rootIdx] != rootVal)<br>        &#123;<br>            rootIdx++;<br>        &#125;<br>        NodePtr root = <span class="hljs-keyword">new</span> node;<br>        root-&gt;data = rootVal;<br><br>        <span class="hljs-comment">// 切割成左子树和右子树</span><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">leftInorder</span><span class="hljs-params">(inorder.begin(), inorder.begin() + rootIdx)</span></span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">rightInorder</span><span class="hljs-params">(inorder.begin() + rootIdx + <span class="hljs-number">1</span>, inorder.end())</span></span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">leftPreorder</span><span class="hljs-params">(preorder.begin() + <span class="hljs-number">1</span>, preorder.begin() + <span class="hljs-number">1</span> + rootIdx)</span></span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">rightPreorder</span><span class="hljs-params">(preorder.begin() + <span class="hljs-number">1</span> + rootIdx, preorder.end())</span></span>;<br><br>        root-&gt;left = <span class="hljs-built_in">buildTreeFromPreIn</span>(leftPreorder, leftInorder);<br>        root-&gt;right = <span class="hljs-built_in">buildTreeFromPreIn</span>(rightPreorder, rightInorder);<br><br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="从中序和后序结果中重构二叉树"><a href="#从中序和后序结果中重构二叉树" class="headerlink" title="从中序和后序结果中重构二叉树"></a>从中序和后序结果中重构二叉树</h3><p>中序和后序重构二叉树的方法类似:</p><ol><li>从后序遍历结果中获得根节点值（后序遍历的第一个元素）</li><li>找到该值在中序遍历结果中的索引rootIdx</li><li>借助rootIdx，将前序结果和中序结果都切分成左子树的结果和右子树的结果</li><li>递归实现重构</li></ol><p><img src="/images/posts/bintree/Untitled%2010.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">NodePtr <span class="hljs-title">buildTreeFromInPost</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;inorder, vector&lt;<span class="hljs-type">int</span>&gt; &amp;postorder)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (inorder.<span class="hljs-built_in">empty</span>() || postorder.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 找到根节点在中序遍历中的索引</span><br>        <span class="hljs-type">int</span> rootVal = postorder.<span class="hljs-built_in">back</span>();<br>        <span class="hljs-type">int</span> rootIdx = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (inorder[rootIdx] != rootVal)<br>        &#123;<br>            rootIdx++;<br>        &#125;<br><br>        NodePtr root = <span class="hljs-keyword">new</span> node;<br>        root-&gt;data = rootVal;<br><br>        <span class="hljs-comment">// 切割成左子树和右子树</span><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">leftInorder</span><span class="hljs-params">(inorder.begin(), inorder.begin() + rootIdx)</span></span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">rightInorder</span><span class="hljs-params">(inorder.begin() + rootIdx + <span class="hljs-number">1</span>, inorder.end())</span></span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">leftPostorder</span><span class="hljs-params">(postorder.begin(), postorder.begin() + rootIdx)</span></span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">rightPostorder</span><span class="hljs-params">(postorder.begin() + rootIdx, postorder.end() - <span class="hljs-number">1</span>)</span></span>;<br><br>        root-&gt;left = <span class="hljs-built_in">buildTreeFromInPost</span>(leftInorder, leftPostorder);<br>        root-&gt;right = <span class="hljs-built_in">buildTreeFromInPost</span>(rightInorder, rightPostorder);<br><br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="二叉树操作的时空复杂度"><a href="#二叉树操作的时空复杂度" class="headerlink" title="二叉树操作的时空复杂度"></a>二叉树操作的时空复杂度</h2><p>最后总结一下二叉树基本操作的时空复杂度</p><table><thead><tr><th>操作</th><th>时间复杂度</th><th>空间复杂度</th></tr></thead><tbody><tr><td>遍历（递归）</td><td>O(n)</td><td>O(h),递归栈的最大深度为树的高度</td></tr><tr><td>遍历（迭代）</td><td>O(n)</td><td>前中后层次具体分析</td></tr><tr><td>搜索</td><td>O(n)</td><td>O(1)</td></tr><tr><td>插入&#x2F;删除</td><td>O(n)</td><td>O(1)</td></tr><tr><td>重构</td><td>O(n)</td><td>O(h),递归栈的最大深度为树的高度</td></tr></tbody></table><p>这里都是将二叉树视作退化的链表来计算的，如果二叉树是搜索树或平衡树，则时间复杂度进一步降低。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最后我们再给出本篇文章的详细内容导图</p><p><img src="/images/posts/bintree/Untitled%2011.png"></p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p>本文代码已在github上开源，包含c++，python(待补充), golang(待补充)的二叉树及其操作代码，如果你觉得这篇文章对你有帮助的话，还请帮忙在github上点个Star，谢谢！</p><p><a href="https://github.com/Yuxin1999/star-code/tree/main/DSA/BinaryTree">Github地址</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>清华大学计算机系邓俊辉教授DSA课件[05.二叉树]，<a href="http://dsa.cs.tsinghua.edu.cn/~deng/ds/dsacpp/">下载地址</a></li><li>萨尼 S, 王立柱, 刘志红 数据结构、算法与应用 C++语言描述[M]. 北京: 机械工业出版社, 2015.</li><li><a href="https://programmercarl.com/">代码随想录</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>DSA</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小星学DSA丨一文学完红黑树（简明教程）</title>
    <link href="/2023/04/07/10-00-00/"/>
    <url>/2023/04/07/10-00-00/</url>
    
    <content type="html"><![CDATA[<p>这是小星学DSA系列的第一篇，我会记录我学习的过程与理解，希望能够帮到你。</p><p>本篇文章的思维导图如下，在文章的末尾，我会给出更加详细的思维导图。</p><p><img src="/images/posts/rbtree/Untitled.png"></p><h1 id="红黑树的定义"><a href="#红黑树的定义" class="headerlink" title="红黑树的定义"></a>红黑树的定义</h1><h2 id="红黑树的概念与性质"><a href="#红黑树的概念与性质" class="headerlink" title="红黑树的概念与性质"></a>红黑树的概念与性质</h2><ul><li>红黑树是一棵节点为黑色或红色的二叉搜索树；</li><li>性质1：根节点与外部节点（叶子节点的空子节点）为黑色</li><li>性质2：从根节点到外部节点的路径上，不能有两个连续的红色节点</li><li>性质3：从根节点到外部节点的路径上，黑色节点的数目相同</li></ul><blockquote><p>💫 小星说丨一句话概括红黑树性质：<strong>头尾黑，红红不相连，黑节点数目相等</strong></p></blockquote><h2 id="红黑树的复杂度及证明"><a href="#红黑树的复杂度及证明" class="headerlink" title="红黑树的复杂度及证明"></a>红黑树的复杂度及证明</h2><ul><li>红黑树的空间复杂度为O(n)</li><li>红黑树的时间复杂度为: O(lgn)</li></ul><h3 id="证明红黑树的时间复杂度"><a href="#证明红黑树的时间复杂度" class="headerlink" title="证明红黑树的时间复杂度"></a>证明红黑树的时间复杂度</h3><ol><li>等价命题：<strong>一棵含有n个节点的红黑树的高度至多为2log(n+1)</strong></li><li>逆否命题：高度为h的红黑树，其节点至少为$2^{h&#x2F;2}-1$个</li><li>设节点x路径中黑节点的数量为bh(x)，则上述命题为：高度为h的红黑树，其黑节点至少为$2^{bh(x)}-1$个</li><li>数学归纳法证明：<ol><li>h &#x3D; 0, 易证</li><li>假设h&#x3D;H-1时等式成立，则h&#x3D;H时，根节点的两个子节点高度均为H-1，则根节点的黑节点数量至少为$2*2^{bh(root.child)}-2+1&#x3D;2^{bh{(root)}}-1$,等式成立</li></ol></li></ol><blockquote><p>💫 小星说丨用高度推节点数地计算和理解更容易</p></blockquote><h1 id="红黑树的操作"><a href="#红黑树的操作" class="headerlink" title="红黑树的操作"></a>红黑树的操作</h1><p>红黑树的作为树的基本操作：查找、插入、删除</p><p>为了维护红黑树性质需要的操作：左旋、右旋</p><h2 id="红黑树的左旋与右旋"><a href="#红黑树的左旋与右旋" class="headerlink" title="红黑树的左旋与右旋"></a>红黑树的左旋与右旋</h2><h3 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h3><p>左旋即被旋转的节点（根节点）变为了右节点的左子节点，右节点代替了它的位置，而右节点原先的左子节点则变为了被旋转节点的右节点</p><p><img src="/images/posts/rbtree/Untitled%201.png"></p><h3 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h3><p>右旋即被旋转的节点（根节点）变为了左节点的右子节点，左节点代替了它的位置，而左节点原先的右子节点则变为了被旋转节点的左节点</p><p><img src="/images/posts/rbtree/Untitled%202.png"></p><blockquote><p>💫 小星说丨<strong>左旋：被左旋的节点变为左子节点；右旋：被右旋的节点变为右子节点</strong>。想象被旋转的节点是一个跷跷板的支点，左旋即把右节点翘上去，右旋即把左节点翘上去，多出来的节点由支点接住。</p></blockquote><h2 id="红黑树的查找"><a href="#红黑树的查找" class="headerlink" title="红黑树的查找"></a>红黑树的查找</h2><p>在查找上，红黑树与普通的二叉搜索树完全一样，不一样的点在于红黑树的查找复杂度为O(lgn)。</p><p>二叉搜索树的查找非常简单，只要将查找值与当前节点的值比较，大则向右找，小则向左找，这里不再赘述。</p><h2 id="红黑树的插入"><a href="#红黑树的插入" class="headerlink" title="红黑树的插入"></a>红黑树的插入</h2><p>红黑树的插入总共三步：</p><ol><li>将红黑树当作二叉查找树，插入节点；</li><li>将插入的节点着色为红色；</li><li>通过旋转着色，使之重新成为一颗红黑树。</li></ol><p>接下来我们详细说明一下这三步：</p><h3 id="插入二叉查找树"><a href="#插入二叉查找树" class="headerlink" title="插入二叉查找树"></a>插入二叉查找树</h3><p>首先我们不考虑颜色，而是根据二叉查找树的性质，找到红黑树的插入点。</p><p>我们用一个节点指针遍历二叉树，反复与节点比较，大则向右，小则向左，直到到达null；</p><h3 id="插入节点着色为红色"><a href="#插入节点着色为红色" class="headerlink" title="插入节点着色为红色"></a>插入节点着色为红色</h3><p>为了在插入时不破坏红黑树的性质3（从根节点到外部节点的路径上，黑色节点的数目相同），我们将该节点着色为红色，接下来，只要解决红-红冲突，便能完成插入。</p><h3 id="插入修正"><a href="#插入修正" class="headerlink" title="插入修正"></a>插入修正</h3><blockquote><p>💫 小星说丨<strong>一句话理解红黑树的插入修正：红色矛盾向上转移，直到移到根节点变为黑色</strong>。因为矛盾要向上转移，因此我们需要考虑上一层长辈节点的状态，即父节点与叔叔节点。</p></blockquote><p>这里，我给插入修正的情况做了一个总结表</p><table><thead><tr><th>当前节点</th><th>父节点</th><th>叔叔节点</th><th>当前节点与父亲节点的偏向</th><th>操作</th></tr></thead><tbody><tr><td>根节点</td><td></td><td></td><td></td><td>染黑</td></tr><tr><td>红</td><td>黑</td><td></td><td></td><td>无需修正</td></tr><tr><td>红</td><td>红</td><td>红</td><td></td><td>父节点和叔叔节点变黑，祖父节点变红，开始解决祖父节点可能存在的矛盾</td></tr><tr><td>红</td><td>红</td><td>黑</td><td>不一致</td><td>当前节点通过左旋或右旋成为原父节点的父节点，使二者朝向一致，此时将原父节点当作当前节点，再次判断当前节点状态。</td></tr><tr><td>红</td><td>红</td><td>黑</td><td>一致</td><td>父节点通过左旋或右旋成为原祖父节点的父节点，父节点变为黑色，原祖父节点变为红色</td></tr></tbody></table><p>可以这样理解红黑树插入修正的逻辑：</p><ol><li>父亲红，叔叔红，那么就交换父亲层和祖父层的颜色，将红色矛盾向上转移至祖父，而父亲和叔叔这一层可以变为黑色；</li><li>父亲红，叔叔黑，由于性质3的限制，不能直接交换（下一层需要两个变黑才能换上一层一个变红），为了只变父亲这边不变叔叔那边，于是使用左旋或右旋来交换父亲和祖父的颜色；</li><li>旋转时要保持当前节点和父亲节点的父子关系，所以要求偏向一致。</li></ol><blockquote><p>💫 小星说丨红黑树插入修正达到以下三种情况，即为最终情况，可以彻底解决矛盾，其他的操作是为了达到这三种状态。</p></blockquote><ol><li>当前节点为根节点</li><li>当前节点的父节点为黑色</li><li>双红偏向一致，叔叔黑色</li></ol><p><img src="/images/posts/rbtree/Untitled%203.png"></p></aside><h2 id="红黑树的删除"><a href="#红黑树的删除" class="headerlink" title="红黑树的删除"></a>红黑树的删除</h2><p>红黑树的删除同样是三步：</p><ol><li>将红黑树当作二叉搜索树，找到需要删除的节点</li><li>使用恰当的节点值代替该删除节点，并将矛盾转移到代替节点</li><li>删除代替节点，并根据代替节点的情况，旋转着色使之重新成为一颗红黑树</li></ol><p>看起来比插入要复杂一些，这是因为插入的地方肯定为叶子节点，而删除的地方则不一定，因此我们需要将删除的矛盾转移至叶子节点，然后再来解决红黑树的矛盾。</p><h3 id="从二叉搜索树找到需要删除的节点"><a href="#从二叉搜索树找到需要删除的节点" class="headerlink" title="从二叉搜索树找到需要删除的节点"></a>从二叉搜索树找到需要删除的节点</h3><p>利用二叉搜索树的查找方法，找到该节点</p><h3 id="找到代替节点"><a href="#找到代替节点" class="headerlink" title="找到代替节点"></a>找到代替节点</h3><p>找到删除节点后，我们需要明确，删除节点的位置是否可以空置，如果不空置，是否需要找一个替代节点，而替代节点又如何解决？</p><p>这里有三种情况</p><ol><li>被删除节点为叶子节点，由于它已经是叶子节点，因此这个地方可以为空，也即节点可以直接删除。</li></ol><p><img src="/images/posts/rbtree/Untitled%204.png"></p><ol start="2"><li>被删除的节点有一个子节点，那么我们就用这个子节点代替这个节点的位置，而将子节点删除，由于红黑树的的性质3限制，这个子节点肯定是一个叶子节点。</li></ol><p><img src="/images/posts/rbtree/Untitled%205.png"></p><ol start="3"><li>被删除的节点有两个子节点，那么我们就找到该节点的后继节点（右子树的最左节点），用后继节点代替这个节点的位置，而将后继节点删除，后继节点也必定为一个叶子节点</li></ol><p><img src="/images/posts/rbtree/Untitled%206.png"></p><h3 id="删除修正"><a href="#删除修正" class="headerlink" title="删除修正"></a>删除修正</h3><p>经过第二步，我们将删除指定节点的任务，都转化为了删除一个叶子节点的任务，接下来，我们需要根据这个叶子节点的状态，通过旋转着色维护红黑树的性质。</p><blockquote><p>💫 小星说丨一句话总结红黑树的删除修正：父节点下放弥补双黑，兄弟相应调整。这里主要影响到的是兄弟节点和侄子节点</p></blockquote></aside><p>以下两种情况，可以直接删除该节点，用一个外部节点代替其位置</p><table><thead><tr><th>当前节点</th><th>兄弟节点</th><th>侄子节点</th><th>操作</th></tr></thead><tbody><tr><td>根节点</td><td></td><td></td><td>直接删除</td></tr><tr><td>红色</td><td></td><td></td><td>直接删除</td></tr></tbody></table><p>以下几种情况，为了维护性质3，我们在用外部节点代替该节点时，将该外部节点标记为双黑（DB，double black)</p><table><thead><tr><th>当前节点</th><th>兄弟节点</th><th>侄子节点</th><th>操作</th></tr></thead><tbody><tr><td>DB</td><td>红色</td><td></td><td>父亲节点与兄弟节点颜色互换，且父亲节点向DB方向旋转，此时再重新判断DB状态。</td></tr><tr><td>DB</td><td>黑色</td><td>黑色</td><td>当前节点变为单黒，兄弟节点变为红色，父亲节点加一个黑色（黑或双黑），再次判断情况</td></tr><tr><td>DB</td><td>黑色</td><td>远黑近红</td><td>兄弟和红侄子颜色互换，朝着DB的反方向旋转，（即变到下一种状态）此时再重新判断DB状态</td></tr><tr><td>DB</td><td>黑色</td><td>近黑远红</td><td>兄弟和父节点颜色互换，父节点向DB方向旋转，删除DB记号，并将远红侄子标为黑色</td></tr></tbody></table><p>这样理解红黑树的删除修正逻辑：为了弥补双黑节点将要失去的黑色，我们将父节点加一个黑色弥补到这条线路上，但这样兄弟节点那边会多一个黑色。因此，如果侄子是黑的，那么兄弟就可以变红来保持黑色平衡；否则为了不影响兄弟路线上的黑色数目，父节点需要通过旋转来到DB的路径，而兄弟路线上少的一个黑色要由远侄子（不会被带到DB路线上的侄子）弥补。因此，这种情况下兄弟必须是黑色（这个黑色将贡献给父亲），而远侄子也必须是红色（才能弥补一个黑色）。</p><blockquote><p>💫 小星说丨红黑树删除修正达到以下三种情况，即为最终情况，可以彻底解决矛盾，其他的操作是为了达到这三种状态。</p></blockquote><ol><li>当前节点为根节点</li><li>当前节点为红色节点</li><li>兄黑远侄子红</li></ol><p><img src="/images/posts/rbtree/Untitled%207.png"></p><h1 id="手撕红黑树"><a href="#手撕红黑树" class="headerlink" title="手撕红黑树"></a>手撕红黑树</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>首先，我们需要准备构建红黑树所需要的基础数据结构，以及基本的类成员与初始化方法</p><h3 id="节点数据结构"><a href="#节点数据结构" class="headerlink" title="节点数据结构"></a>节点数据结构</h3><p>红黑树由节点构成，因此我们首先需要定义节点的数据结构</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>  <span class="hljs-type">int</span> data;<br>  Node *parent;<br>  Node *left;<br>  Node *right;<br>  <span class="hljs-type">int</span> color;<br>&#125;;<br><br><span class="hljs-comment">// 定义节点指针类型，方便引用</span><br><span class="hljs-keyword">typedef</span> Node *NodePtr;<br></code></pre></td></tr></table></figure><h3 id="基本类成员"><a href="#基本类成员" class="headerlink" title="基本类成员"></a>基本类成员</h3><p>这里我们需要定义两个类成员：根节点与NULL节点（用于截止判定）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedBlackTree</span> &#123;<br>   <span class="hljs-keyword">private</span>:<br>  NodePtr root;<br>  NodePtr TNULL;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="初始化二叉树"><a href="#初始化二叉树" class="headerlink" title="初始化二叉树"></a>初始化二叉树</h3><p>二叉树的初始化：1. 初始化TNULL节点 2. 初始化根节点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">RedBlackTree</span>() &#123;<br>    TNULL = <span class="hljs-keyword">new</span> Node;<br>    TNULL-&gt;color = <span class="hljs-number">0</span>;<br>    TNULL-&gt;left = <span class="hljs-literal">nullptr</span>;<br>    TNULL-&gt;right = <span class="hljs-literal">nullptr</span>;<br>    root = TNULL;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="红黑树的左旋与右旋-1"><a href="#红黑树的左旋与右旋-1" class="headerlink" title="红黑树的左旋与右旋"></a>红黑树的左旋与右旋</h2><p>左旋实现：</p><ol><li>定义right为节点x的右子节点</li><li>将right的左孩子接在父节点的右边</li><li>right的父节点变为祖父节点；祖父节点的（左&#x2F;右）子节点变为right</li><li>right的左节点变为x，x的父节点变为right</li></ol><p>右旋实现同理：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">leftRotate</span><span class="hljs-params">(NodePtr x)</span> </span>&#123;<br>    NodePtr y = x-&gt;right;<br>    x-&gt;right = y-&gt;left;<br>    <span class="hljs-keyword">if</span> (y-&gt;left != TNULL) &#123;<br>      y-&gt;left-&gt;parent = x;<br>    &#125;<br>    y-&gt;parent = x-&gt;parent;<br>    <span class="hljs-keyword">if</span> (x-&gt;parent == <span class="hljs-literal">nullptr</span>) &#123;<br>      <span class="hljs-keyword">this</span>-&gt;root = y;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x == x-&gt;parent-&gt;left) &#123;<br>      x-&gt;parent-&gt;left = y;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      x-&gt;parent-&gt;right = y;<br>    &#125;<br>    y-&gt;left = x;<br>    x-&gt;parent = y;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rightRotate</span><span class="hljs-params">(NodePtr x)</span> </span>&#123;<br>    NodePtr y = x-&gt;left;<br>    x-&gt;left = y-&gt;right;<br>    <span class="hljs-keyword">if</span> (y-&gt;right != TNULL) &#123;<br>      y-&gt;right-&gt;parent = x;<br>    &#125;<br>    y-&gt;parent = x-&gt;parent;<br>    <span class="hljs-keyword">if</span> (x-&gt;parent == <span class="hljs-literal">nullptr</span>) &#123;<br>      <span class="hljs-keyword">this</span>-&gt;root = y;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x == x-&gt;parent-&gt;right) &#123;<br>      x-&gt;parent-&gt;right = y;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      x-&gt;parent-&gt;left = y;<br>    &#125;<br>    y-&gt;right = x;<br>    x-&gt;parent = y;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="红黑树的查找-1"><a href="#红黑树的查找-1" class="headerlink" title="红黑树的查找"></a>红黑树的查找</h2><p>接下来实现红黑树的查找，我们定义一个search公共函数作为外部调用接口，内部的递归使用私有函数searchHelper。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">private</span>:<br><span class="hljs-function">NodePtr <span class="hljs-title">searchTreeHelper</span><span class="hljs-params">(NodePtr node, <span class="hljs-type">int</span> key)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (node == TNULL || key == node-&gt;data) &#123;<br>      <span class="hljs-keyword">return</span> node;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (key &lt; node-&gt;data) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">searchTreeHelper</span>(node-&gt;left, key);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">searchTreeHelper</span>(node-&gt;right, key);<br>  &#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function">NodePtr <span class="hljs-title">searchTree</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">searchTreeHelper</span>(<span class="hljs-keyword">this</span>-&gt;root, k);<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="红黑树的插入-1"><a href="#红黑树的插入-1" class="headerlink" title="红黑树的插入"></a>红黑树的插入</h2><p>这里我们需要定义两个函数，一个是insert函数，一个是插入修正insertFix函数</p><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>插入函数逻辑的实现包括：</p><ol><li>为插入的值new一个新节点</li><li>找到插入位置</li><li>插入该节点，建立父子连接（注意根节点的判定）</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span>&#123;<br><span class="hljs-comment">// 1. new一个新节点</span><br>    NodePtr node = <span class="hljs-keyword">new</span> Node;<br>    node-&gt;parent = <span class="hljs-literal">nullptr</span>;<br>    node-&gt;data = key;<br>    node-&gt;left = TNULL;<br>    node-&gt;right = TNULL;<br>    node-&gt;color = <span class="hljs-number">1</span>;<br><br>    NodePtr y = <span class="hljs-literal">nullptr</span>;<br>    NodePtr x = <span class="hljs-keyword">this</span>-&gt;root;<br><br><span class="hljs-comment">// 2. 找到插入位置</span><br>    <span class="hljs-keyword">while</span> (x != TNULL) &#123;<br>      y = x;<br>      <span class="hljs-keyword">if</span> (node-&gt;data &lt; x-&gt;data) &#123;<br>        x = x-&gt;left;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        x = x-&gt;right;<br>      &#125;<br>    &#125;<br><br><span class="hljs-comment">// 3. 建立父子连接</span><br>    node-&gt;parent = y;<br>    <span class="hljs-keyword">if</span> (y == <span class="hljs-literal">nullptr</span>) &#123;<br>      root = node;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (node-&gt;data &lt; y-&gt;data) &#123;<br>      y-&gt;left = node;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      y-&gt;right = node;<br>    &#125;<br><br>    <span class="hljs-built_in">insertFix</span>(node);<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="插入修正-1"><a href="#插入修正-1" class="headerlink" title="插入修正"></a>插入修正</h3><p>插入修正的5种情况中，情况1和情况2可以排除在循环外，情况3，4，5由循环解决</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertFix</span><span class="hljs-params">(NodePtr k)</span> </span>&#123;<br>        NodePtr u;<br>        <span class="hljs-comment">// 情况1:根结点&amp;情况2:黑父节点</span><br>        <span class="hljs-keyword">while</span> (k-&gt;parent != <span class="hljs-literal">nullptr</span> &amp;&amp; k-&gt;parent-&gt;color == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 父节点为右孩子</span><br>        <span class="hljs-keyword">if</span> (k-&gt;parent == k-&gt;parent-&gt;parent-&gt;right) &#123;<br>            <span class="hljs-comment">// 获取叔叔节点</span><br>            u = k-&gt;parent-&gt;parent-&gt;left;<br><br>            <span class="hljs-comment">// 情况3:叔叔节点为红</span><br>            <span class="hljs-keyword">if</span> (u-&gt;color == <span class="hljs-number">1</span>) &#123;<br>            u-&gt;color = <span class="hljs-number">0</span>;<br>            k-&gt;parent-&gt;color = <span class="hljs-number">0</span>;<br>            k-&gt;parent-&gt;parent-&gt;color = <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 矛盾转移至祖父节点</span><br>            k = k-&gt;parent-&gt;parent;<br>            &#125; <br><br>            <span class="hljs-comment">// 叔叔节点为黑</span><br>            <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 情况4:父子偏向不一致</span><br>            <span class="hljs-keyword">if</span> (k == k-&gt;parent-&gt;left) &#123;<br>                k = k-&gt;parent;<br>                <span class="hljs-built_in">rightRotate</span>(k);<br>            &#125;<br>            <span class="hljs-comment">// 情况5:父子偏向一致</span><br>            k-&gt;parent-&gt;color = <span class="hljs-number">0</span>;<br>            k-&gt;parent-&gt;parent-&gt;color = <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">leftRotate</span>(k-&gt;parent-&gt;parent);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 父节点为左孩子，类似 </span><br>        <span class="hljs-keyword">else</span> &#123;<br>            u = k-&gt;parent-&gt;parent-&gt;right;<br><br>            <span class="hljs-keyword">if</span> (u-&gt;color == <span class="hljs-number">1</span>) &#123;<br>            u-&gt;color = <span class="hljs-number">0</span>;<br>            k-&gt;parent-&gt;color = <span class="hljs-number">0</span>;<br>            k-&gt;parent-&gt;parent-&gt;color = <span class="hljs-number">1</span>;<br>            k = k-&gt;parent-&gt;parent;<br>            &#125; <br>            <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (k == k-&gt;parent-&gt;right) &#123;<br>                k = k-&gt;parent;<br>                <span class="hljs-built_in">leftRotate</span>(k);<br>            &#125;<br>            k-&gt;parent-&gt;color = <span class="hljs-number">0</span>;<br>            k-&gt;parent-&gt;parent-&gt;color = <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">rightRotate</span>(k-&gt;parent-&gt;parent);<br>            &#125;<br>        &#125;<br>        &#125;<br>        <span class="hljs-comment">// 根结点染黑</span><br>        root-&gt;color = <span class="hljs-number">0</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="红黑树的删除-1"><a href="#红黑树的删除-1" class="headerlink" title="红黑树的删除"></a>红黑树的删除</h2><p>这里同样需要定义两个函数，一个是删除函数deleteNode，一个是删除修正函数deleteFix</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除函数的逻辑实现包括：</p><ol><li>找到key对应的节点</li><li>找到对应的代替节点（叶子节点；有一个子节点；有两个子节点）</li><li>删除修正</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deleteNode</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 1. 找到key对应的节点</span><br>        NodePtr z = TNULL;<br>        z = <span class="hljs-built_in">searchTreeHelper</span>(<span class="hljs-keyword">this</span>-&gt;root, key);<br>        <span class="hljs-keyword">if</span> (z == TNULL)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;Key not found in the tree&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 2. 找到对应的代替节点</span><br>        NodePtr y = TNULL;<br>        <span class="hljs-keyword">if</span> (z-&gt;left == TNULL &amp;&amp; z-&gt;right == TNULL)<br>        &#123;<br>            y = z;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (z-&gt;left == TNULL)<br>        &#123;<br>            y = z-&gt;right;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (z-&gt;right == TNULL)<br>        &#123;<br>            y = z-&gt;left;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            y = <span class="hljs-built_in">minimum</span>(z-&gt;right);<br>        &#125;<br>        z-&gt;data = y-&gt;data;<br><br>        <span class="hljs-comment">// 3. 删除修正</span><br>        <span class="hljs-built_in">deleteFix</span>(y);<br>        <span class="hljs-comment">// 修正完后删除这个节点</span><br>        <span class="hljs-keyword">if</span> (y-&gt;data &lt; y-&gt;parent-&gt;data)&#123;<br>            y-&gt;parent-&gt;left = TNULL;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            y-&gt;parent-&gt;right = TNULL;<br>        &#125;<br>        <span class="hljs-comment">// 释放指针</span><br>        z = y;<br>        <span class="hljs-keyword">delete</span> y;<br>        y = <span class="hljs-literal">NULL</span>;<br>        z = <span class="hljs-literal">NULL</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="删除修正-1"><a href="#删除修正-1" class="headerlink" title="删除修正"></a>删除修正</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deleteFix</span><span class="hljs-params">(NodePtr x)</span></span><br><span class="hljs-function">    </span>&#123;<br>        NodePtr s;<br>        <span class="hljs-comment">// 情况1:根结点&amp;情况2:红节点</span><br>        <span class="hljs-keyword">while</span> (x != root &amp;&amp; x-&gt;color == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-comment">// x为左节点</span><br>            <span class="hljs-keyword">if</span> (x == x-&gt;parent-&gt;left)<br>            &#123;<br>                s = x-&gt;parent-&gt;right;<br>                <span class="hljs-comment">// 情况3:兄弟节点为红色</span><br>                <span class="hljs-keyword">if</span> (s-&gt;color == <span class="hljs-number">1</span>)<br>                &#123;<br>                    s-&gt;color = <span class="hljs-number">0</span>;<br>                    x-&gt;parent-&gt;color = <span class="hljs-number">1</span>;<br>                    <span class="hljs-built_in">leftRotate</span>(x-&gt;parent);<br>                    <span class="hljs-comment">// 获得新的兄弟节点</span><br>                    s = x-&gt;parent-&gt;right;<br>                &#125;<br><br>                <span class="hljs-comment">// 情况4:兄弟节点为黑色，侄子节点为黑色 </span><br>                <span class="hljs-keyword">if</span> (s-&gt;left-&gt;color == <span class="hljs-number">0</span> &amp;&amp; s-&gt;right-&gt;color == <span class="hljs-number">0</span>)<br>                &#123;<br>                    s-&gt;color = <span class="hljs-number">1</span>;<br>                    <span class="hljs-comment">// 父亲节点变为要判断的节点</span><br>                    x = x-&gt;parent;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-comment">// 情况5: 侄子远黑近红</span><br>                    <span class="hljs-keyword">if</span> (s-&gt;right-&gt;color == <span class="hljs-number">0</span>)<br>                    &#123;<br>                        s-&gt;left-&gt;color = <span class="hljs-number">0</span>;<br>                        s-&gt;color = <span class="hljs-number">1</span>;<br>                        <span class="hljs-built_in">rightRotate</span>(s);<br>                        s = x-&gt;parent-&gt;right;<br>                    &#125;<br><br>                    <span class="hljs-comment">// 情况6: 侄子远红近黑</span><br>                    s-&gt;color = x-&gt;parent-&gt;color;<br>                    x-&gt;parent-&gt;color = <span class="hljs-number">0</span>;<br>                    s-&gt;right-&gt;color = <span class="hljs-number">0</span>;<br>                    <span class="hljs-built_in">leftRotate</span>(x-&gt;parent);<br>                    <span class="hljs-comment">// 终止循环</span><br>                    x = root;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// x为右节点，类似</span><br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                s = x-&gt;parent-&gt;left;<br>                <span class="hljs-keyword">if</span> (s-&gt;color == <span class="hljs-number">1</span>)<br>                &#123;<br>                    s-&gt;color = <span class="hljs-number">0</span>;<br>                    x-&gt;parent-&gt;color = <span class="hljs-number">1</span>;<br>                    <span class="hljs-built_in">rightRotate</span>(x-&gt;parent);<br>                    s = x-&gt;parent-&gt;left;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (s-&gt;right-&gt;color == <span class="hljs-number">0</span> &amp;&amp; s-&gt;right-&gt;color == <span class="hljs-number">0</span>)<br>                &#123;<br>                    s-&gt;color = <span class="hljs-number">1</span>;<br>                    x = x-&gt;parent;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-keyword">if</span> (s-&gt;left-&gt;color == <span class="hljs-number">0</span>)<br>                    &#123;<br>                        s-&gt;right-&gt;color = <span class="hljs-number">0</span>;<br>                        s-&gt;color = <span class="hljs-number">1</span>;<br>                        <span class="hljs-built_in">leftRotate</span>(s);<br>                        s = x-&gt;parent-&gt;left;<br>                    &#125;<br><br>                    s-&gt;color = x-&gt;parent-&gt;color;<br>                    x-&gt;parent-&gt;color = <span class="hljs-number">0</span>;<br>                    s-&gt;left-&gt;color = <span class="hljs-number">0</span>;<br>                    <span class="hljs-built_in">rightRotate</span>(x-&gt;parent);<br>                    x = root;<br>                &#125;<br>            &#125;<br>        &#125;<br>        x-&gt;color = <span class="hljs-number">0</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>再最后，我们再用一张思维导图总结本篇博客的内容</p><p><img src="/images/posts/rbtree/Untitled%208.png"></p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p>本文代码已在github上开源，包含c++，python(待补充), golang(待补充)的红黑树代码，如果你觉得这篇文章对你有帮助的话，还请帮忙在github上点个Star，谢谢！</p><p><a href="https://github.com/Yuxin1999/star-code/tree/main/DSA/RBTree">Github地址</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://juejin.cn/post/7035463218604556325">红黑树 - 插入篇 - 掘金</a></p><p><a href="https://medium.com/analytics-vidhya/deletion-in-red-black-rb-tree-92301e1474ea">Deletion in Red-Black (RB) Tree</a></p><p><a href="https://www.programiz.com/dsa/red-black-tree">Red-Black Tree</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>DSA</tag>
      
      <tag>红黑树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验室工作站配置记录</title>
    <link href="/2022/11/01/21-44-37/"/>
    <url>/2022/11/01/21-44-37/</url>
    
    <content type="html"><![CDATA[<p>给实验室配置新的服务器，具体配置如下：</p><ul><li>CPU：Xeon 2.5 G x 2，40核80进程</li><li>内存：32GX4</li><li>存储：8T</li><li>显卡：3090 x 2</li><li>系统：ubuntu20.02</li></ul><h2 id="系统成员管理与登录"><a href="#系统成员管理与登录" class="headerlink" title="系统成员管理与登录"></a>系统成员管理与登录</h2><h3 id="更改user密码"><a href="#更改user密码" class="headerlink" title="更改user密码"></a>更改user密码</h3><p>使用随机生成的高强度密码代替原始密码，保证服务器安全性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo passwd user<br></code></pre></td></tr></table></figure><h3 id="创建成员组与成员"><a href="#创建成员组与成员" class="headerlink" title="创建成员组与成员"></a>创建成员组与成员</h3><p>由于该服务器需要多个用途：</p><ol><li>实验室计算需要</li><li>网站搭建需要</li></ol><p>因此需要对其进行严格限制与区分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 对于实验室成员，创建成员组lab</span><br>sudo groupadd lab<br><br><span class="hljs-comment"># 向成员组中添加成员</span><br>sudo useradd user_name -g lab -m<br><br><span class="hljs-comment"># 查看所有用户和用户组</span><br>cat /etc/passwd<br>cat /etc/group<br></code></pre></td></tr></table></figure><h3 id="获取固定局域网IP（校园网用户不建议使用，后面造成很多bug）"><a href="#获取固定局域网IP（校园网用户不建议使用，后面造成很多bug）" class="headerlink" title="获取固定局域网IP（校园网用户不建议使用，后面造成很多bug）"></a><del>获取固定局域网IP（校园网用户不建议使用，后面造成很多bug）</del></h3><p>参考文章：<a href="https://blog.csdn.net/qq_19734597/article/details/104087091">https://blog.csdn.net/qq_19734597&#x2F;article&#x2F;details&#x2F;104087091</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 安装ifupdown </span><br>sudo apt install ifupdown<br><span class="hljs-comment"># 查看网卡名称</span><br>ifconfig<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出第一行eno1为网卡名称</span><br><span class="hljs-string">eno1:flags=4163....</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># 查看网关地址</span><br>netstat -r<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出第一列中类ipv4地址192.168.11.2即为网关地址</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># 修改配置文件</span><br>sudo vim /etc/network/interfaces<br><br><span class="hljs-comment"># 配置文件修改如下</span><br>iface **eno1** inet static <span class="hljs-comment"># 填网卡名称</span><br>address <span class="hljs-number">192.168</span><span class="hljs-number">.11</span><span class="hljs-number">.135</span><br>**gateway** <span class="hljs-number">192.168</span><span class="hljs-number">.11</span><span class="hljs-number">.2</span> <span class="hljs-comment"># 填自己的网关</span><br>netmask <span class="hljs-number">255.255</span><span class="hljs-number">.255</span><span class="hljs-number">.0</span><br>dns-nameservers <span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span><br><br><span class="hljs-comment">#重启网络服务</span><br>sudo service network-manager restart<br><br><span class="hljs-comment">#ifconfig查看局域网地址</span><br></code></pre></td></tr></table></figure><p>修改后重启电脑时，可能会导致网络消失，解决方法查看基础配置问题&#x2F;有线网络消失</p><h2 id="安全登录设置"><a href="#安全登录设置" class="headerlink" title="安全登录设置"></a>安全登录设置</h2><h3 id="修改ssh端口22"><a href="#修改ssh端口22" class="headerlink" title="修改ssh端口22"></a>修改ssh端口22</h3><p>ssh默认端口为22，但从安全方面考虑，建议修改1024到65535</p><p><strong>修改为5160</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo vi /etc/ssh/ssh_config<br>sudo vi /etc/ssh/sshd_config<br><span class="hljs-comment"># 取消Port前注释并将端口改成5160</span><br><br><span class="hljs-comment"># 重启sshd服务</span><br>service sshd restart<br></code></pre></td></tr></table></figure><h3 id="禁用远程root登录"><a href="#禁用远程root登录" class="headerlink" title="禁用远程root登录"></a>禁用远程root登录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo vi /etc/ssh/sshd_config<br><span class="hljs-comment"># 把permitrootlogin 改成 no</span><br></code></pre></td></tr></table></figure><h3 id="修改rsa登录"><a href="#修改rsa登录" class="headerlink" title="修改rsa登录"></a>修改rsa登录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在自己本地电脑生成公钥与私钥</span><br>ssh-keygen<br><span class="hljs-comment"># 将id_rsa.pub转移到服务器上</span><br><br><span class="hljs-comment"># 在该用户工作区，新建.ssh文件夹，在.ssh文件夹中新建文件authorized_keys</span><br><span class="hljs-comment"># 添加公钥至authorized_keys</span><br>cat id_rsa.pub &gt;&gt; .ssh/authorized_keys<br><br><span class="hljs-comment"># 调整权限</span><br>chmod <span class="hljs-number">600</span> authorized_keys<br>chmod <span class="hljs-number">700</span> ~/.ssh<br><br><span class="hljs-comment"># 设置服务器ssh</span><br>sudo vim /etc/ssh/sshd_config<br><span class="hljs-comment"># 取消以下两行的注释</span><br>RSAAuthentication yes<br>PubkeyAuthentication yes<br><br><span class="hljs-comment"># 重启</span><br>service sshd restart<br></code></pre></td></tr></table></figure><h3 id="禁止密码登录"><a href="#禁止密码登录" class="headerlink" title="禁止密码登录"></a>禁止密码登录</h3><p>为了防止不同用户使用弱密码时被攻破，只允许使用公钥私钥配对登录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo vim /etc/ssh/sshd_config<br><span class="hljs-comment"># 修改</span><br>PasswordAuthencation no<br></code></pre></td></tr></table></figure><h2 id="图形界面基础软件安装"><a href="#图形界面基础软件安装" class="headerlink" title="图形界面基础软件安装"></a>图形界面基础软件安装</h2><h3 id="拼音输入法"><a href="#拼音输入法" class="headerlink" title="拼音输入法"></a>拼音输入法</h3><p>参考文章：<a href="https://blog.csdn.net/kan2016/article/details/105735645">https://blog.csdn.net/kan2016/article/details/105735645</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 安装fcitx</span><br>sudo apt install fcitx<br><span class="hljs-comment"># 此处踩坑：unable to locate package fcitx</span><br><span class="hljs-comment"># 原因：需要更新源</span><br><br><span class="hljs-comment"># 配置Fcitx</span><br>im-config <span class="hljs-comment"># 选择fcitx</span><br><br><span class="hljs-comment"># 安装谷歌输入法</span><br>sudo apt install fcitx-fooflepinyin -y<br>fcitx-config-gtk3sudo <span class="hljs-comment"># 选择Google-pinyin并确认</span><br></code></pre></td></tr></table></figure><h3 id="Pycharm安装"><a href="#Pycharm安装" class="headerlink" title="Pycharm安装"></a>Pycharm安装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 官网下载对应版本</span><br><span class="hljs-comment"># 解压至opt文件夹（opt文件夹用于安装额外的软件,在root用户下安装）</span><br>tar-zxvf pycharm-community.tar.gz -C /opt<br><span class="hljs-comment"># 进入opt/pycharm/bin</span><br>sh pycharm.sh<br>完成配置<br></code></pre></td></tr></table></figure><h2 id="环境相关安装"><a href="#环境相关安装" class="headerlink" title="环境相关安装"></a>环境相关安装</h2><h3 id="显卡驱动"><a href="#显卡驱动" class="headerlink" title="显卡驱动"></a>显卡驱动</h3><ol><li>卸载旧驱动</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo apt-get --purge remove nvidia*<br>sudo apt autoremove<br></code></pre></td></tr></table></figure><ol><li>重装驱动</li></ol><p>在<a href="https://www.nvidia.cn/Download/index.aspx?lang=cn">Nvidia官网</a>下载对应的驱动版本：</p><p><img src="/images/posts/Nvidia.png" alt="Nividia官网下载"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 给驱动文件赋予执行权限</span><br>sudo chmod  a+x (下载的驱动文件）<br><span class="hljs-comment"># 安装驱动</span><br>sudo ./驱动文件name -no-x-check -no-nouveau-check -no-opengl-files<br>reboot<br></code></pre></td></tr></table></figure><h3 id="conda环境与安装"><a href="#conda环境与安装" class="headerlink" title="conda环境与安装"></a>conda环境与安装</h3><p>参考文章：<a href="https://zhuanlan.zhihu.com/p/459607806">https://zhuanlan.zhihu.com/p/459607806</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 每个用户独立安装自己的conda</span><br><span class="hljs-comment"># 进入data/anaconda3</span><br>wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-<span class="hljs-number">2021.11</span>-Linux-x86_64.sh<br><span class="hljs-comment"># 安装(在普通用户下</span><br>bash Anaconda3-<span class="hljs-number">2021.11</span>-Linux-x86_64.sh<br><span class="hljs-comment"># 安装路径设置在home/user/anaconda3</span><br>source ~/.bashrc<br></code></pre></td></tr></table></figure><h3 id="cuda安装"><a href="#cuda安装" class="headerlink" title="cuda安装"></a>cuda安装</h3><p>在<a href="https://developer.nvidia.com/cuda-toolkit-archive">Nvidia官网</a>下载对应CUDA版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 安装cuda</span><br>sudo sh cuda_11<span class="hljs-number">.7</span><span class="hljs-number">.0_515</span><span class="hljs-number">.43</span><span class="hljs-number">.04</span>_linux.run<br> <br>配置环境变量<br>vim  ~/.bashrc<br> <br>export PATH=/usr/local/cuda-<span class="hljs-number">11.7</span>/<span class="hljs-built_in">bin</span>$&#123;PATH:+:$&#123;PATH&#125;&#125;<br>export LD_LIBRARY_PATH=/usr/local/cuda-<span class="hljs-number">11.7</span>/lib64$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125;<br> <br><span class="hljs-comment"># 更新环境变量</span><br>source ~/.bashrc<br> <br><span class="hljs-comment"># 查看cuda是否安装成功</span><br>nvcc -V<br></code></pre></td></tr></table></figure><h2 id="基础配置问题"><a href="#基础配置问题" class="headerlink" title="基础配置问题"></a>基础配置问题</h2><h3 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 备份原来的源</span><br>sudo cp /etc/apt/source.<span class="hljs-built_in">list</span> /etc/apt/sources.<span class="hljs-built_in">list</span>.bak<br><br><span class="hljs-comment"># 使用vim打开并编辑source.list</span><br>sudo vim /etc/apt/source.<span class="hljs-built_in">list</span><br><br><span class="hljs-comment"># 在文件中添加源</span><br><br>deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse <br><br>deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse <br><br>deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse <br><br>deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse <br><br>deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse <br><br>deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse <br><br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse <br><br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse <br><br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse <br><br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse focal<br><br><span class="hljs-comment"># 更新源</span><br>sudo apt-get update<br></code></pre></td></tr></table></figure><h3 id="有线网络连接消失"><a href="#有线网络连接消失" class="headerlink" title="有线网络连接消失"></a>有线网络连接消失</h3><ul><li>原因：由于<code>/etc/network/interfaces</code>的手动修改而导致<code>network-manager</code>自动停止对系统网络的管理，从而系统开始使用<code>/etc/network/interfaces</code>文件内的参数进行网络配置。</li><li>解决方法(root用户下进行）：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 删除缓存文件</span><br>sudo service network-manager stop<br>sudo rm /var/lib/NetworkManager/NetworkManager.state<br>sudo service network-manager start<br><br><span class="hljs-comment"># 修改网络控制配置</span><br>sudo vi /etc/NetworkManager/NetworkManager.conf<br><span class="hljs-comment">#将managed=false更改为true</span><br><br><span class="hljs-comment">#重启NetworkManager</span><br>sudo service network-manager restart<br></code></pre></td></tr></table></figure><ul><li>然后可以通过图形界面连接</li></ul><h3 id="无法打开网页"><a href="#无法打开网页" class="headerlink" title="无法打开网页"></a>无法打开网页</h3><p>正常连接校园网，一段时间后无法打开任何网页，重启网络服务无效，ifconfig命令显示正常。</p><p>用Ping检查网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">ping baidu.com<br><span class="hljs-comment"># Temporary failure in name resolution</span><br>ping <span class="hljs-number">202.108</span><span class="hljs-number">.22</span><span class="hljs-number">.5</span><br><span class="hljs-comment"># 直接ping百度域名，packet loss</span><br>ping6 <span class="hljs-number">2402</span>:<span class="hljs-number">4e00</span>:<span class="hljs-number">40</span>:<span class="hljs-number">40</span>::<span class="hljs-number">2</span>:3b6<br><span class="hljs-comment"># ping ipv6地址，成功</span><br></code></pre></td></tr></table></figure><p>查阅可能是DNS解析的问题，导致无法连接所网认证ipv4，因此只能Ping通ipv6地址</p><p>利用网上的方法修改均不能奏效，考虑到在修改静态IP时，建议校园网用户不要使用，因此只能把之前关于网络的设置改回来，改回来后就能够正常上网了。可能是静态IP设置了静态DNS与默认DNS不符。</p><h3 id="分辨率问题"><a href="#分辨率问题" class="headerlink" title="分辨率问题"></a>分辨率问题</h3><p>初始开机分辨率正常，在更换显卡驱动重装桌面后显示不正常（1024x768），需要更换分辨率</p><p>使用网上的教程，用xrandr修改失效，经查阅资料后是显卡驱动的问题。</p><p>在重装显卡驱动后恢复正常</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux 运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>十月入秋</title>
    <link href="/2022/10/11/21-44-37/"/>
    <url>/2022/10/11/21-44-37/</url>
    
    <content type="html"><![CDATA[<p>金秋九月，今年的北京却是十月才有了些秋的样子。</p><p>阳台上还挂着刚洗的夏季的薄衫，妖风就随着秋天来到了。在它吹走吹乱晾衣绳上缠绕交融的长裙与纱衣前，抗风的外套、帽子、手套率先把人武装起来了。</p><p>然而我对季节的更替向来有些迟钝。直到在拥挤喧嚷的街头推着冰凉的共享单车，暖黄色的路灯在散光的眼瞳中呼吸闪烁，我联觉到曾被包裹在剧院外带着寒风的交响乐声中的2019年秋天，才意识到秋天似乎是来到了，且带来了它具有韵律性的寒冷。</p><p>这是九月末尾的事情，我从实习公司下班，因为少加了一件外套被秋天入侵，寒凉的重量加在了呼吸道中、加在了头颈的血管中。</p><p>春捂秋冻，老话说，或许是因为秋冻并没有那么强大。夏天的热量仍在血管中燃烧着，这寒凉仅仅入侵了几分钟，在回到我温暖的小屋后便被燃烧殆尽。这小屋里什么都得被燃烧，接下来是长长的七天国庆假期，我知道什么都得被燃烧。那些个金光闪闪、璀璨绚丽的未来，只有在冷得发灰的逼仄教室中才能梦的见。而那作梦的笔墨，也只有在冷的风里才能书写。</p><p>寒冷中的我是清醒的，中学时思考总是在阴冷天气的中午；本科则是在夜幕时分的熙春园与荒岛，在长白上的雪地，在流光闪烁的中关村大街。后来呢，后来就思考得没那么多了，或许是说，根本不思考，因为被燃烧殆尽了。</p><p>热量包围了我，从我来到北京，奢靡的、放纵的、下沉的热量包围了我，燃烧掉我的清醒。我的笔下再也写不出灵性的文字，我的脑子里再也没有奇绝的想法，而我的心也不再年轻，不再热情，不再有勇气。我被完完全全地蚕食掉，变成普罗大众，再也不特别了。且，再也不想特别，也不会认为自己可以特别了。</p><p>入了秋，我的心情烦躁了起来，只有寒冷能够给予我灵台的清醒，或许我需要去拥抱寒冷，找回一点过去的自己，找回一点力量。这力量来自于自身，不依靠他人，因为曾经的我是有自己的强大的力量的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>散文</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
